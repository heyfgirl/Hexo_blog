{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/yelee/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Github.png","path":"img/Github.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/璞嗙摚.png","path":"img/璞嗙摚.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/鏂版氮寰崥.png","path":"img/鏂版氮寰崥.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/鐭ヤ箮.png","path":"img/鐭ヤ箮.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/铏剧背闊充箰.png","path":"img/铏剧背闊充箰.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/_config.yml","hash":"66d1d16ef73985269a020397809dd47d392ac94d","modified":1574903724909},{"_id":"themes/yelee/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1562323922149},{"_id":"source/_posts/centos_server.md","hash":"43a34f0ee07902f01ebfc646eb7d20315f122c51","modified":1562323922130},{"_id":"source/_posts/deep-copy.md","hash":"d432ca258ac25c1119e95624ff083c7bc53277f2","modified":1562323922130},{"_id":"source/_posts/docker-postgres-backup.md","hash":"caf6bb6c4348db0d0c67543635305013a284f43f","modified":1574849877643},{"_id":"source/_posts/hexo-release.md","hash":"23d3ee91fa8543db413581eca56b5c451af3a313","modified":1562323922130},{"_id":"source/_posts/http_web_server.md","hash":"b7a6815e21fe6507b427fe0af9996cfce9bf34d4","modified":1562323922130},{"_id":"source/_posts/iptables_config.md","hash":"5729ae7eb8e1a022fa0d65667f9e80e2aa28f439","modified":1562323922130},{"_id":"source/_posts/node-buffer-memory-allocation.md","hash":"b79976ca78cf8a1e4b3770d803ea89828bbc855f","modified":1562323922130},{"_id":"source/_posts/node-highly-active-timer.md","hash":"ba9d479dca8cd4f5c4c082af6b200e2dd9774d86","modified":1562323922131},{"_id":"source/_posts/node-safety-detail.md","hash":"da6491faa6a77d4cc06725913566e045d6da6893","modified":1562323922131},{"_id":"source/_posts/node_http_flow.md","hash":"3cb41aaa7e74db9ab7b1949f8d46f7cd2735c6c0","modified":1562323922131},{"_id":"source/_posts/postgres-array-operator.md","hash":"65cd90c7268008c5baed4ee3f6a6576fc30b3002","modified":1574856021064},{"_id":"source/_posts/ssh-pip-sql.md","hash":"48254ff63889abe149caa098bf954118dc3d98d2","modified":1574822973273},{"_id":"source/_posts/ssh-t-github-error.md","hash":"7b99c40d192f2a6cf23b684a4643f918de6db563","modified":1574824768602},{"_id":"source/_posts/sequelize-control-pgsql.md","hash":"5c70bf9120e348501e9c6f32a2cd10abd95719f2","modified":1562323922131},{"_id":"source/_posts/ssh_error.md","hash":"e65e39b66c0da7b6458c1f42400cd3a7af94f8bd","modified":1562323922131},{"_id":"source/tags/index.md","hash":"4397d66da550ab341721704c9da0faef7aee9568","modified":1562323922131},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1562323922144},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1562323922144},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1562323922144},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1562323922145},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1562323922145},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1562323922148},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1562323922148},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1562323922149},{"_id":"themes/yelee/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1562323922149},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1562323922149},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1562323922149},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1562323922149},{"_id":"themes/yelee/source/CNAME","hash":"8dbf57be21ede1ee6a56a29f26dde0cc52189d9e","modified":1562323922149},{"_id":"themes/yelee/source/favicon.ico","hash":"8cee521d7b365d5d8cbe0beea536927286ccc498","modified":1562323922162},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"66044197b3fe69ff42605e5784a969d37f33fa40","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"329426be608ae1b4cce30df7ed2fadab5a282eb4","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"d781737389f408a5dd57a0f9430d2704b7fe192c","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"a439ebf7c4798ad3830e66ccf226a60b05ffea0a","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"923e329af9b7ce07dd53556ee76d2c441e90f07f","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"5ee0ce47af9f52417deee2ee8b657ecdaabf076d","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"6ea8bacacc8370ccf5af4e6f66da3bc743b88342","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"252f3757edea31d55a7e5624e2214f268bf07283","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"48696ded8e57def05d7ea58e74730f49d66ea6b5","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"9e504a0ec060ac3c6622855734ebea6eca2b78e9","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"190efc2e8ee037387685ff7dd24ae6db8bc77c60","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"6da102cd4a05bc6b4807b937862a7332f6845e5f","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"a0c6362e0f0161bbb7e70d50a4d9e39f2ff8ca48","modified":1562323922148},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1562323922154},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"86b6a6bf98384773138383a8cac8eaf924e0530a","modified":1562323922159},{"_id":"themes/yelee/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1562323922159},{"_id":"themes/yelee/source/css/_variables.styl","hash":"bca217a64e422ea7a4a1748b8fc980b408e8c836","modified":1562323922162},{"_id":"themes/yelee/source/css/style.styl","hash":"33519d7a6be12193795382840810e9ab1a5eae8e","modified":1562323922162},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1562323922165},{"_id":"themes/yelee/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1562323922165},{"_id":"themes/yelee/source/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1562323922165},{"_id":"themes/yelee/source/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1562323922166},{"_id":"themes/yelee/source/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1562323922166},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1562323922166},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1562323922166},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1562323922162},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1562323922163},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1562323922163},{"_id":"themes/yelee/source/img/Github.png","hash":"07ed688be6d6288a669778f65f7eccdd96770925","modified":1562323922163},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1562323922163},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1562323922163},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1562323922163},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1562323922163},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1562323922163},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1562323922163},{"_id":"themes/yelee/source/img/avatar.png","hash":"d10b722e56f9003f0e82a6bc37009e034b4784b4","modified":1562323922164},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1562323922164},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1562323922164},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1562323922164},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1562323922164},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1562323922164},{"_id":"themes/yelee/source/img/璞嗙摚.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1562323922164},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1562323922164},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1562323922164},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1562323922165},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1562323922165},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1562323922165},{"_id":"themes/yelee/source/img/鏂版氮寰崥.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1562323922165},{"_id":"themes/yelee/source/img/鐭ヤ箮.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1562323922165},{"_id":"themes/yelee/source/img/铏剧背闊充箰.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1562323922165},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1562323922145},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1574903697727},{"_id":"themes/yelee/layout/_partial/comments/disqus2.ejs","hash":"b0b73b4629983b4de447418f30bf744cdf7ed044","modified":1574854194270},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"15c269b81046b22ee44d38d9a08fc66618318435","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1562323922146},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"357a8de8a7ed8194efc16f55f97f7e2551b31bf9","modified":1562323922147},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"f419161d4e8dddfab6e500c99ca9f999cd7a1b55","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"6f399dd6102a7e520caf072460dda86ac83e7580","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1562323922148},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1562323922148},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"416786f566582fe697a12bb03a9eb2d1c604e2c7","modified":1562323922159},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"384f9a9c017400b12f52ac33759380075e527998","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4dcf5d3e3435897de91b39473a93fb7c3ad73dde","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"d82129844528ae1a5c9547bc6d3f5bd37b0fb801","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"034eb9605e006a0d0098bd963e9cdc11a1eaf6c3","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"4681032f51fd0df6451051ba35efa1f9f745c302","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"d05287b44c64576b8560461bc6c3b7e8ceda5539","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"24ff28457b5e1519a8b4561284f6159bdd827ad4","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"9d7847cc899970a19d288c9eec9f24691c053ef3","modified":1562323922161},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1562323922162},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1562323922162},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1562323922162},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1562323922162},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"45d36a307c22a754ed87f3ae6441ba8616f7329c","modified":1562323922159},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"2af5a5d9ad392dc1df3d6c32de19f193dca38b63","modified":1562323922155},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d5a1f713b25161576318c8a4481eb0ef529812a0","modified":1562323922158},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"9b96dd1c51b43a1130b3bb6eedb293b77eef8b1d","modified":1562323922159},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"816044b7680514626981e945ee6be943a5de60a7","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"2014a25ec300910b8a093ec8010f6703a2142021","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1562323922160},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"293b74f18a214d0343e512f64715873e0e685728","modified":1562323922160},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"ca1fcec0aa94d399f748c600c7b0b7503635a718","modified":1562323922154},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"ca1fcec0aa94d399f748c600c7b0b7503635a718","modified":1562323922151},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"dd19ee7f68c0b0ab48bc8a5d6cbd091464451a9f","modified":1562323922157},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"dd19ee7f68c0b0ab48bc8a5d6cbd091464451a9f","modified":1562323922153}],"Category":[{"name":"ORM","_id":"ck3h8lk4s000q4d85g420h3wp"},{"name":"linux","_id":"ck3h8lk4t000u4d85g65noz3n"},{"name":"ssh","_id":"ck3h8lk4u000y4d85lob4pg47"}],"Data":[],"Page":[{"title":"标签云","date":"2018-11-20T02:31:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\ndate: 2018-11-20 10:31:27\ntype: \"tags\"\n---\n","updated":"2019-07-05T10:52:02.131Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3h8lk4900014d85v2c4169d","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"小作坊的服务器购买须知","date":"2017-11-09T08:30:49.000Z","updated":"2017-11-09T08:30:49.000Z","_content":"** 如今大多数同学在学习编程的道路上，都会选择购买自己的服务器，然而由于国内环境，并不能访问到Google等，所以很多同学会选择，国外服务器，或者香港服务器。我推荐如果只是学习编程实践没有访问外网的需要，还是用国内的阿里云服务，质量还是有保证的。本人使用的是香港的小作坊服务器UFOVPS，遭受多次攻击。很沉痛。在此来告诫各位同学 **\n\n### ssh登陆不上，被告知流量异常\n提交工单回复\n*後台系統檢測到您的服務器不停地往外發送大量異常數據包，和攻擊行為的特徵很類似，在短時間內消耗了大量的流量，流量記錄您可以在“監測記錄”看到，請問是否是您本人使用？如果不是您本人使用，可能是由下面的原因造成的：*\n```\n使用了不夠複雜的密碼 ，或者已經被洩露的常用密碼，導致服務器被入侵或者惡意利用；\n使用了第三方的破解版軟件或者沒有驗證來源的軟件 ，例如shadowsock、銳速、ZetaTCP等破解軟件，導致被利用後門入侵或劫持。\n```\n但是我只知道并非如此，通过查看后台流量；来源我发现是我的服务器大量的向外请求无效数据包，被当成肉鸡了，我立刻将防火墙Iptables打开，关闭向外访问权限，限制请求频率才解决。\n关于如何设置防火墙请查看我另一个记录文档。\n","source":"_posts/centos_server.md","raw":"---\ntitle: 小作坊的服务器购买须知\ndate: 2017-11-09 16:30:49\nupdated: 2017-11-09 16:30:49\ntags: \n- linux \n- 防火墙\n- CentOS\n- 服务器\n---\n** 如今大多数同学在学习编程的道路上，都会选择购买自己的服务器，然而由于国内环境，并不能访问到Google等，所以很多同学会选择，国外服务器，或者香港服务器。我推荐如果只是学习编程实践没有访问外网的需要，还是用国内的阿里云服务，质量还是有保证的。本人使用的是香港的小作坊服务器UFOVPS，遭受多次攻击。很沉痛。在此来告诫各位同学 **\n\n### ssh登陆不上，被告知流量异常\n提交工单回复\n*後台系統檢測到您的服務器不停地往外發送大量異常數據包，和攻擊行為的特徵很類似，在短時間內消耗了大量的流量，流量記錄您可以在“監測記錄”看到，請問是否是您本人使用？如果不是您本人使用，可能是由下面的原因造成的：*\n```\n使用了不夠複雜的密碼 ，或者已經被洩露的常用密碼，導致服務器被入侵或者惡意利用；\n使用了第三方的破解版軟件或者沒有驗證來源的軟件 ，例如shadowsock、銳速、ZetaTCP等破解軟件，導致被利用後門入侵或劫持。\n```\n但是我只知道并非如此，通过查看后台流量；来源我发现是我的服务器大量的向外请求无效数据包，被当成肉鸡了，我立刻将防火墙Iptables打开，关闭向外访问权限，限制请求频率才解决。\n关于如何设置防火墙请查看我另一个记录文档。\n","slug":"centos_server","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4400004d851ozy1nf3","content":"<p><strong> 如今大多数同学在学习编程的道路上，都会选择购买自己的服务器，然而由于国内环境，并不能访问到Google等，所以很多同学会选择，国外服务器，或者香港服务器。我推荐如果只是学习编程实践没有访问外网的需要，还是用国内的阿里云服务，质量还是有保证的。本人使用的是香港的小作坊服务器UFOVPS，遭受多次攻击。很沉痛。在此来告诫各位同学 </strong></p>\n<h3 id=\"ssh登陆不上，被告知流量异常\"><a href=\"#ssh登陆不上，被告知流量异常\" class=\"headerlink\" title=\"ssh登陆不上，被告知流量异常\"></a>ssh登陆不上，被告知流量异常</h3><p>提交工单回复<br><em>後台系統檢測到您的服務器不停地往外發送大量異常數據包，和攻擊行為的特徵很類似，在短時間內消耗了大量的流量，流量記錄您可以在“監測記錄”看到，請問是否是您本人使用？如果不是您本人使用，可能是由下面的原因造成的：</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用了不夠複雜的密碼 ，或者已經被洩露的常用密碼，導致服務器被入侵或者惡意利用；</span><br><span class=\"line\">使用了第三方的破解版軟件或者沒有驗證來源的軟件 ，例如shadowsock、銳速、ZetaTCP等破解軟件，導致被利用後門入侵或劫持。</span><br></pre></td></tr></table></figure></p>\n<p>但是我只知道并非如此，通过查看后台流量；来源我发现是我的服务器大量的向外请求无效数据包，被当成肉鸡了，我立刻将防火墙Iptables打开，关闭向外访问权限，限制请求频率才解决。<br>关于如何设置防火墙请查看我另一个记录文档。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong> 如今大多数同学在学习编程的道路上，都会选择购买自己的服务器，然而由于国内环境，并不能访问到Google等，所以很多同学会选择，国外服务器，或者香港服务器。我推荐如果只是学习编程实践没有访问外网的需要，还是用国内的阿里云服务，质量还是有保证的。本人使用的是香港的小作坊服务器UFOVPS，遭受多次攻击。很沉痛。在此来告诫各位同学 </strong></p>\n<h3 id=\"ssh登陆不上，被告知流量异常\"><a href=\"#ssh登陆不上，被告知流量异常\" class=\"headerlink\" title=\"ssh登陆不上，被告知流量异常\"></a>ssh登陆不上，被告知流量异常</h3><p>提交工单回复<br><em>後台系統檢測到您的服務器不停地往外發送大量異常數據包，和攻擊行為的特徵很類似，在短時間內消耗了大量的流量，流量記錄您可以在“監測記錄”看到，請問是否是您本人使用？如果不是您本人使用，可能是由下面的原因造成的：</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用了不夠複雜的密碼 ，或者已經被洩露的常用密碼，導致服務器被入侵或者惡意利用；</span><br><span class=\"line\">使用了第三方的破解版軟件或者沒有驗證來源的軟件 ，例如shadowsock、銳速、ZetaTCP等破解軟件，導致被利用後門入侵或劫持。</span><br></pre></td></tr></table></figure></p>\n<p>但是我只知道并非如此，通过查看后台流量；来源我发现是我的服务器大量的向外请求无效数据包，被当成肉鸡了，我立刻将防火墙Iptables打开，关闭向外访问权限，限制请求频率才解决。<br>关于如何设置防火墙请查看我另一个记录文档。</p>\n"},{"title":"JavaScript 的深复制","date":"2017-05-26T07:24:59.000Z","updated":"2017-05-26T07:24:59.000Z","_content":"## 第三方库的实现 ##\n### Underscore —— _.clone() ###\n在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。来看一下例子应该会更加直观：\n```javascript\n    var x = {\n        a: 1,\n        b: { z: 0 }\n    };\n\n    var y = _.clone(x);\n\n    y === x       // false\n    y.b === x.b   // true\n\n    x.b.z = 100;\n    y.b.z         // 100\n```\n让我们来看一下 Underscore 的源码：\n```javascript\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n```\n如果目标对象是一个数组，则直接调用数组的slice()方法，否则就是用_.extend()方法。想必大家对extend()方法不会陌生，它的作用主要是将从第二个参数开始的所有对象，按键值逐个赋给第一个对象。而在 jQuery 中也有类似的方法。关于 Underscore 中的 _.extend() 方法的实现可以参考 underscore.js #L1006。\n\nUnderscore 的 clone() 不能算作深复制，但它至少比直接赋值来得“深”一些，它创建了一个新的对象。另外，你也可以通过以下比较 tricky 的方法来完成单层嵌套的深复制：\n\n```javascript\n  var _ = require('underscore');\n  var a = [{f: 1}, {f:5}, {f:10}];\n  var b = _.map(a, _.clone);       // <----\n  b[1].f = 55;\n  console.log(JSON.stringify(a));  // [{\"f\":1},{\"f\":5},{\"f\":10}]\n```\n### jQuery —— $.clone() / $.extend() ###\n在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。这不是这篇文章的重点，所以感兴趣的同学可以参考jQuery的文档。与 Underscore 类似，我们也是可以通过 $.extend() 方法来完成深复制。值得庆幸的是，我们在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, ...)就可以实现深复制啦，参考下面的例子：\n\n```javascript\n  var x = {\n      a: 1,\n      b: { f: { g: 1 } },\n      c: [ 1, 2, 3 ]\n  };\n\n  var y = $.extend({}, x),          //shallow copy\n      z = $.extend(true, {}, x);    //deep copy\n\n  y.b.f === x.b.f       // true\n  z.b.f === x.b.f       // false\n\n```\n在 jQuery的源码 - src/core.js #L121 文件中我们可以找到$.extend()的实现，也是实现得比较简洁，而且不太依赖于 jQuery 的内置函数，稍作修改就能拿出来单独使用。\n\n### lodash —— _.clone() / _.cloneDeep() ###\n在lodash中关于复制的方法有两个，分别是_.clone()和_.cloneDeep()。其中_.clone(obj, true)等价于_.cloneDeep(obj)。使用上，lodash和前两者并没有太大的区别，但看了源码会发现，Underscore 的实现只有30行左右，而 jQuery 也不过60多行。可 lodash 中与深复制相关的代码却有上百行，这是什么道理呢？\n\n```javascript\n  var $ = require(\"jquery\"),\n    _ = require(\"lodash\");\n\n  var arr = new Int16Array(5),\n      obj = { a: arr },\n      obj2;\n  arr[0] = 5;\n  arr[1] = 6;\n\n  // 1. jQuery\n  obj2 = $.extend(true, {}, obj);\n  console.log(obj2.a);                            // [5, 6, 0, 0, 0]\n  Object.prototype.toString.call(obj2);           // [object Int16Array]\n  obj2.a[0] = 100;\n  console.log(obj);                               // [100, 6, 0, 0, 0]\n\n  //此处jQuery不能正确处理Int16Array的深复制！！！\n\n  // 2. lodash\n  obj2 = _.cloneDeep(obj);                       \n  console.log(obj2.a);                            // [5, 6, 0, 0, 0]\n  Object.prototype.toString.call(arr2);           // [object Int16Array]\n  obj2.a[0] = 100;\n  console.log(obj);                               // [5, 6, 0, 0, 0]\n```\n通过上面这个例子可以初见端倪，jQuery 无法正确深复制 JSON 对象以外的对象，而我们可以从下面这段代码片段可以看出 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对存在环的对象的处理也是非常出色的。因此相较而言，lodash 在深复制上的行为反馈比前两个库好很多，是更拥抱未来的一个第三方库。\n```javascript\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n```\n## 借助 JSON 全局对象 ##\n相比于上面介绍的三个库的做法，针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法。然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。\n```javascript\nfunction jsonClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar clone = jsonClone({ a:1 });\n```","source":"_posts/deep-copy.md","raw":"---\ntitle: JavaScript 的深复制\ndate: 2017-05-26 15:24:59\nupdated: 2017-05-26 15:24:59\ntags:\n---\n## 第三方库的实现 ##\n### Underscore —— _.clone() ###\n在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。来看一下例子应该会更加直观：\n```javascript\n    var x = {\n        a: 1,\n        b: { z: 0 }\n    };\n\n    var y = _.clone(x);\n\n    y === x       // false\n    y.b === x.b   // true\n\n    x.b.z = 100;\n    y.b.z         // 100\n```\n让我们来看一下 Underscore 的源码：\n```javascript\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n```\n如果目标对象是一个数组，则直接调用数组的slice()方法，否则就是用_.extend()方法。想必大家对extend()方法不会陌生，它的作用主要是将从第二个参数开始的所有对象，按键值逐个赋给第一个对象。而在 jQuery 中也有类似的方法。关于 Underscore 中的 _.extend() 方法的实现可以参考 underscore.js #L1006。\n\nUnderscore 的 clone() 不能算作深复制，但它至少比直接赋值来得“深”一些，它创建了一个新的对象。另外，你也可以通过以下比较 tricky 的方法来完成单层嵌套的深复制：\n\n```javascript\n  var _ = require('underscore');\n  var a = [{f: 1}, {f:5}, {f:10}];\n  var b = _.map(a, _.clone);       // <----\n  b[1].f = 55;\n  console.log(JSON.stringify(a));  // [{\"f\":1},{\"f\":5},{\"f\":10}]\n```\n### jQuery —— $.clone() / $.extend() ###\n在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。这不是这篇文章的重点，所以感兴趣的同学可以参考jQuery的文档。与 Underscore 类似，我们也是可以通过 $.extend() 方法来完成深复制。值得庆幸的是，我们在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, ...)就可以实现深复制啦，参考下面的例子：\n\n```javascript\n  var x = {\n      a: 1,\n      b: { f: { g: 1 } },\n      c: [ 1, 2, 3 ]\n  };\n\n  var y = $.extend({}, x),          //shallow copy\n      z = $.extend(true, {}, x);    //deep copy\n\n  y.b.f === x.b.f       // true\n  z.b.f === x.b.f       // false\n\n```\n在 jQuery的源码 - src/core.js #L121 文件中我们可以找到$.extend()的实现，也是实现得比较简洁，而且不太依赖于 jQuery 的内置函数，稍作修改就能拿出来单独使用。\n\n### lodash —— _.clone() / _.cloneDeep() ###\n在lodash中关于复制的方法有两个，分别是_.clone()和_.cloneDeep()。其中_.clone(obj, true)等价于_.cloneDeep(obj)。使用上，lodash和前两者并没有太大的区别，但看了源码会发现，Underscore 的实现只有30行左右，而 jQuery 也不过60多行。可 lodash 中与深复制相关的代码却有上百行，这是什么道理呢？\n\n```javascript\n  var $ = require(\"jquery\"),\n    _ = require(\"lodash\");\n\n  var arr = new Int16Array(5),\n      obj = { a: arr },\n      obj2;\n  arr[0] = 5;\n  arr[1] = 6;\n\n  // 1. jQuery\n  obj2 = $.extend(true, {}, obj);\n  console.log(obj2.a);                            // [5, 6, 0, 0, 0]\n  Object.prototype.toString.call(obj2);           // [object Int16Array]\n  obj2.a[0] = 100;\n  console.log(obj);                               // [100, 6, 0, 0, 0]\n\n  //此处jQuery不能正确处理Int16Array的深复制！！！\n\n  // 2. lodash\n  obj2 = _.cloneDeep(obj);                       \n  console.log(obj2.a);                            // [5, 6, 0, 0, 0]\n  Object.prototype.toString.call(arr2);           // [object Int16Array]\n  obj2.a[0] = 100;\n  console.log(obj);                               // [5, 6, 0, 0, 0]\n```\n通过上面这个例子可以初见端倪，jQuery 无法正确深复制 JSON 对象以外的对象，而我们可以从下面这段代码片段可以看出 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对存在环的对象的处理也是非常出色的。因此相较而言，lodash 在深复制上的行为反馈比前两个库好很多，是更拥抱未来的一个第三方库。\n```javascript\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      arrayTag = '[object Array]',\n      boolTag = '[object Boolean]',\n      dateTag = '[object Date]',\n      errorTag = '[object Error]',\n      funcTag = '[object Function]',\n      mapTag = '[object Map]',\n      numberTag = '[object Number]',\n      objectTag = '[object Object]',\n      regexpTag = '[object RegExp]',\n      setTag = '[object Set]',\n      stringTag = '[object String]',\n      weakMapTag = '[object WeakMap]';\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n      float32Tag = '[object Float32Array]',\n      float64Tag = '[object Float64Array]',\n      int8Tag = '[object Int8Array]',\n      int16Tag = '[object Int16Array]',\n      int32Tag = '[object Int32Array]',\n      uint8Tag = '[object Uint8Array]',\n      uint8ClampedTag = '[object Uint8ClampedArray]',\n      uint16Tag = '[object Uint16Array]',\n      uint32Tag = '[object Uint32Array]';\n```\n## 借助 JSON 全局对象 ##\n相比于上面介绍的三个库的做法，针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法。然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。\n```javascript\nfunction jsonClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar clone = jsonClone({ a:1 });\n```","slug":"deep-copy","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4a00024d85m57e5ck5","content":"<h2 id=\"第三方库的实现\"><a href=\"#第三方库的实现\" class=\"headerlink\" title=\"第三方库的实现\"></a>第三方库的实现</h2><h3 id=\"Underscore-——-clone\"><a href=\"#Underscore-——-clone\" class=\"headerlink\" title=\"Underscore —— _.clone()\"></a>Underscore —— _.clone()</h3><p>在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。来看一下例子应该会更加直观：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\"></span><br><span class=\"line\">y === x       <span class=\"comment\">// false</span></span><br><span class=\"line\">y.b === x.b   <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一下 Underscore 的源码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a (shallow-cloned) duplicate of an object.</span></span><br><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>如果目标对象是一个数组，则直接调用数组的slice()方法，否则就是用_.extend()方法。想必大家对extend()方法不会陌生，它的作用主要是将从第二个参数开始的所有对象，按键值逐个赋给第一个对象。而在 jQuery 中也有类似的方法。关于 Underscore 中的 _.extend() 方法的实现可以参考 underscore.js #L1006。</p>\n<p>Underscore 的 clone() 不能算作深复制，但它至少比直接赋值来得“深”一些，它创建了一个新的对象。另外，你也可以通过以下比较 tricky 的方法来完成单层嵌套的深复制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [&#123;<span class=\"attr\">f</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">f</span>:<span class=\"number\">5</span>&#125;, &#123;<span class=\"attr\">f</span>:<span class=\"number\">10</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = _.map(a, _.clone);       <span class=\"comment\">// &lt;----</span></span><br><span class=\"line\">b[<span class=\"number\">1</span>].f = <span class=\"number\">55</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(a));  <span class=\"comment\">// [&#123;\"f\":1&#125;,&#123;\"f\":5&#125;,&#123;\"f\":10&#125;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"jQuery-——-clone-extend\"><a href=\"#jQuery-——-clone-extend\" class=\"headerlink\" title=\"jQuery —— $.clone() / $.extend()\"></a>jQuery —— $.clone() / $.extend()</h3><p>在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。这不是这篇文章的重点，所以感兴趣的同学可以参考jQuery的文档。与 Underscore 类似，我们也是可以通过 $.extend() 方法来完成深复制。值得庆幸的是，我们在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, …)就可以实现深复制啦，参考下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = $.extend(&#123;&#125;, x),          <span class=\"comment\">//shallow copy</span></span><br><span class=\"line\">    z = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, x);    <span class=\"comment\">//deep copy</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.b.f === x.b.f       <span class=\"comment\">// true</span></span><br><span class=\"line\">z.b.f === x.b.f       <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>在 jQuery的源码 - src/core.js #L121 文件中我们可以找到$.extend()的实现，也是实现得比较简洁，而且不太依赖于 jQuery 的内置函数，稍作修改就能拿出来单独使用。</p>\n<h3 id=\"lodash-——-clone-cloneDeep\"><a href=\"#lodash-——-clone-cloneDeep\" class=\"headerlink\" title=\"lodash —— _.clone() / _.cloneDeep()\"></a>lodash —— _.clone() / _.cloneDeep()</h3><p>在lodash中关于复制的方法有两个，分别是<em>.clone()和</em>.cloneDeep()。其中<em>.clone(obj, true)等价于</em>.cloneDeep(obj)。使用上，lodash和前两者并没有太大的区别，但看了源码会发现，Underscore 的实现只有30行左右，而 jQuery 也不过60多行。可 lodash 中与深复制相关的代码却有上百行，这是什么道理呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>),</span><br><span class=\"line\">  _ = <span class=\"built_in\">require</span>(<span class=\"string\">\"lodash\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(<span class=\"number\">5</span>),</span><br><span class=\"line\">    obj = &#123; <span class=\"attr\">a</span>: arr &#125;,</span><br><span class=\"line\">    obj2;</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. jQuery</span></span><br><span class=\"line\">obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a);                            <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj2);           <span class=\"comment\">// [object Int16Array]</span></span><br><span class=\"line\">obj2.a[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);                               <span class=\"comment\">// [100, 6, 0, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处jQuery不能正确处理Int16Array的深复制！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. lodash</span></span><br><span class=\"line\">obj2 = _.cloneDeep(obj);                       </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a);                            <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr2);           <span class=\"comment\">// [object Int16Array]</span></span><br><span class=\"line\">obj2.a[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);                               <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>通过上面这个例子可以初见端倪，jQuery 无法正确深复制 JSON 对象以外的对象，而我们可以从下面这段代码片段可以看出 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对存在环的对象的处理也是非常出色的。因此相较而言，lodash 在深复制上的行为反馈比前两个库好很多，是更拥抱未来的一个第三方库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** `Object#toString` result references. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> argsTag = <span class=\"string\">'[object Arguments]'</span>,</span><br><span class=\"line\">    arrayTag = <span class=\"string\">'[object Array]'</span>,</span><br><span class=\"line\">    boolTag = <span class=\"string\">'[object Boolean]'</span>,</span><br><span class=\"line\">    dateTag = <span class=\"string\">'[object Date]'</span>,</span><br><span class=\"line\">    errorTag = <span class=\"string\">'[object Error]'</span>,</span><br><span class=\"line\">    funcTag = <span class=\"string\">'[object Function]'</span>,</span><br><span class=\"line\">    mapTag = <span class=\"string\">'[object Map]'</span>,</span><br><span class=\"line\">    numberTag = <span class=\"string\">'[object Number]'</span>,</span><br><span class=\"line\">    objectTag = <span class=\"string\">'[object Object]'</span>,</span><br><span class=\"line\">    regexpTag = <span class=\"string\">'[object RegExp]'</span>,</span><br><span class=\"line\">    setTag = <span class=\"string\">'[object Set]'</span>,</span><br><span class=\"line\">    stringTag = <span class=\"string\">'[object String]'</span>,</span><br><span class=\"line\">    weakMapTag = <span class=\"string\">'[object WeakMap]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayBufferTag = <span class=\"string\">'[object ArrayBuffer]'</span>,</span><br><span class=\"line\">    float32Tag = <span class=\"string\">'[object Float32Array]'</span>,</span><br><span class=\"line\">    float64Tag = <span class=\"string\">'[object Float64Array]'</span>,</span><br><span class=\"line\">    int8Tag = <span class=\"string\">'[object Int8Array]'</span>,</span><br><span class=\"line\">    int16Tag = <span class=\"string\">'[object Int16Array]'</span>,</span><br><span class=\"line\">    int32Tag = <span class=\"string\">'[object Int32Array]'</span>,</span><br><span class=\"line\">    uint8Tag = <span class=\"string\">'[object Uint8Array]'</span>,</span><br><span class=\"line\">    uint8ClampedTag = <span class=\"string\">'[object Uint8ClampedArray]'</span>,</span><br><span class=\"line\">    uint16Tag = <span class=\"string\">'[object Uint16Array]'</span>,</span><br><span class=\"line\">    uint32Tag = <span class=\"string\">'[object Uint32Array]'</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"借助-JSON-全局对象\"><a href=\"#借助-JSON-全局对象\" class=\"headerlink\" title=\"借助 JSON 全局对象\"></a>借助 JSON 全局对象</h2><p>相比于上面介绍的三个库的做法，针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法。然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = jsonClone(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第三方库的实现\"><a href=\"#第三方库的实现\" class=\"headerlink\" title=\"第三方库的实现\"></a>第三方库的实现</h2><h3 id=\"Underscore-——-clone\"><a href=\"#Underscore-——-clone\" class=\"headerlink\" title=\"Underscore —— _.clone()\"></a>Underscore —— _.clone()</h3><p>在 Underscore 中有这样一个方法：_.clone()，这个方法实际上是一种浅复制 (shallow-copy)，所有嵌套的对象和数组都是直接复制引用而并没有进行深复制。来看一下例子应该会更加直观：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">z</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = _.clone(x);</span><br><span class=\"line\"></span><br><span class=\"line\">y === x       <span class=\"comment\">// false</span></span><br><span class=\"line\">y.b === x.b   <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.b.z = <span class=\"number\">100</span>;</span><br><span class=\"line\">y.b.z         <span class=\"comment\">// 100</span></span><br></pre></td></tr></table></figure></p>\n<p>让我们来看一下 Underscore 的源码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a (shallow-cloned) duplicate of an object.</span></span><br><span class=\"line\">_.clone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!_.isObject(obj)) <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _.isArray(obj) ? obj.slice() : _.extend(&#123;&#125;, obj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>如果目标对象是一个数组，则直接调用数组的slice()方法，否则就是用_.extend()方法。想必大家对extend()方法不会陌生，它的作用主要是将从第二个参数开始的所有对象，按键值逐个赋给第一个对象。而在 jQuery 中也有类似的方法。关于 Underscore 中的 _.extend() 方法的实现可以参考 underscore.js #L1006。</p>\n<p>Underscore 的 clone() 不能算作深复制，但它至少比直接赋值来得“深”一些，它创建了一个新的对象。另外，你也可以通过以下比较 tricky 的方法来完成单层嵌套的深复制：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'underscore'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [&#123;<span class=\"attr\">f</span>: <span class=\"number\">1</span>&#125;, &#123;<span class=\"attr\">f</span>:<span class=\"number\">5</span>&#125;, &#123;<span class=\"attr\">f</span>:<span class=\"number\">10</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = _.map(a, _.clone);       <span class=\"comment\">// &lt;----</span></span><br><span class=\"line\">b[<span class=\"number\">1</span>].f = <span class=\"number\">55</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(a));  <span class=\"comment\">// [&#123;\"f\":1&#125;,&#123;\"f\":5&#125;,&#123;\"f\":10&#125;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"jQuery-——-clone-extend\"><a href=\"#jQuery-——-clone-extend\" class=\"headerlink\" title=\"jQuery —— $.clone() / $.extend()\"></a>jQuery —— $.clone() / $.extend()</h3><p>在 jQuery 中也有这么一个叫 $.clone() 的方法，可是它并不是用于一般的 JS 对象的深复制，而是用于 DOM 对象。这不是这篇文章的重点，所以感兴趣的同学可以参考jQuery的文档。与 Underscore 类似，我们也是可以通过 $.extend() 方法来完成深复制。值得庆幸的是，我们在 jQuery 中可以通过添加一个参数来实现递归extend。调用$.extend(true, {}, …)就可以实现深复制啦，参考下面的例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = &#123;</span><br><span class=\"line\">    a: <span class=\"number\">1</span>,</span><br><span class=\"line\">    b: &#123; <span class=\"attr\">f</span>: &#123; <span class=\"attr\">g</span>: <span class=\"number\">1</span> &#125; &#125;,</span><br><span class=\"line\">    c: [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = $.extend(&#123;&#125;, x),          <span class=\"comment\">//shallow copy</span></span><br><span class=\"line\">    z = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, x);    <span class=\"comment\">//deep copy</span></span><br><span class=\"line\"></span><br><span class=\"line\">y.b.f === x.b.f       <span class=\"comment\">// true</span></span><br><span class=\"line\">z.b.f === x.b.f       <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>在 jQuery的源码 - src/core.js #L121 文件中我们可以找到$.extend()的实现，也是实现得比较简洁，而且不太依赖于 jQuery 的内置函数，稍作修改就能拿出来单独使用。</p>\n<h3 id=\"lodash-——-clone-cloneDeep\"><a href=\"#lodash-——-clone-cloneDeep\" class=\"headerlink\" title=\"lodash —— _.clone() / _.cloneDeep()\"></a>lodash —— _.clone() / _.cloneDeep()</h3><p>在lodash中关于复制的方法有两个，分别是<em>.clone()和</em>.cloneDeep()。其中<em>.clone(obj, true)等价于</em>.cloneDeep(obj)。使用上，lodash和前两者并没有太大的区别，但看了源码会发现，Underscore 的实现只有30行左右，而 jQuery 也不过60多行。可 lodash 中与深复制相关的代码却有上百行，这是什么道理呢？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">\"jquery\"</span>),</span><br><span class=\"line\">  _ = <span class=\"built_in\">require</span>(<span class=\"string\">\"lodash\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(<span class=\"number\">5</span>),</span><br><span class=\"line\">    obj = &#123; <span class=\"attr\">a</span>: arr &#125;,</span><br><span class=\"line\">    obj2;</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. jQuery</span></span><br><span class=\"line\">obj2 = $.extend(<span class=\"literal\">true</span>, &#123;&#125;, obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a);                            <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(obj2);           <span class=\"comment\">// [object Int16Array]</span></span><br><span class=\"line\">obj2.a[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);                               <span class=\"comment\">// [100, 6, 0, 0, 0]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//此处jQuery不能正确处理Int16Array的深复制！！！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. lodash</span></span><br><span class=\"line\">obj2 = _.cloneDeep(obj);                       </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.a);                            <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.call(arr2);           <span class=\"comment\">// [object Int16Array]</span></span><br><span class=\"line\">obj2.a[<span class=\"number\">0</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);                               <span class=\"comment\">// [5, 6, 0, 0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>通过上面这个例子可以初见端倪，jQuery 无法正确深复制 JSON 对象以外的对象，而我们可以从下面这段代码片段可以看出 lodash 花了大量的代码来实现 ES6 引入的大量新的标准对象。更厉害的是，lodash 针对存在环的对象的处理也是非常出色的。因此相较而言，lodash 在深复制上的行为反馈比前两个库好很多，是更拥抱未来的一个第三方库。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** `Object#toString` result references. */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> argsTag = <span class=\"string\">'[object Arguments]'</span>,</span><br><span class=\"line\">    arrayTag = <span class=\"string\">'[object Array]'</span>,</span><br><span class=\"line\">    boolTag = <span class=\"string\">'[object Boolean]'</span>,</span><br><span class=\"line\">    dateTag = <span class=\"string\">'[object Date]'</span>,</span><br><span class=\"line\">    errorTag = <span class=\"string\">'[object Error]'</span>,</span><br><span class=\"line\">    funcTag = <span class=\"string\">'[object Function]'</span>,</span><br><span class=\"line\">    mapTag = <span class=\"string\">'[object Map]'</span>,</span><br><span class=\"line\">    numberTag = <span class=\"string\">'[object Number]'</span>,</span><br><span class=\"line\">    objectTag = <span class=\"string\">'[object Object]'</span>,</span><br><span class=\"line\">    regexpTag = <span class=\"string\">'[object RegExp]'</span>,</span><br><span class=\"line\">    setTag = <span class=\"string\">'[object Set]'</span>,</span><br><span class=\"line\">    stringTag = <span class=\"string\">'[object String]'</span>,</span><br><span class=\"line\">    weakMapTag = <span class=\"string\">'[object WeakMap]'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayBufferTag = <span class=\"string\">'[object ArrayBuffer]'</span>,</span><br><span class=\"line\">    float32Tag = <span class=\"string\">'[object Float32Array]'</span>,</span><br><span class=\"line\">    float64Tag = <span class=\"string\">'[object Float64Array]'</span>,</span><br><span class=\"line\">    int8Tag = <span class=\"string\">'[object Int8Array]'</span>,</span><br><span class=\"line\">    int16Tag = <span class=\"string\">'[object Int16Array]'</span>,</span><br><span class=\"line\">    int32Tag = <span class=\"string\">'[object Int32Array]'</span>,</span><br><span class=\"line\">    uint8Tag = <span class=\"string\">'[object Uint8Array]'</span>,</span><br><span class=\"line\">    uint8ClampedTag = <span class=\"string\">'[object Uint8ClampedArray]'</span>,</span><br><span class=\"line\">    uint16Tag = <span class=\"string\">'[object Uint16Array]'</span>,</span><br><span class=\"line\">    uint32Tag = <span class=\"string\">'[object Uint32Array]'</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"借助-JSON-全局对象\"><a href=\"#借助-JSON-全局对象\" class=\"headerlink\" title=\"借助 JSON 全局对象\"></a>借助 JSON 全局对象</h2><p>相比于上面介绍的三个库的做法，针对纯 JSON 数据对象的深复制，使用 JSON 全局对象的 parse 和 stringify 方法来实现深复制也算是一个简单讨巧的方法。然而使用这种方法会有一些隐藏的坑，它能正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> clone = jsonClone(&#123; <span class=\"attr\">a</span>:<span class=\"number\">1</span> &#125;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Docker上安装的postgres的备份以及恢复","date":"2019-11-27T08:49:35.000Z","_content":"\n\n## 在服务器上使用docker安装postgres\n\n先安装docker，安装之后将postgres从[docker hub](https://hub.docker.com/_/postgres)包管理器pull当前到服务器\n```javascript\n    //拉取postgres版本号为10.5\n    docker pull postgres:10.5\n```\n然后使用docker安装\n```javascript\n    docker run --name postgres10 \\\n    //设置镜像名字叫做 postgres10\n    -e POSTGRES_PASSWORD=123456 \\\n    //设置postgres服务器初始密码\n    -p 5434:5433 \\\n    //将docker内部端口5433映射绑定到服务器端口5434\n    -v /data/docker/postgres10/data/:/var/lib/postgresql/data \\\n    //将docker镜像内部文件夹/var/lib/postgresql/data映射绑定到服务器文件夹/data/docker/postgres10/data/\n    -v /data/docker/postgres10/buckup:/var/lib/postgresql/buckup \\\n    -v /data/docker/postgres10/postgresql.conf:/etc/postgresql/postgresql.conf \\\n    //将docker镜像内部文件/etc/postgresql/postgresql.conf映射绑定到服务器文件夹/data/docker/postgres10/postgresql.conf\n    //此文件需提前创建不然docker会认为其实一个文件夹\n    -d postgres:10.5 \\\n    -c 'port=5433' \\\n    //设置postgres默认端口号为5433此值可在postgresql.conf上配置\n    //同理所有config_file文件【postgresql.conf】内部可配置的值都可通过docker -c 选项进行制定\n    -c 'config_file=/etc/postgresql/postgresql.conf'\n    //指定 postgres使用的配置文件为 /etc/postgresql/postgresql.conf 即上文映射的服务器文件/data/docker/postgres10/postgresql.conf\n```\npostgresql.conf文件配置\n```javascript\n    listen_addresses = '*'\n    //监听地址，默认*为当前服务器地址\n    port = 5433\n    //postgres使用端口号默认5432\n    max_connections = 1000\n    //最大连接数\n    shared_buffers = 1024MB\n    max_wal_senders = 8\n    wal_keep_segments = 1024\n    max_worker_processes = 16\n\n    wal_level = replica\n    //置保存操作日志的具体程度级别,postgres10之后有选项三个【minimal,replica,logical】设,要设置WAL归档至少要设置为replica\n    archive_mode = on\n    //是否启用WAL归档 , 设置为on\n    archive_command ='cp  %p /var/lib/postgresql/buckup/archive/%f > /var/lib/postgresql/buckup/archive/test.log 2>&1'\n    //postgres进行系统归档时候可配置的执行脚本【将当前归档文件拷贝到/var/lib/postgresql/buckup/archive/文件夹】\n    //【%p 表示将要归档的WAL文件的包含完整路径信息的文件名，用 %f 代表不包含路径信息的WAL文件的文件名】\n    //[注] 该shell脚本的路劲为docker内部路径，非服务器文件路径\n```\nwal_level和archive_mode参数更改配置之后需要重启服务器生效\narchive_command参数不必重启服务器只需要重新获取配置即可\n\n#### 进入数据库方式\n```\n[root@dev ~]# docker exec -it postgres10 bash //进入镜像\nroot@964a3684307c:/# su postgres //换用户未postgres\npostgres@964a3684307c:/$ psql -p 5433 //进入数据库指定端口为5433\n\n进入数据库必须指定端口不然可能报错\nconnections on Unix domain socket \"/var/run/postgresql/.s.PGSQL.5432\"?\n未找到pgsql默认socket连接id\n\n```\n#### 重新加载部分配置方式\n```\n  $postgres:  SELECT pg_reload_conf();\n```\n\n此时数据库已经开启了增量备份方式，数据库的归档文件会被拷贝到服务器文件夹/data/docker/postgres10/buckup/archive即docker的postgres镜像中的/var/lib/postgresql/buckup/archive/文件夹中\n\n## 测试定点恢复\n\n想要增加备份还需要进行基础备份。\npg10之后推荐使用pg_basebackup进行基础备份\n\n```\n$ pg_basebackup -Ft -Pv -Xf -U postgres -p 5433 -D /var/lib/postgresql/buckup/pg_base_buckup\n```\n之后就可以看到服务器文件夹/data/docker/postgres10/buckup/pg_base_buckup即镜像中的/var/lib/postgresql/buckup/pg_base_buckup文件夹中可以看到基础备份的压缩文件\n\n由于WAL文件是写满16MB才会进行归档，测试阶段可能写入会非常少，可以在执行完 基础备份之后，手动进行一次WAL切换\n```\npostgres=# select pg_switch_wal();\n```\n此时已经手动归档一次，可在归档文件夹查看到相关文件\n\n首先，我们创建一张测试表：\n```\nCREATE TABLE test_restore(\n    id SERIAL PRIMARY KEY,\n    ival INT NOT NULL DEFAULT 0,\n    description TEXT,\n    created_time TIMESTAMPTZ NOT NULL DEFAULT now()\n);\n```\n初始化一些测试数据作为基础数据，如下所示：\n```\nINSERT INTO test_restore (ival) VALUES (1);\nINSERT INTO test_restore (ival) VALUES (1);\nINSERT INTO test_restore (ival) VALUES (1);\n```\n```\nselect pg_switch_wal();\n```\n下来，创建一个还原点\n```\n    select pg_create_restore_point('halfmy-1127');\n```\n接下来我们对数据做一些变更, 我们删除test_restore的所有数据：\n```\ndelete from test_restore;\n```\n然后关闭postgres服务,然后将基础备份解压到postgres的data文件夹\n【即postgres的基础文件夹】【即本文中的postgres安装文件夹】【即本文中的服务器文件夹/data/docker/postgres10/data/】【即本文中的docker镜像中的/var/lib/postgresql/data文件夹】\n```\ndocker stop postgres10\n由于此时的docker镜像已经关闭无法进入镜像进行文件夹操作所以使用镜像相对无服务器的映射文件夹\ntar -xvf /data/docker/postgres10/buckup/pg_base_buckup.base.tar -C /data/docker/postgres10/data\n```\n进入/data/docker/postgres10/data文件夹创建[recovery.conf](http://postgres.cn/docs/10/archive-recovery-settings.html)文件\n```\n    vim recovery.conf\n```\n```\n    restore_command = 'cp /var/lib/postgresql/buckup/archive/%f %p'\n    recovery_target_name = 'halfmy-1127'\n```\n然后进行重启docker的postgres镜像\n```\n    docker restart postgres\n```\n对数据库进行数据查看发先已经恢复\n到data文件夹中查看发现 recovery.conf已经变成recovery.done\n则已经完成 数据库的增量备份以及恢复过程\n如经历上述过程中发现无法解决报错等请查阅以下文档\n[如何在PostgreSQL中实现增量备份](https://blog.csdn.net/qq_32884717/article/details/78512082)\n[Postgresql备份与数据恢复](https://lihaoquan.me/2018/10/14/postgres-backup-wal.html)\n[PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复](https://yq.aliyun.com/articles/59359)\n[PostgreSQL 10.1 手册](http://postgres.cn/docs/10/)","source":"_posts/docker-postgres-backup.md","raw":"---\ntitle: Docker上安装的postgres的备份以及恢复\ndate: 2019-11-27 16:49:35\ntags:\n- docker\n- postgres\n- sql\n- 增量备份\n---\n\n\n## 在服务器上使用docker安装postgres\n\n先安装docker，安装之后将postgres从[docker hub](https://hub.docker.com/_/postgres)包管理器pull当前到服务器\n```javascript\n    //拉取postgres版本号为10.5\n    docker pull postgres:10.5\n```\n然后使用docker安装\n```javascript\n    docker run --name postgres10 \\\n    //设置镜像名字叫做 postgres10\n    -e POSTGRES_PASSWORD=123456 \\\n    //设置postgres服务器初始密码\n    -p 5434:5433 \\\n    //将docker内部端口5433映射绑定到服务器端口5434\n    -v /data/docker/postgres10/data/:/var/lib/postgresql/data \\\n    //将docker镜像内部文件夹/var/lib/postgresql/data映射绑定到服务器文件夹/data/docker/postgres10/data/\n    -v /data/docker/postgres10/buckup:/var/lib/postgresql/buckup \\\n    -v /data/docker/postgres10/postgresql.conf:/etc/postgresql/postgresql.conf \\\n    //将docker镜像内部文件/etc/postgresql/postgresql.conf映射绑定到服务器文件夹/data/docker/postgres10/postgresql.conf\n    //此文件需提前创建不然docker会认为其实一个文件夹\n    -d postgres:10.5 \\\n    -c 'port=5433' \\\n    //设置postgres默认端口号为5433此值可在postgresql.conf上配置\n    //同理所有config_file文件【postgresql.conf】内部可配置的值都可通过docker -c 选项进行制定\n    -c 'config_file=/etc/postgresql/postgresql.conf'\n    //指定 postgres使用的配置文件为 /etc/postgresql/postgresql.conf 即上文映射的服务器文件/data/docker/postgres10/postgresql.conf\n```\npostgresql.conf文件配置\n```javascript\n    listen_addresses = '*'\n    //监听地址，默认*为当前服务器地址\n    port = 5433\n    //postgres使用端口号默认5432\n    max_connections = 1000\n    //最大连接数\n    shared_buffers = 1024MB\n    max_wal_senders = 8\n    wal_keep_segments = 1024\n    max_worker_processes = 16\n\n    wal_level = replica\n    //置保存操作日志的具体程度级别,postgres10之后有选项三个【minimal,replica,logical】设,要设置WAL归档至少要设置为replica\n    archive_mode = on\n    //是否启用WAL归档 , 设置为on\n    archive_command ='cp  %p /var/lib/postgresql/buckup/archive/%f > /var/lib/postgresql/buckup/archive/test.log 2>&1'\n    //postgres进行系统归档时候可配置的执行脚本【将当前归档文件拷贝到/var/lib/postgresql/buckup/archive/文件夹】\n    //【%p 表示将要归档的WAL文件的包含完整路径信息的文件名，用 %f 代表不包含路径信息的WAL文件的文件名】\n    //[注] 该shell脚本的路劲为docker内部路径，非服务器文件路径\n```\nwal_level和archive_mode参数更改配置之后需要重启服务器生效\narchive_command参数不必重启服务器只需要重新获取配置即可\n\n#### 进入数据库方式\n```\n[root@dev ~]# docker exec -it postgres10 bash //进入镜像\nroot@964a3684307c:/# su postgres //换用户未postgres\npostgres@964a3684307c:/$ psql -p 5433 //进入数据库指定端口为5433\n\n进入数据库必须指定端口不然可能报错\nconnections on Unix domain socket \"/var/run/postgresql/.s.PGSQL.5432\"?\n未找到pgsql默认socket连接id\n\n```\n#### 重新加载部分配置方式\n```\n  $postgres:  SELECT pg_reload_conf();\n```\n\n此时数据库已经开启了增量备份方式，数据库的归档文件会被拷贝到服务器文件夹/data/docker/postgres10/buckup/archive即docker的postgres镜像中的/var/lib/postgresql/buckup/archive/文件夹中\n\n## 测试定点恢复\n\n想要增加备份还需要进行基础备份。\npg10之后推荐使用pg_basebackup进行基础备份\n\n```\n$ pg_basebackup -Ft -Pv -Xf -U postgres -p 5433 -D /var/lib/postgresql/buckup/pg_base_buckup\n```\n之后就可以看到服务器文件夹/data/docker/postgres10/buckup/pg_base_buckup即镜像中的/var/lib/postgresql/buckup/pg_base_buckup文件夹中可以看到基础备份的压缩文件\n\n由于WAL文件是写满16MB才会进行归档，测试阶段可能写入会非常少，可以在执行完 基础备份之后，手动进行一次WAL切换\n```\npostgres=# select pg_switch_wal();\n```\n此时已经手动归档一次，可在归档文件夹查看到相关文件\n\n首先，我们创建一张测试表：\n```\nCREATE TABLE test_restore(\n    id SERIAL PRIMARY KEY,\n    ival INT NOT NULL DEFAULT 0,\n    description TEXT,\n    created_time TIMESTAMPTZ NOT NULL DEFAULT now()\n);\n```\n初始化一些测试数据作为基础数据，如下所示：\n```\nINSERT INTO test_restore (ival) VALUES (1);\nINSERT INTO test_restore (ival) VALUES (1);\nINSERT INTO test_restore (ival) VALUES (1);\n```\n```\nselect pg_switch_wal();\n```\n下来，创建一个还原点\n```\n    select pg_create_restore_point('halfmy-1127');\n```\n接下来我们对数据做一些变更, 我们删除test_restore的所有数据：\n```\ndelete from test_restore;\n```\n然后关闭postgres服务,然后将基础备份解压到postgres的data文件夹\n【即postgres的基础文件夹】【即本文中的postgres安装文件夹】【即本文中的服务器文件夹/data/docker/postgres10/data/】【即本文中的docker镜像中的/var/lib/postgresql/data文件夹】\n```\ndocker stop postgres10\n由于此时的docker镜像已经关闭无法进入镜像进行文件夹操作所以使用镜像相对无服务器的映射文件夹\ntar -xvf /data/docker/postgres10/buckup/pg_base_buckup.base.tar -C /data/docker/postgres10/data\n```\n进入/data/docker/postgres10/data文件夹创建[recovery.conf](http://postgres.cn/docs/10/archive-recovery-settings.html)文件\n```\n    vim recovery.conf\n```\n```\n    restore_command = 'cp /var/lib/postgresql/buckup/archive/%f %p'\n    recovery_target_name = 'halfmy-1127'\n```\n然后进行重启docker的postgres镜像\n```\n    docker restart postgres\n```\n对数据库进行数据查看发先已经恢复\n到data文件夹中查看发现 recovery.conf已经变成recovery.done\n则已经完成 数据库的增量备份以及恢复过程\n如经历上述过程中发现无法解决报错等请查阅以下文档\n[如何在PostgreSQL中实现增量备份](https://blog.csdn.net/qq_32884717/article/details/78512082)\n[Postgresql备份与数据恢复](https://lihaoquan.me/2018/10/14/postgres-backup-wal.html)\n[PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复](https://yq.aliyun.com/articles/59359)\n[PostgreSQL 10.1 手册](http://postgres.cn/docs/10/)","slug":"docker-postgres-backup","published":1,"updated":"2019-11-27T10:17:57.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4d00044d854k3k3fv7","content":"<h2 id=\"在服务器上使用docker安装postgres\"><a href=\"#在服务器上使用docker安装postgres\" class=\"headerlink\" title=\"在服务器上使用docker安装postgres\"></a>在服务器上使用docker安装postgres</h2><p>先安装docker，安装之后将postgres从<a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"noopener\">docker hub</a>包管理器pull当前到服务器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拉取postgres版本号为10.5</span></span><br><span class=\"line\">docker pull postgres:<span class=\"number\">10.5</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用docker安装<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name postgres10 \\</span><br><span class=\"line\"><span class=\"comment\">//设置镜像名字叫做 postgres10</span></span><br><span class=\"line\">-e POSTGRES_PASSWORD=<span class=\"number\">123456</span> \\</span><br><span class=\"line\"><span class=\"comment\">//设置postgres服务器初始密码</span></span><br><span class=\"line\">-p <span class=\"number\">5434</span>:<span class=\"number\">5433</span> \\</span><br><span class=\"line\"><span class=\"comment\">//将docker内部端口5433映射绑定到服务器端口5434</span></span><br><span class=\"line\">-v /data/docker/postgres10/data/:<span class=\"regexp\">/var/</span>lib/postgresql/data \\</span><br><span class=\"line\"><span class=\"comment\">//将docker镜像内部文件夹/var/lib/postgresql/data映射绑定到服务器文件夹/data/docker/postgres10/data/</span></span><br><span class=\"line\">-v /data/docker/postgres10/buckup:<span class=\"regexp\">/var/</span>lib/postgresql/buckup \\</span><br><span class=\"line\">-v /data/docker/postgres10/postgresql.conf:<span class=\"regexp\">/etc/</span>postgresql/postgresql.conf \\</span><br><span class=\"line\"><span class=\"comment\">//将docker镜像内部文件/etc/postgresql/postgresql.conf映射绑定到服务器文件夹/data/docker/postgres10/postgresql.conf</span></span><br><span class=\"line\"><span class=\"comment\">//此文件需提前创建不然docker会认为其实一个文件夹</span></span><br><span class=\"line\">-d postgres:<span class=\"number\">10.5</span> \\</span><br><span class=\"line\">-c <span class=\"string\">'port=5433'</span> \\</span><br><span class=\"line\"><span class=\"comment\">//设置postgres默认端口号为5433此值可在postgresql.conf上配置</span></span><br><span class=\"line\"><span class=\"comment\">//同理所有config_file文件【postgresql.conf】内部可配置的值都可通过docker -c 选项进行制定</span></span><br><span class=\"line\">-c <span class=\"string\">'config_file=/etc/postgresql/postgresql.conf'</span></span><br><span class=\"line\"><span class=\"comment\">//指定 postgres使用的配置文件为 /etc/postgresql/postgresql.conf 即上文映射的服务器文件/data/docker/postgres10/postgresql.conf</span></span><br></pre></td></tr></table></figure></p>\n<p>postgresql.conf文件配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\">//监听地址，默认*为当前服务器地址</span></span><br><span class=\"line\">port = <span class=\"number\">5433</span></span><br><span class=\"line\"><span class=\"comment\">//postgres使用端口号默认5432</span></span><br><span class=\"line\">max_connections = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"comment\">//最大连接数</span></span><br><span class=\"line\">shared_buffers = <span class=\"number\">1024</span>MB</span><br><span class=\"line\">max_wal_senders = <span class=\"number\">8</span></span><br><span class=\"line\">wal_keep_segments = <span class=\"number\">1024</span></span><br><span class=\"line\">max_worker_processes = <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\">wal_level = replica</span><br><span class=\"line\"><span class=\"comment\">//置保存操作日志的具体程度级别,postgres10之后有选项三个【minimal,replica,logical】设,要设置WAL归档至少要设置为replica</span></span><br><span class=\"line\">archive_mode = on</span><br><span class=\"line\"><span class=\"comment\">//是否启用WAL归档 , 设置为on</span></span><br><span class=\"line\">archive_command =<span class=\"string\">'cp  %p /var/lib/postgresql/buckup/archive/%f &gt; /var/lib/postgresql/buckup/archive/test.log 2&gt;&amp;1'</span></span><br><span class=\"line\"><span class=\"comment\">//postgres进行系统归档时候可配置的执行脚本【将当前归档文件拷贝到/var/lib/postgresql/buckup/archive/文件夹】</span></span><br><span class=\"line\"><span class=\"comment\">//【%p 表示将要归档的WAL文件的包含完整路径信息的文件名，用 %f 代表不包含路径信息的WAL文件的文件名】</span></span><br><span class=\"line\"><span class=\"comment\">//[注] 该shell脚本的路劲为docker内部路径，非服务器文件路径</span></span><br></pre></td></tr></table></figure></p>\n<p>wal_level和archive_mode参数更改配置之后需要重启服务器生效<br>archive_command参数不必重启服务器只需要重新获取配置即可</p>\n<h4 id=\"进入数据库方式\"><a href=\"#进入数据库方式\" class=\"headerlink\" title=\"进入数据库方式\"></a>进入数据库方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dev ~]# docker exec -it postgres10 bash //进入镜像</span><br><span class=\"line\">root@964a3684307c:/# su postgres //换用户未postgres</span><br><span class=\"line\">postgres@964a3684307c:/$ psql -p 5433 //进入数据库指定端口为5433</span><br><span class=\"line\"></span><br><span class=\"line\">进入数据库必须指定端口不然可能报错</span><br><span class=\"line\">connections on Unix domain socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;?</span><br><span class=\"line\">未找到pgsql默认socket连接id</span><br></pre></td></tr></table></figure>\n<h4 id=\"重新加载部分配置方式\"><a href=\"#重新加载部分配置方式\" class=\"headerlink\" title=\"重新加载部分配置方式\"></a>重新加载部分配置方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$postgres:  SELECT pg_reload_conf();</span><br></pre></td></tr></table></figure>\n<p>此时数据库已经开启了增量备份方式，数据库的归档文件会被拷贝到服务器文件夹/data/docker/postgres10/buckup/archive即docker的postgres镜像中的/var/lib/postgresql/buckup/archive/文件夹中</p>\n<h2 id=\"测试定点恢复\"><a href=\"#测试定点恢复\" class=\"headerlink\" title=\"测试定点恢复\"></a>测试定点恢复</h2><p>想要增加备份还需要进行基础备份。<br>pg10之后推荐使用pg_basebackup进行基础备份</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pg_basebackup -Ft -Pv -Xf -U postgres -p 5433 -D /var/lib/postgresql/buckup/pg_base_buckup</span><br></pre></td></tr></table></figure>\n<p>之后就可以看到服务器文件夹/data/docker/postgres10/buckup/pg_base_buckup即镜像中的/var/lib/postgresql/buckup/pg_base_buckup文件夹中可以看到基础备份的压缩文件</p>\n<p>由于WAL文件是写满16MB才会进行归档，测试阶段可能写入会非常少，可以在执行完 基础备份之后，手动进行一次WAL切换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# select pg_switch_wal();</span><br></pre></td></tr></table></figure></p>\n<p>此时已经手动归档一次，可在归档文件夹查看到相关文件</p>\n<p>首先，我们创建一张测试表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test_restore(</span><br><span class=\"line\">    id SERIAL PRIMARY KEY,</span><br><span class=\"line\">    ival INT NOT NULL DEFAULT 0,</span><br><span class=\"line\">    description TEXT,</span><br><span class=\"line\">    created_time TIMESTAMPTZ NOT NULL DEFAULT now()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>初始化一些测试数据作为基础数据，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_switch_wal();</span><br></pre></td></tr></table></figure>\n<p>下来，创建一个还原点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_create_restore_point(&apos;halfmy-1127&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们对数据做一些变更, 我们删除test_restore的所有数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from test_restore;</span><br></pre></td></tr></table></figure></p>\n<p>然后关闭postgres服务,然后将基础备份解压到postgres的data文件夹<br>【即postgres的基础文件夹】【即本文中的postgres安装文件夹】【即本文中的服务器文件夹/data/docker/postgres10/data/】【即本文中的docker镜像中的/var/lib/postgresql/data文件夹】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgres10</span><br><span class=\"line\">由于此时的docker镜像已经关闭无法进入镜像进行文件夹操作所以使用镜像相对无服务器的映射文件夹</span><br><span class=\"line\">tar -xvf /data/docker/postgres10/buckup/pg_base_buckup.base.tar -C /data/docker/postgres10/data</span><br></pre></td></tr></table></figure></p>\n<p>进入/data/docker/postgres10/data文件夹创建<a href=\"http://postgres.cn/docs/10/archive-recovery-settings.html\" target=\"_blank\" rel=\"noopener\">recovery.conf</a>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim recovery.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restore_command = &apos;cp /var/lib/postgresql/buckup/archive/%f %p&apos;</span><br><span class=\"line\">recovery_target_name = &apos;halfmy-1127&apos;</span><br></pre></td></tr></table></figure>\n<p>然后进行重启docker的postgres镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart postgres</span><br></pre></td></tr></table></figure></p>\n<p>对数据库进行数据查看发先已经恢复<br>到data文件夹中查看发现 recovery.conf已经变成recovery.done<br>则已经完成 数据库的增量备份以及恢复过程<br>如经历上述过程中发现无法解决报错等请查阅以下文档<br><a href=\"https://blog.csdn.net/qq_32884717/article/details/78512082\" target=\"_blank\" rel=\"noopener\">如何在PostgreSQL中实现增量备份</a><br><a href=\"https://lihaoquan.me/2018/10/14/postgres-backup-wal.html\" target=\"_blank\" rel=\"noopener\">Postgresql备份与数据恢复</a><br><a href=\"https://yq.aliyun.com/articles/59359\" target=\"_blank\" rel=\"noopener\">PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复</a><br><a href=\"http://postgres.cn/docs/10/\" target=\"_blank\" rel=\"noopener\">PostgreSQL 10.1 手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在服务器上使用docker安装postgres\"><a href=\"#在服务器上使用docker安装postgres\" class=\"headerlink\" title=\"在服务器上使用docker安装postgres\"></a>在服务器上使用docker安装postgres</h2><p>先安装docker，安装之后将postgres从<a href=\"https://hub.docker.com/_/postgres\" target=\"_blank\" rel=\"noopener\">docker hub</a>包管理器pull当前到服务器<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拉取postgres版本号为10.5</span></span><br><span class=\"line\">docker pull postgres:<span class=\"number\">10.5</span></span><br></pre></td></tr></table></figure></p>\n<p>然后使用docker安装<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name postgres10 \\</span><br><span class=\"line\"><span class=\"comment\">//设置镜像名字叫做 postgres10</span></span><br><span class=\"line\">-e POSTGRES_PASSWORD=<span class=\"number\">123456</span> \\</span><br><span class=\"line\"><span class=\"comment\">//设置postgres服务器初始密码</span></span><br><span class=\"line\">-p <span class=\"number\">5434</span>:<span class=\"number\">5433</span> \\</span><br><span class=\"line\"><span class=\"comment\">//将docker内部端口5433映射绑定到服务器端口5434</span></span><br><span class=\"line\">-v /data/docker/postgres10/data/:<span class=\"regexp\">/var/</span>lib/postgresql/data \\</span><br><span class=\"line\"><span class=\"comment\">//将docker镜像内部文件夹/var/lib/postgresql/data映射绑定到服务器文件夹/data/docker/postgres10/data/</span></span><br><span class=\"line\">-v /data/docker/postgres10/buckup:<span class=\"regexp\">/var/</span>lib/postgresql/buckup \\</span><br><span class=\"line\">-v /data/docker/postgres10/postgresql.conf:<span class=\"regexp\">/etc/</span>postgresql/postgresql.conf \\</span><br><span class=\"line\"><span class=\"comment\">//将docker镜像内部文件/etc/postgresql/postgresql.conf映射绑定到服务器文件夹/data/docker/postgres10/postgresql.conf</span></span><br><span class=\"line\"><span class=\"comment\">//此文件需提前创建不然docker会认为其实一个文件夹</span></span><br><span class=\"line\">-d postgres:<span class=\"number\">10.5</span> \\</span><br><span class=\"line\">-c <span class=\"string\">'port=5433'</span> \\</span><br><span class=\"line\"><span class=\"comment\">//设置postgres默认端口号为5433此值可在postgresql.conf上配置</span></span><br><span class=\"line\"><span class=\"comment\">//同理所有config_file文件【postgresql.conf】内部可配置的值都可通过docker -c 选项进行制定</span></span><br><span class=\"line\">-c <span class=\"string\">'config_file=/etc/postgresql/postgresql.conf'</span></span><br><span class=\"line\"><span class=\"comment\">//指定 postgres使用的配置文件为 /etc/postgresql/postgresql.conf 即上文映射的服务器文件/data/docker/postgres10/postgresql.conf</span></span><br></pre></td></tr></table></figure></p>\n<p>postgresql.conf文件配置<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen_addresses = <span class=\"string\">'*'</span></span><br><span class=\"line\"><span class=\"comment\">//监听地址，默认*为当前服务器地址</span></span><br><span class=\"line\">port = <span class=\"number\">5433</span></span><br><span class=\"line\"><span class=\"comment\">//postgres使用端口号默认5432</span></span><br><span class=\"line\">max_connections = <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"comment\">//最大连接数</span></span><br><span class=\"line\">shared_buffers = <span class=\"number\">1024</span>MB</span><br><span class=\"line\">max_wal_senders = <span class=\"number\">8</span></span><br><span class=\"line\">wal_keep_segments = <span class=\"number\">1024</span></span><br><span class=\"line\">max_worker_processes = <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\">wal_level = replica</span><br><span class=\"line\"><span class=\"comment\">//置保存操作日志的具体程度级别,postgres10之后有选项三个【minimal,replica,logical】设,要设置WAL归档至少要设置为replica</span></span><br><span class=\"line\">archive_mode = on</span><br><span class=\"line\"><span class=\"comment\">//是否启用WAL归档 , 设置为on</span></span><br><span class=\"line\">archive_command =<span class=\"string\">'cp  %p /var/lib/postgresql/buckup/archive/%f &gt; /var/lib/postgresql/buckup/archive/test.log 2&gt;&amp;1'</span></span><br><span class=\"line\"><span class=\"comment\">//postgres进行系统归档时候可配置的执行脚本【将当前归档文件拷贝到/var/lib/postgresql/buckup/archive/文件夹】</span></span><br><span class=\"line\"><span class=\"comment\">//【%p 表示将要归档的WAL文件的包含完整路径信息的文件名，用 %f 代表不包含路径信息的WAL文件的文件名】</span></span><br><span class=\"line\"><span class=\"comment\">//[注] 该shell脚本的路劲为docker内部路径，非服务器文件路径</span></span><br></pre></td></tr></table></figure></p>\n<p>wal_level和archive_mode参数更改配置之后需要重启服务器生效<br>archive_command参数不必重启服务器只需要重新获取配置即可</p>\n<h4 id=\"进入数据库方式\"><a href=\"#进入数据库方式\" class=\"headerlink\" title=\"进入数据库方式\"></a>进入数据库方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@dev ~]# docker exec -it postgres10 bash //进入镜像</span><br><span class=\"line\">root@964a3684307c:/# su postgres //换用户未postgres</span><br><span class=\"line\">postgres@964a3684307c:/$ psql -p 5433 //进入数据库指定端口为5433</span><br><span class=\"line\"></span><br><span class=\"line\">进入数据库必须指定端口不然可能报错</span><br><span class=\"line\">connections on Unix domain socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;?</span><br><span class=\"line\">未找到pgsql默认socket连接id</span><br></pre></td></tr></table></figure>\n<h4 id=\"重新加载部分配置方式\"><a href=\"#重新加载部分配置方式\" class=\"headerlink\" title=\"重新加载部分配置方式\"></a>重新加载部分配置方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$postgres:  SELECT pg_reload_conf();</span><br></pre></td></tr></table></figure>\n<p>此时数据库已经开启了增量备份方式，数据库的归档文件会被拷贝到服务器文件夹/data/docker/postgres10/buckup/archive即docker的postgres镜像中的/var/lib/postgresql/buckup/archive/文件夹中</p>\n<h2 id=\"测试定点恢复\"><a href=\"#测试定点恢复\" class=\"headerlink\" title=\"测试定点恢复\"></a>测试定点恢复</h2><p>想要增加备份还需要进行基础备份。<br>pg10之后推荐使用pg_basebackup进行基础备份</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pg_basebackup -Ft -Pv -Xf -U postgres -p 5433 -D /var/lib/postgresql/buckup/pg_base_buckup</span><br></pre></td></tr></table></figure>\n<p>之后就可以看到服务器文件夹/data/docker/postgres10/buckup/pg_base_buckup即镜像中的/var/lib/postgresql/buckup/pg_base_buckup文件夹中可以看到基础备份的压缩文件</p>\n<p>由于WAL文件是写满16MB才会进行归档，测试阶段可能写入会非常少，可以在执行完 基础备份之后，手动进行一次WAL切换<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postgres=# select pg_switch_wal();</span><br></pre></td></tr></table></figure></p>\n<p>此时已经手动归档一次，可在归档文件夹查看到相关文件</p>\n<p>首先，我们创建一张测试表：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE test_restore(</span><br><span class=\"line\">    id SERIAL PRIMARY KEY,</span><br><span class=\"line\">    ival INT NOT NULL DEFAULT 0,</span><br><span class=\"line\">    description TEXT,</span><br><span class=\"line\">    created_time TIMESTAMPTZ NOT NULL DEFAULT now()</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>初始化一些测试数据作为基础数据，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br><span class=\"line\">INSERT INTO test_restore (ival) VALUES (1);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_switch_wal();</span><br></pre></td></tr></table></figure>\n<p>下来，创建一个还原点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select pg_create_restore_point(&apos;halfmy-1127&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来我们对数据做一些变更, 我们删除test_restore的所有数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from test_restore;</span><br></pre></td></tr></table></figure></p>\n<p>然后关闭postgres服务,然后将基础备份解压到postgres的data文件夹<br>【即postgres的基础文件夹】【即本文中的postgres安装文件夹】【即本文中的服务器文件夹/data/docker/postgres10/data/】【即本文中的docker镜像中的/var/lib/postgresql/data文件夹】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop postgres10</span><br><span class=\"line\">由于此时的docker镜像已经关闭无法进入镜像进行文件夹操作所以使用镜像相对无服务器的映射文件夹</span><br><span class=\"line\">tar -xvf /data/docker/postgres10/buckup/pg_base_buckup.base.tar -C /data/docker/postgres10/data</span><br></pre></td></tr></table></figure></p>\n<p>进入/data/docker/postgres10/data文件夹创建<a href=\"http://postgres.cn/docs/10/archive-recovery-settings.html\" target=\"_blank\" rel=\"noopener\">recovery.conf</a>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim recovery.conf</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">restore_command = &apos;cp /var/lib/postgresql/buckup/archive/%f %p&apos;</span><br><span class=\"line\">recovery_target_name = &apos;halfmy-1127&apos;</span><br></pre></td></tr></table></figure>\n<p>然后进行重启docker的postgres镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart postgres</span><br></pre></td></tr></table></figure></p>\n<p>对数据库进行数据查看发先已经恢复<br>到data文件夹中查看发现 recovery.conf已经变成recovery.done<br>则已经完成 数据库的增量备份以及恢复过程<br>如经历上述过程中发现无法解决报错等请查阅以下文档<br><a href=\"https://blog.csdn.net/qq_32884717/article/details/78512082\" target=\"_blank\" rel=\"noopener\">如何在PostgreSQL中实现增量备份</a><br><a href=\"https://lihaoquan.me/2018/10/14/postgres-backup-wal.html\" target=\"_blank\" rel=\"noopener\">Postgresql备份与数据恢复</a><br><a href=\"https://yq.aliyun.com/articles/59359\" target=\"_blank\" rel=\"noopener\">PostgreSQL 最佳实践 - 在线增量备份与任意时间点恢复</a><br><a href=\"http://postgres.cn/docs/10/\" target=\"_blank\" rel=\"noopener\">PostgreSQL 10.1 手册</a></p>\n"},{"title":"Hexo发布到Github","date":"2017-11-19T02:23:42.000Z","updated":"2017-11-19T02:23:42.000Z","_content":"首先在配置文件上填写：\n\n```\ndeploy:\n  type: git                                                      # 设置发布类型，如git     \n  repository: git@github.com:heyfgirl/heyfgirl.github.io.git   # 设置repository对应的链接\n  branch: master                                                 # 设置提交到的分支\n  message: Site updated at {{ now(\"YYYY-MM-DD HH:mm:ss\") }}      # 设置我们提交的信息\n```\n执行发布代码命令：\n\n```\nhexo deploy\n```\n提示 error deployer not found:git（说明没有发布工具）\n\n然后拉去发布工具\n\n```\nnpm install hexo-deployer-git --save \n```\n\n测试链接Github\n\n```\nssh -T git@github.com\n```\nPermission denied(publickey)\n提示缺少公钥\n\n本地生成公钥\n```\nssh-keygen -t rsa -C \"xxxx@xxx.com\"\n```\n\n成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。\n\n在github生成密钥，将本地公钥拷贝进去\n再先进行发布行为OK","source":"_posts/hexo-release.md","raw":"---\ntitle: Hexo发布到Github\ndate: 2017-11-19 10:23:42\nupdated: 2017-11-19 10:23:42\ntags: \n- Hexo \n- Github\n---\n首先在配置文件上填写：\n\n```\ndeploy:\n  type: git                                                      # 设置发布类型，如git     \n  repository: git@github.com:heyfgirl/heyfgirl.github.io.git   # 设置repository对应的链接\n  branch: master                                                 # 设置提交到的分支\n  message: Site updated at {{ now(\"YYYY-MM-DD HH:mm:ss\") }}      # 设置我们提交的信息\n```\n执行发布代码命令：\n\n```\nhexo deploy\n```\n提示 error deployer not found:git（说明没有发布工具）\n\n然后拉去发布工具\n\n```\nnpm install hexo-deployer-git --save \n```\n\n测试链接Github\n\n```\nssh -T git@github.com\n```\nPermission denied(publickey)\n提示缺少公钥\n\n本地生成公钥\n```\nssh-keygen -t rsa -C \"xxxx@xxx.com\"\n```\n\n成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。\n\n在github生成密钥，将本地公钥拷贝进去\n再先进行发布行为OK","slug":"hexo-release","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4f00054d85a7vxr9sf","content":"<p>首先在配置文件上填写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git                                                      # 设置发布类型，如git     </span><br><span class=\"line\">  repository: git@github.com:heyfgirl/heyfgirl.github.io.git   # 设置repository对应的链接</span><br><span class=\"line\">  branch: master                                                 # 设置提交到的分支</span><br><span class=\"line\">  message: Site updated at &#123;&#123; now(&quot;YYYY-MM-DD HH:mm:ss&quot;) &#125;&#125;      # 设置我们提交的信息</span><br></pre></td></tr></table></figure>\n<p>执行发布代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>提示 error deployer not found:git（说明没有发布工具）</p>\n<p>然后拉去发布工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>测试链接Github</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>Permission denied(publickey)<br>提示缺少公钥</p>\n<p>本地生成公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。</p>\n<p>在github生成密钥，将本地公钥拷贝进去<br>再先进行发布行为OK</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在配置文件上填写：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git                                                      # 设置发布类型，如git     </span><br><span class=\"line\">  repository: git@github.com:heyfgirl/heyfgirl.github.io.git   # 设置repository对应的链接</span><br><span class=\"line\">  branch: master                                                 # 设置提交到的分支</span><br><span class=\"line\">  message: Site updated at &#123;&#123; now(&quot;YYYY-MM-DD HH:mm:ss&quot;) &#125;&#125;      # 设置我们提交的信息</span><br></pre></td></tr></table></figure>\n<p>执行发布代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>提示 error deployer not found:git（说明没有发布工具）</p>\n<p>然后拉去发布工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>测试链接Github</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>Permission denied(publickey)<br>提示缺少公钥</p>\n<p>本地生成公钥<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。</p>\n<p>在github生成密钥，将本地公钥拷贝进去<br>再先进行发布行为OK</p>\n"},{"title":"Http通信协议","date":"2016-07-02T08:30:49.000Z","updated":"2016-07-02T08:30:49.000Z","_content":"\n### Http协议是什么\n** 协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的法定活规则，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言文档从web服务器传送到客户端的浏览器。 **\n\n### HTTP协议的特点\n\n- 支持客户端/服务器模式\n- 无状态，此处的无状态是指对事务无记忆能力，如果后续需要这些信息，那么需要重新传递获取数据。\n- 简单快速，客户端只需要发送请求方法和路径到服务端，请求方式有get,post,head,put,delete,options,trace,关于此处的解释移步此处.\n- 无连接，指每次处理只限制处理一个连接.服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n- 灵活，HTTP请求允许发送任意类型的数据。当前请求类型可以查看Content-Type\n\n### HTTP请求\n> 1.**Date头域**\n*Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。*\n> 2.**Pragma头域**\n*Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache- Control:no-cache相同。*\n> 3.**Host头域**\n*Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。*\n> 4.**Referer头域**\n*Referer 头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被 追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。*\n> 5.**Cache-Control头域 指定请求和响应遵循的缓存机制**\n*Cache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age*\n  - Public指示响应可被任何缓存区缓存。 \n  - Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 \n  - no-cache指示请求或响应消息不能缓存 \n  - no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。\n  - max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。 \n  - min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。 \n  - max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息\n> 6.**Range头域**\n*Range头域可以请求实体的一个或者多个子范围。例如:*\n  - 表示头500个字节：bytes=0-499\n  - 表示第二个500字节：bytes=500-999 \n  - 表示最后500个字节：bytes=-500 \n  - 表示500字节以后的范围：bytes=500- \n  - 第一个和最后一个字节：bytes=0-0,-1 \n  - 同时指定几个范围：bytes=500-600,601-999 \n  - 但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200 （OK）。\n> 7.**User-Agent头域**\n*User-Agent头域的内容包含发出请求的用户信息。HTTP- Version表示支持的HTTP版本，例如为HTTP/1.1。Status- Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自 动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。*\n\n### HTTP响应\n> 响应消息行：包含协议/版本，响应状态码，对响应状态码的描述（一切正常）\n> 响应消息头：服务器与客户端通信的暗码，告诉客户端该怎么执行某些操作\n> 响应消息正文：和网页右键“查看源码”看到的内容一样\n1.**状态行（HTTP/1.1 200 OK）**\n- 协议版本号。\n- 状态代码：状态代码由3位数字组成，表示请求是否被理解或被满足。\n  - 200   OK    客户端请求成功\n  - 400   Bad Request   由于客户端请求有语法错误，不能被服务器所理解。\n  - 301   （302）   重定向—要完成请求必须进行更进一步的操作。\n  - 304   缓存\n  - 401   Unauthonzed   请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用\n  - 403   Forbidden   服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因()\n  - 404   Not Found   请求的资源不存在，例如，输入了错误的URL。\n  - 500   Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n  - 503   Service Unavailable   服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。\n- 状态描述：状态描述给出了关于状态代码的简短的文字描述。\n2.**响应头**\nLocation：响应报头域用于重定向接受者到一个新的位置。\nServer： 响应报头域包含了服务器用来处理请求的软件信息。0\n","source":"_posts/http_web_server.md","raw":"---\ntitle: Http通信协议\ndate: 2016-07-02 16:30:49\nupdated: 2016-07-02 16:30:49\ntags: \n- Http \n- web\n---\n\n### Http协议是什么\n** 协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的法定活规则，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言文档从web服务器传送到客户端的浏览器。 **\n\n### HTTP协议的特点\n\n- 支持客户端/服务器模式\n- 无状态，此处的无状态是指对事务无记忆能力，如果后续需要这些信息，那么需要重新传递获取数据。\n- 简单快速，客户端只需要发送请求方法和路径到服务端，请求方式有get,post,head,put,delete,options,trace,关于此处的解释移步此处.\n- 无连接，指每次处理只限制处理一个连接.服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n- 灵活，HTTP请求允许发送任意类型的数据。当前请求类型可以查看Content-Type\n\n### HTTP请求\n> 1.**Date头域**\n*Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。*\n> 2.**Pragma头域**\n*Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache- Control:no-cache相同。*\n> 3.**Host头域**\n*Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。*\n> 4.**Referer头域**\n*Referer 头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被 追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。*\n> 5.**Cache-Control头域 指定请求和响应遵循的缓存机制**\n*Cache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age*\n  - Public指示响应可被任何缓存区缓存。 \n  - Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 \n  - no-cache指示请求或响应消息不能缓存 \n  - no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。\n  - max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。 \n  - min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。 \n  - max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息\n> 6.**Range头域**\n*Range头域可以请求实体的一个或者多个子范围。例如:*\n  - 表示头500个字节：bytes=0-499\n  - 表示第二个500字节：bytes=500-999 \n  - 表示最后500个字节：bytes=-500 \n  - 表示500字节以后的范围：bytes=500- \n  - 第一个和最后一个字节：bytes=0-0,-1 \n  - 同时指定几个范围：bytes=500-600,601-999 \n  - 但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200 （OK）。\n> 7.**User-Agent头域**\n*User-Agent头域的内容包含发出请求的用户信息。HTTP- Version表示支持的HTTP版本，例如为HTTP/1.1。Status- Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自 动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。*\n\n### HTTP响应\n> 响应消息行：包含协议/版本，响应状态码，对响应状态码的描述（一切正常）\n> 响应消息头：服务器与客户端通信的暗码，告诉客户端该怎么执行某些操作\n> 响应消息正文：和网页右键“查看源码”看到的内容一样\n1.**状态行（HTTP/1.1 200 OK）**\n- 协议版本号。\n- 状态代码：状态代码由3位数字组成，表示请求是否被理解或被满足。\n  - 200   OK    客户端请求成功\n  - 400   Bad Request   由于客户端请求有语法错误，不能被服务器所理解。\n  - 301   （302）   重定向—要完成请求必须进行更进一步的操作。\n  - 304   缓存\n  - 401   Unauthonzed   请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用\n  - 403   Forbidden   服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因()\n  - 404   Not Found   请求的资源不存在，例如，输入了错误的URL。\n  - 500   Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n  - 503   Service Unavailable   服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。\n- 状态描述：状态描述给出了关于状态代码的简短的文字描述。\n2.**响应头**\nLocation：响应报头域用于重定向接受者到一个新的位置。\nServer： 响应报头域包含了服务器用来处理请求的软件信息。0\n","slug":"http_web_server","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4g00064d85y7r1wba5","content":"<h3 id=\"Http协议是什么\"><a href=\"#Http协议是什么\" class=\"headerlink\" title=\"Http协议是什么\"></a>Http协议是什么</h3><p><strong> 协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的法定活规则，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言文档从web服务器传送到客户端的浏览器。 </strong></p>\n<h3 id=\"HTTP协议的特点\"><a href=\"#HTTP协议的特点\" class=\"headerlink\" title=\"HTTP协议的特点\"></a>HTTP协议的特点</h3><ul>\n<li>支持客户端/服务器模式</li>\n<li>无状态，此处的无状态是指对事务无记忆能力，如果后续需要这些信息，那么需要重新传递获取数据。</li>\n<li>简单快速，客户端只需要发送请求方法和路径到服务端，请求方式有get,post,head,put,delete,options,trace,关于此处的解释移步此处.</li>\n<li>无连接，指每次处理只限制处理一个连接.服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>灵活，HTTP请求允许发送任意类型的数据。当前请求类型可以查看Content-Type</li>\n</ul>\n<h3 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h3><blockquote>\n<p>1.<strong>Date头域</strong><br><em>Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</em><br>2.<strong>Pragma头域</strong><br><em>Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache- Control:no-cache相同。</em><br>3.<strong>Host头域</strong><br><em>Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</em><br>4.<strong>Referer头域</strong><br><em>Referer 头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被 追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。</em><br>5.<strong>Cache-Control头域 指定请求和响应遵循的缓存机制</strong><br><em>Cache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age</em></p>\n<ul>\n<li>Public指示响应可被任何缓存区缓存。 </li>\n<li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 </li>\n<li>no-cache指示请求或响应消息不能缓存 </li>\n<li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li>\n<li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。 </li>\n<li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。 </li>\n<li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息<br>6.<strong>Range头域</strong><br><em>Range头域可以请求实体的一个或者多个子范围。例如:</em></li>\n<li>表示头500个字节：bytes=0-499</li>\n<li>表示第二个500字节：bytes=500-999 </li>\n<li>表示最后500个字节：bytes=-500 </li>\n<li>表示500字节以后的范围：bytes=500- </li>\n<li>第一个和最后一个字节：bytes=0-0,-1 </li>\n<li>同时指定几个范围：bytes=500-600,601-999 </li>\n<li>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200 （OK）。<br>7.<strong>User-Agent头域</strong><br><em>User-Agent头域的内容包含发出请求的用户信息。HTTP- Version表示支持的HTTP版本，例如为HTTP/1.1。Status- Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自 动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</em></li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP响应\"><a href=\"#HTTP响应\" class=\"headerlink\" title=\"HTTP响应\"></a>HTTP响应</h3><blockquote>\n<p>响应消息行：包含协议/版本，响应状态码，对响应状态码的描述（一切正常）<br>响应消息头：服务器与客户端通信的暗码，告诉客户端该怎么执行某些操作<br>响应消息正文：和网页右键“查看源码”看到的内容一样<br>1.<strong>状态行（HTTP/1.1 200 OK）</strong></p>\n<ul>\n<li>协议版本号。</li>\n<li>状态代码：状态代码由3位数字组成，表示请求是否被理解或被满足。<ul>\n<li>200   OK    客户端请求成功</li>\n<li>400   Bad Request   由于客户端请求有语法错误，不能被服务器所理解。</li>\n<li>301   （302）   重定向—要完成请求必须进行更进一步的操作。</li>\n<li>304   缓存</li>\n<li>401   Unauthonzed   请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li>\n<li>403   Forbidden   服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因()</li>\n<li>404   Not Found   请求的资源不存在，例如，输入了错误的URL。</li>\n<li>500   Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>\n<li>503   Service Unavailable   服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>\n</ul>\n</li>\n<li>状态描述：状态描述给出了关于状态代码的简短的文字描述。<br>2.<strong>响应头</strong><br>Location：响应报头域用于重定向接受者到一个新的位置。<br>Server： 响应报头域包含了服务器用来处理请求的软件信息。0</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Http协议是什么\"><a href=\"#Http协议是什么\" class=\"headerlink\" title=\"Http协议是什么\"></a>Http协议是什么</h3><p><strong> 协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的法定活规则，超文本传输协议（HTTP）是一种通信协议，它允许将超文本标记语言文档从web服务器传送到客户端的浏览器。 </strong></p>\n<h3 id=\"HTTP协议的特点\"><a href=\"#HTTP协议的特点\" class=\"headerlink\" title=\"HTTP协议的特点\"></a>HTTP协议的特点</h3><ul>\n<li>支持客户端/服务器模式</li>\n<li>无状态，此处的无状态是指对事务无记忆能力，如果后续需要这些信息，那么需要重新传递获取数据。</li>\n<li>简单快速，客户端只需要发送请求方法和路径到服务端，请求方式有get,post,head,put,delete,options,trace,关于此处的解释移步此处.</li>\n<li>无连接，指每次处理只限制处理一个连接.服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li>\n<li>灵活，HTTP请求允许发送任意类型的数据。当前请求类型可以查看Content-Type</li>\n</ul>\n<h3 id=\"HTTP请求\"><a href=\"#HTTP请求\" class=\"headerlink\" title=\"HTTP请求\"></a>HTTP请求</h3><blockquote>\n<p>1.<strong>Date头域</strong><br><em>Date头域表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</em><br>2.<strong>Pragma头域</strong><br><em>Pragma头域用来包含实现特定的指令，最常用的是Pragma:no-cache。在HTTP/1.1协议中，它的含义和Cache- Control:no-cache相同。</em><br>3.<strong>Host头域</strong><br><em>Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。</em><br>4.<strong>Referer头域</strong><br><em>Referer 头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被 追踪。如果请求的uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是一个相对地址。</em><br>5.<strong>Cache-Control头域 指定请求和响应遵循的缓存机制</strong><br><em>Cache- Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置 Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、 max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no- store、no-transform、must-revalidate、proxy-revalidate、max-age</em></p>\n<ul>\n<li>Public指示响应可被任何缓存区缓存。 </li>\n<li>Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当用户的部分响应消息，此响应消息对于其他用户的请求无效。 </li>\n<li>no-cache指示请求或响应消息不能缓存 </li>\n<li>no-store用于防止重要的信息被无意的发布。在请求消息中发送将使得请求和响应消息都不使用缓存。</li>\n<li>max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。 </li>\n<li>min-fresh指示客户机可以接收响应时间小于当前时间加上指定时间的响应。 </li>\n<li>max-stale指示客户机可以接收超出超时期间的响应消息。如果指定max-stale消息的值，那么客户机可以接收超出超时期指定值之内的响应消息<br>6.<strong>Range头域</strong><br><em>Range头域可以请求实体的一个或者多个子范围。例如:</em></li>\n<li>表示头500个字节：bytes=0-499</li>\n<li>表示第二个500字节：bytes=500-999 </li>\n<li>表示最后500个字节：bytes=-500 </li>\n<li>表示500字节以后的范围：bytes=500- </li>\n<li>第一个和最后一个字节：bytes=0-0,-1 </li>\n<li>同时指定几个范围：bytes=500-600,601-999 </li>\n<li>但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206（PartialContent）返回而不是以200 （OK）。<br>7.<strong>User-Agent头域</strong><br><em>User-Agent头域的内容包含发出请求的用户信息。HTTP- Version表示支持的HTTP版本，例如为HTTP/1.1。Status- Code是一个三个数字的结果代码。Reason-Phrase给Status-Code提供一个简单的文本描述。Status-Code主要用于机器自 动识别，Reason-Phrase主要用于帮助用户理解。Status-Code的第一个数字定义响应的类别，后两个数字没有分类的作用。浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</em></li>\n</ul>\n</blockquote>\n<h3 id=\"HTTP响应\"><a href=\"#HTTP响应\" class=\"headerlink\" title=\"HTTP响应\"></a>HTTP响应</h3><blockquote>\n<p>响应消息行：包含协议/版本，响应状态码，对响应状态码的描述（一切正常）<br>响应消息头：服务器与客户端通信的暗码，告诉客户端该怎么执行某些操作<br>响应消息正文：和网页右键“查看源码”看到的内容一样<br>1.<strong>状态行（HTTP/1.1 200 OK）</strong></p>\n<ul>\n<li>协议版本号。</li>\n<li>状态代码：状态代码由3位数字组成，表示请求是否被理解或被满足。<ul>\n<li>200   OK    客户端请求成功</li>\n<li>400   Bad Request   由于客户端请求有语法错误，不能被服务器所理解。</li>\n<li>301   （302）   重定向—要完成请求必须进行更进一步的操作。</li>\n<li>304   缓存</li>\n<li>401   Unauthonzed   请求未经授权。这个状态代码必须和WWW-Authenticate报头域一起使用</li>\n<li>403   Forbidden   服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因()</li>\n<li>404   Not Found   请求的资源不存在，例如，输入了错误的URL。</li>\n<li>500   Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。</li>\n<li>503   Service Unavailable   服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。</li>\n</ul>\n</li>\n<li>状态描述：状态描述给出了关于状态代码的简短的文字描述。<br>2.<strong>响应头</strong><br>Location：响应报头域用于重定向接受者到一个新的位置。<br>Server： 响应报头域包含了服务器用来处理请求的软件信息。0</li>\n</ul>\n</blockquote>\n"},{"title":"Iptables 安装与设置","date":"2017-11-09T08:30:49.000Z","updated":"2017-11-09T08:30:49.000Z","_content":"\n## 安装\n### 先检查是否安装了iptables\n``` bash\n  $ service iptables status\n```\n### 安装iptables\n``` \n  $ yum install -y iptables \n```\n### 升级iptables\n```\n  $ yum update iptables\n```\n### 安装iptables-services\n```\n  $ yum install iptables-services\n```\n---\n  如果系统本身安装了firewalld服务，需要关闭该服务\n```\n  $ 停止firewalld服务\n  systemctl stop firewalld\n  $ 禁用firewalld服务\n  systemctl mask firewalld\n```\n---\n## 规则设置\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 允许来自于lo接口的数据包(本地访问)\n```\n  $ iptables -A INPUT -i lo -j ACCEPT\n```\n### 开放XXXX端口\n```\n  $ iptables -A INPUT -p tcp --dport XXXX -j ACCEPT\n```\n### 允许ping\n```\n  $ iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT\n```\n### 要封停一个IP，使用下面这条命令：\n```\n  $ iptables -I INPUT -s ***.***.***.*** -j DROP\n```\n### 要解封一个IP，使用下面这条命令:\n```\n  $ iptables -D INPUT -s ***.***.***.*** -j DROP\n```\n### 其他入站一律丢弃\n```\n  $ iptables -P INPUT DROP\n```\n### 所有出站一律绿灯\n```\n  $ iptables -P OUTPUT ACCEPT\n```\n### 所有转发一律丢弃\n```\n  $ iptables -P FORWARD DROP\n```\n### 如果要添加内网ip信任（接受其所有TCP请求）\n```\n  $ iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT\n```\n### 访问外网\n```\n  $ iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n```\n##  防止DDOS攻击\n### 屏蔽 SYN_RECV 的连接\n```\n  $ iptables -A FORWARD -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m limit --limit 1/sec -j ACCEPT\n```\n### 限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***\n```\n  $ iptables -A FORWARD -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n```\n### 限制ping包每秒一个，10个后重新开始\n```\n  $ iptables -A FORWARD -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT\n```\n###限制ICMP包回应请求每秒一个\n```\n  $ iptables -A FORWARD -p icmp -m icmp --icmp-type 8 -m limit --limit 1/sec -j ACCEPT\n```\n## 删除规则\n### 删除INPUT规则第三行例子\n``` bash\n  $ iptables -D INPUT 3\n```\n","source":"_posts/iptables_config.md","raw":"---\ntitle: Iptables 安装与设置\ndate: 2017-11-09 16:30:49\nupdated: 2017-11-09 16:30:49\ntags: \n- linux \n- 防火墙\n---\n\n## 安装\n### 先检查是否安装了iptables\n``` bash\n  $ service iptables status\n```\n### 安装iptables\n``` \n  $ yum install -y iptables \n```\n### 升级iptables\n```\n  $ yum update iptables\n```\n### 安装iptables-services\n```\n  $ yum install iptables-services\n```\n---\n  如果系统本身安装了firewalld服务，需要关闭该服务\n```\n  $ 停止firewalld服务\n  systemctl stop firewalld\n  $ 禁用firewalld服务\n  systemctl mask firewalld\n```\n---\n## 规则设置\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 查看现有规则\n```\n  $ iptables -L -n\n```\n### 允许来自于lo接口的数据包(本地访问)\n```\n  $ iptables -A INPUT -i lo -j ACCEPT\n```\n### 开放XXXX端口\n```\n  $ iptables -A INPUT -p tcp --dport XXXX -j ACCEPT\n```\n### 允许ping\n```\n  $ iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT\n```\n### 要封停一个IP，使用下面这条命令：\n```\n  $ iptables -I INPUT -s ***.***.***.*** -j DROP\n```\n### 要解封一个IP，使用下面这条命令:\n```\n  $ iptables -D INPUT -s ***.***.***.*** -j DROP\n```\n### 其他入站一律丢弃\n```\n  $ iptables -P INPUT DROP\n```\n### 所有出站一律绿灯\n```\n  $ iptables -P OUTPUT ACCEPT\n```\n### 所有转发一律丢弃\n```\n  $ iptables -P FORWARD DROP\n```\n### 如果要添加内网ip信任（接受其所有TCP请求）\n```\n  $ iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT\n```\n### 访问外网\n```\n  $ iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n```\n##  防止DDOS攻击\n### 屏蔽 SYN_RECV 的连接\n```\n  $ iptables -A FORWARD -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m limit --limit 1/sec -j ACCEPT\n```\n### 限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***\n```\n  $ iptables -A FORWARD -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n```\n### 限制ping包每秒一个，10个后重新开始\n```\n  $ iptables -A FORWARD -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT\n```\n###限制ICMP包回应请求每秒一个\n```\n  $ iptables -A FORWARD -p icmp -m icmp --icmp-type 8 -m limit --limit 1/sec -j ACCEPT\n```\n## 删除规则\n### 删除INPUT规则第三行例子\n``` bash\n  $ iptables -D INPUT 3\n```\n","slug":"iptables_config","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4h00084d85xcubei99","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"先检查是否安装了iptables\"><a href=\"#先检查是否安装了iptables\" class=\"headerlink\" title=\"先检查是否安装了iptables\"></a>先检查是否安装了iptables</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service iptables status</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y iptables</span><br></pre></td></tr></table></figure>\n<h3 id=\"升级iptables\"><a href=\"#升级iptables\" class=\"headerlink\" title=\"升级iptables\"></a>升级iptables</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum update iptables</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装iptables-services\"><a href=\"#安装iptables-services\" class=\"headerlink\" title=\"安装iptables-services\"></a>安装iptables-services</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install iptables-services</span><br></pre></td></tr></table></figure>\n<hr>\n<p>  如果系统本身安装了firewalld服务，需要关闭该服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 停止firewalld服务</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">$ 禁用firewalld服务</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"规则设置\"><a href=\"#规则设置\" class=\"headerlink\" title=\"规则设置\"></a>规则设置</h2><h3 id=\"查看现有规则\"><a href=\"#查看现有规则\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看现有规则-1\"><a href=\"#查看现有规则-1\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看现有规则-2\"><a href=\"#查看现有规则-2\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"允许来自于lo接口的数据包-本地访问\"><a href=\"#允许来自于lo接口的数据包-本地访问\" class=\"headerlink\" title=\"允许来自于lo接口的数据包(本地访问)\"></a>允许来自于lo接口的数据包(本地访问)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"开放XXXX端口\"><a href=\"#开放XXXX端口\" class=\"headerlink\" title=\"开放XXXX端口\"></a>开放XXXX端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p tcp --dport XXXX -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"允许ping\"><a href=\"#允许ping\" class=\"headerlink\" title=\"允许ping\"></a>允许ping</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"要封停一个IP，使用下面这条命令：\"><a href=\"#要封停一个IP，使用下面这条命令：\" class=\"headerlink\" title=\"要封停一个IP，使用下面这条命令：\"></a>要封停一个IP，使用下面这条命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"要解封一个IP，使用下面这条命令\"><a href=\"#要解封一个IP，使用下面这条命令\" class=\"headerlink\" title=\"要解封一个IP，使用下面这条命令:\"></a>要解封一个IP，使用下面这条命令:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -D INPUT -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他入站一律丢弃\"><a href=\"#其他入站一律丢弃\" class=\"headerlink\" title=\"其他入站一律丢弃\"></a>其他入站一律丢弃</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P INPUT DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"所有出站一律绿灯\"><a href=\"#所有出站一律绿灯\" class=\"headerlink\" title=\"所有出站一律绿灯\"></a>所有出站一律绿灯</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"所有转发一律丢弃\"><a href=\"#所有转发一律丢弃\" class=\"headerlink\" title=\"所有转发一律丢弃\"></a>所有转发一律丢弃</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果要添加内网ip信任（接受其所有TCP请求）\"><a href=\"#如果要添加内网ip信任（接受其所有TCP请求）\" class=\"headerlink\" title=\"如果要添加内网ip信任（接受其所有TCP请求）\"></a>如果要添加内网ip信任（接受其所有TCP请求）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问外网\"><a href=\"#访问外网\" class=\"headerlink\" title=\"访问外网\"></a>访问外网</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"防止DDOS攻击\"><a href=\"#防止DDOS攻击\" class=\"headerlink\" title=\"防止DDOS攻击\"></a>防止DDOS攻击</h2><h3 id=\"屏蔽-SYN-RECV-的连接\"><a href=\"#屏蔽-SYN-RECV-的连接\" class=\"headerlink\" title=\"屏蔽 SYN_RECV 的连接\"></a>屏蔽 SYN_RECV 的连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m limit --limit 1/sec -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制IP碎片，每秒钟只允许100个碎片，用来防止DoS\"><a href=\"#限制IP碎片，每秒钟只允许100个碎片，用来防止DoS\" class=\"headerlink\" title=\"限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***\"></a>限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制ping包每秒一个，10个后重新开始\"><a href=\"#限制ping包每秒一个，10个后重新开始\" class=\"headerlink\" title=\"限制ping包每秒一个，10个后重新开始\"></a>限制ping包每秒一个，10个后重新开始</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>###限制ICMP包回应请求每秒一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p icmp -m icmp --icmp-type 8 -m limit --limit 1/sec -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除规则\"><a href=\"#删除规则\" class=\"headerlink\" title=\"删除规则\"></a>删除规则</h2><h3 id=\"删除INPUT规则第三行例子\"><a href=\"#删除INPUT规则第三行例子\" class=\"headerlink\" title=\"删除INPUT规则第三行例子\"></a>删除INPUT规则第三行例子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -D INPUT 3</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"先检查是否安装了iptables\"><a href=\"#先检查是否安装了iptables\" class=\"headerlink\" title=\"先检查是否安装了iptables\"></a>先检查是否安装了iptables</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service iptables status</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装iptables\"><a href=\"#安装iptables\" class=\"headerlink\" title=\"安装iptables\"></a>安装iptables</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y iptables</span><br></pre></td></tr></table></figure>\n<h3 id=\"升级iptables\"><a href=\"#升级iptables\" class=\"headerlink\" title=\"升级iptables\"></a>升级iptables</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum update iptables</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装iptables-services\"><a href=\"#安装iptables-services\" class=\"headerlink\" title=\"安装iptables-services\"></a>安装iptables-services</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install iptables-services</span><br></pre></td></tr></table></figure>\n<hr>\n<p>  如果系统本身安装了firewalld服务，需要关闭该服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ 停止firewalld服务</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\">$ 禁用firewalld服务</span><br><span class=\"line\">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"规则设置\"><a href=\"#规则设置\" class=\"headerlink\" title=\"规则设置\"></a>规则设置</h2><h3 id=\"查看现有规则\"><a href=\"#查看现有规则\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看现有规则-1\"><a href=\"#查看现有规则-1\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看现有规则-2\"><a href=\"#查看现有规则-2\" class=\"headerlink\" title=\"查看现有规则\"></a>查看现有规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n<h3 id=\"允许来自于lo接口的数据包-本地访问\"><a href=\"#允许来自于lo接口的数据包-本地访问\" class=\"headerlink\" title=\"允许来自于lo接口的数据包(本地访问)\"></a>允许来自于lo接口的数据包(本地访问)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"开放XXXX端口\"><a href=\"#开放XXXX端口\" class=\"headerlink\" title=\"开放XXXX端口\"></a>开放XXXX端口</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p tcp --dport XXXX -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"允许ping\"><a href=\"#允许ping\" class=\"headerlink\" title=\"允许ping\"></a>允许ping</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"要封停一个IP，使用下面这条命令：\"><a href=\"#要封停一个IP，使用下面这条命令：\" class=\"headerlink\" title=\"要封停一个IP，使用下面这条命令：\"></a>要封停一个IP，使用下面这条命令：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"要解封一个IP，使用下面这条命令\"><a href=\"#要解封一个IP，使用下面这条命令\" class=\"headerlink\" title=\"要解封一个IP，使用下面这条命令:\"></a>要解封一个IP，使用下面这条命令:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -D INPUT -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他入站一律丢弃\"><a href=\"#其他入站一律丢弃\" class=\"headerlink\" title=\"其他入站一律丢弃\"></a>其他入站一律丢弃</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P INPUT DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"所有出站一律绿灯\"><a href=\"#所有出站一律绿灯\" class=\"headerlink\" title=\"所有出站一律绿灯\"></a>所有出站一律绿灯</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P OUTPUT ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"所有转发一律丢弃\"><a href=\"#所有转发一律丢弃\" class=\"headerlink\" title=\"所有转发一律丢弃\"></a>所有转发一律丢弃</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果要添加内网ip信任（接受其所有TCP请求）\"><a href=\"#如果要添加内网ip信任（接受其所有TCP请求）\" class=\"headerlink\" title=\"如果要添加内网ip信任（接受其所有TCP请求）\"></a>如果要添加内网ip信任（接受其所有TCP请求）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问外网\"><a href=\"#访问外网\" class=\"headerlink\" title=\"访问外网\"></a>访问外网</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h2 id=\"防止DDOS攻击\"><a href=\"#防止DDOS攻击\" class=\"headerlink\" title=\"防止DDOS攻击\"></a>防止DDOS攻击</h2><h3 id=\"屏蔽-SYN-RECV-的连接\"><a href=\"#屏蔽-SYN-RECV-的连接\" class=\"headerlink\" title=\"屏蔽 SYN_RECV 的连接\"></a>屏蔽 SYN_RECV 的连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m limit --limit 1/sec -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制IP碎片，每秒钟只允许100个碎片，用来防止DoS\"><a href=\"#限制IP碎片，每秒钟只允许100个碎片，用来防止DoS\" class=\"headerlink\" title=\"限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***\"></a>限制IP碎片，每秒钟只允许100个碎片，用来防止DoS***</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -f -m limit --limit 100/sec --limit-burst 100 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制ping包每秒一个，10个后重新开始\"><a href=\"#限制ping包每秒一个，10个后重新开始\" class=\"headerlink\" title=\"限制ping包每秒一个，10个后重新开始\"></a>限制ping包每秒一个，10个后重新开始</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p icmp -m limit --limit 1/sec --limit-burst 10 -j ACCEPT</span><br></pre></td></tr></table></figure>\n<p>###限制ICMP包回应请求每秒一个<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -A FORWARD -p icmp -m icmp --icmp-type 8 -m limit --limit 1/sec -j ACCEPT</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"删除规则\"><a href=\"#删除规则\" class=\"headerlink\" title=\"删除规则\"></a>删除规则</h2><h3 id=\"删除INPUT规则第三行例子\"><a href=\"#删除INPUT规则第三行例子\" class=\"headerlink\" title=\"删除INPUT规则第三行例子\"></a>删除INPUT规则第三行例子</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -D INPUT 3</span><br></pre></td></tr></table></figure>\n"},{"title":"Node.js 中 Buffer 的 8KB 池分配规则和固定位数字的读写","date":"2017-06-13T07:34:57.000Z","_content":"### 8KB 池分配规则 ###\n统计一下，当前版本的 Node.js （v6.0）中可以创建一个新 Buffer 类实例的 API 有：\n- new Buffer() （已不推荐使用，可能会泄露内存中潜在的敏感信息，具体例子可以看这里）\n- Buffer.alloc()\n- Buffer.allocUnsafe()（虽然也有泄露内存中敏感信息的可能，但语义上非常明确）\n- Buffer.from()\n- Buffer.concat()\n跟着代码追溯，这些 API 最后都会走进两个内部函数中的一个，来创建 Buffer 实例，这两个内部函数分别是 createBuffer() 和 allocate()：\n```javascript\n  // lib/buffer.js\n  // ...\n  Buffer.poolSize = 8 * 1024;\n  var poolSize, poolOffset, allocPool;\n  function createPool() {\n    poolSize = Buffer.poolSize;\n    allocPool = createBuffer(poolSize, true);\n    poolOffset = 0;\n  }\n  createPool();\n  function createBuffer(size, noZeroFill) {\n    flags[kNoZeroFill] = noZeroFill ? 1 : 0;\n    try {\n      const ui8 = new Uint8Array(size);\n      Object.setPrototypeOf(ui8, Buffer.prototype);\n      return ui8;\n    } finally {\n      flags[kNoZeroFill] = 0;\n    }\n  }\n  function allocate(size) {\n    if (size === 0) {\n      return createBuffer(size);\n    }\n    if (size < (Buffer.poolSize >>> 1)) {\n      if (size > (poolSize - poolOffset))\n        createPool();\n      var b = allocPool.slice(poolOffset, poolOffset + size);\n      poolOffset += size;\n      alignPool();\n      return b;\n    } else {\n      return createBuffer(size, true);\n    }\n  }\n```\n通过代码可以清楚的看到，若最后创建时，走的是 createBuffer() 函数，则不经过 8KB 池，若走 allocate() 函数，当传入的数据大小小于 Buffer.poolSize 有符号右移 1 位后的结果（相当于将该值除以 2 再向下取整，在本例中，为 4 KB），才会使用到 8KB 池（若当前池剩余空间不足，则创建一个新的，并将当前池指向新池）。\n\n那么现在让我们来看看，这些 API 都走的是哪些方法：\n```javascript\n  // lib/buffer.js\n  // ...\n  Buffer.alloc = function(size, fill, encoding) {\n    // ...\n    return createBuffer(size);\n  };\n  Buffer.allocUnsafe = function(size) {\n    assertSize(size);\n    return allocate(size);\n  };\n  Buffer.from = function(value, encodingOrOffset, length) {\n    // ...\n    if (value instanceof ArrayBuffer)\n      return fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof value === 'string')\n      return fromString(value, encodingOrOffset);\n    return fromObject(value);\n  };\n  function fromArrayBuffer(obj, byteOffset, length) {\n    byteOffset >>>= 0;\n    if (typeof length === 'undefined')\n      return binding.createFromArrayBuffer(obj, byteOffset);\n    length >>>= 0;\n    return binding.createFromArrayBuffer(obj, byteOffset, length);\n  }\n  function fromString(string, encoding) {\n    // ...\n    if (length >= (Buffer.poolSize >>> 1))\n      return binding.createFromString(string, encoding);\n    if (length > (poolSize - poolOffset))\n      createPool();\n    var actual = allocPool.write(string, poolOffset, encoding);\n    var b = allocPool.slice(poolOffset, poolOffset + actual);\n    poolOffset += actual;\n    alignPool();\n    return b;\n  }\n  Buffer.concat = function(list, length) {\n    // ...\n    var buffer = Buffer.allocUnsafe(length);\n    // ...\n    return buffer;\n  };\n```\n挺一目了然的，让我们来总结一下，当在以下情况同时都成立时，创建的新的 Buffer 类实例才会经过内部 8KB 池：\n- 通过 Buffer.allocUnsafe，Buffer.concat，Buffer.from（参数不为一个 ArrayBuffer 实例）和 new Buffer（参数不为一个 ArrayBuffer 实例）创建。\n- 传入的数据大小不为 0 。\n- 且传入数据的大小必须小于 4KB 。\n### 那些固定位数字读写 API###\n当你在阅读 Buffer 的文档时，看到诸如 Buffer#writeUInt32BE，Buffer#readUInt32BE 这样的 API 时，可能会想到 ES6 规范中的 DateView 类提供的那些方法。其实它们做的事情十分相似，Node.js 项目中甚至还有将这些 API 的底层都替换成原生的 DateView 实例来操作的 PR ，但该 PR 目前已被标记为 stalled ，具体原因大致是：\n- 没有显著的性能提升。\n- 会在实例被初始化后又增加新的属性。\n- noAssert 参数将会失效。\n先不管这个 PR ，其实，这些读写操作，若数字的精度在 32 位以下，则对应方法都是由 JavaScript 实现的，十分优雅，利用了 TypeArray 下那些类（Buffer 中使用的是 Uint8Array）的实例中的元素，在位溢出时，会抛弃溢出位的机制。以 writeUInt32LE 和 writeUInt32BE （LE 和 BE 即小端字节序和大端字节序，可以参阅这篇文章）为例，一个 32 位无符号整数需要 4 字节存储，大端字节序时，则第一个元素为直接将传入的 32 位整数无符号右移 24 位，获取到原最左的 8 位，抛弃当下左边的所有位。以此类推，第二个元素为无符号右移 16 位，第三个元素为 8 位，第四个元素无需移动（小端字节序则相反）：\n```javascript\nBuffer.prototype.writeUInt32BE = function(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset] = (value >>> 24);\n  this[offset + 1] = (value >>> 16);\n  this[offset + 2] = (value >>> 8);\n  this[offset + 3] = value;\n  return offset + 4;\n};\n```\n读操作与之对应，使用了无符号左移后腾出空位再进行 | 操作合并：\n```javascript\nBuffer.prototype.readUInt32BE = function(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert)\n    checkOffset(offset, 4, this.length);\n  return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3]);\n};\n```\n其中的 (this[offset] * 0x1000000) + 相当于 this[offset] << 24 | 。\n\n\n","source":"_posts/node-buffer-memory-allocation.md","raw":"---\ntitle: Node.js 中 Buffer 的 8KB 池分配规则和固定位数字的读写\ndate: 2017-06-13 15:34:57\ntags:\n---\n### 8KB 池分配规则 ###\n统计一下，当前版本的 Node.js （v6.0）中可以创建一个新 Buffer 类实例的 API 有：\n- new Buffer() （已不推荐使用，可能会泄露内存中潜在的敏感信息，具体例子可以看这里）\n- Buffer.alloc()\n- Buffer.allocUnsafe()（虽然也有泄露内存中敏感信息的可能，但语义上非常明确）\n- Buffer.from()\n- Buffer.concat()\n跟着代码追溯，这些 API 最后都会走进两个内部函数中的一个，来创建 Buffer 实例，这两个内部函数分别是 createBuffer() 和 allocate()：\n```javascript\n  // lib/buffer.js\n  // ...\n  Buffer.poolSize = 8 * 1024;\n  var poolSize, poolOffset, allocPool;\n  function createPool() {\n    poolSize = Buffer.poolSize;\n    allocPool = createBuffer(poolSize, true);\n    poolOffset = 0;\n  }\n  createPool();\n  function createBuffer(size, noZeroFill) {\n    flags[kNoZeroFill] = noZeroFill ? 1 : 0;\n    try {\n      const ui8 = new Uint8Array(size);\n      Object.setPrototypeOf(ui8, Buffer.prototype);\n      return ui8;\n    } finally {\n      flags[kNoZeroFill] = 0;\n    }\n  }\n  function allocate(size) {\n    if (size === 0) {\n      return createBuffer(size);\n    }\n    if (size < (Buffer.poolSize >>> 1)) {\n      if (size > (poolSize - poolOffset))\n        createPool();\n      var b = allocPool.slice(poolOffset, poolOffset + size);\n      poolOffset += size;\n      alignPool();\n      return b;\n    } else {\n      return createBuffer(size, true);\n    }\n  }\n```\n通过代码可以清楚的看到，若最后创建时，走的是 createBuffer() 函数，则不经过 8KB 池，若走 allocate() 函数，当传入的数据大小小于 Buffer.poolSize 有符号右移 1 位后的结果（相当于将该值除以 2 再向下取整，在本例中，为 4 KB），才会使用到 8KB 池（若当前池剩余空间不足，则创建一个新的，并将当前池指向新池）。\n\n那么现在让我们来看看，这些 API 都走的是哪些方法：\n```javascript\n  // lib/buffer.js\n  // ...\n  Buffer.alloc = function(size, fill, encoding) {\n    // ...\n    return createBuffer(size);\n  };\n  Buffer.allocUnsafe = function(size) {\n    assertSize(size);\n    return allocate(size);\n  };\n  Buffer.from = function(value, encodingOrOffset, length) {\n    // ...\n    if (value instanceof ArrayBuffer)\n      return fromArrayBuffer(value, encodingOrOffset, length);\n    if (typeof value === 'string')\n      return fromString(value, encodingOrOffset);\n    return fromObject(value);\n  };\n  function fromArrayBuffer(obj, byteOffset, length) {\n    byteOffset >>>= 0;\n    if (typeof length === 'undefined')\n      return binding.createFromArrayBuffer(obj, byteOffset);\n    length >>>= 0;\n    return binding.createFromArrayBuffer(obj, byteOffset, length);\n  }\n  function fromString(string, encoding) {\n    // ...\n    if (length >= (Buffer.poolSize >>> 1))\n      return binding.createFromString(string, encoding);\n    if (length > (poolSize - poolOffset))\n      createPool();\n    var actual = allocPool.write(string, poolOffset, encoding);\n    var b = allocPool.slice(poolOffset, poolOffset + actual);\n    poolOffset += actual;\n    alignPool();\n    return b;\n  }\n  Buffer.concat = function(list, length) {\n    // ...\n    var buffer = Buffer.allocUnsafe(length);\n    // ...\n    return buffer;\n  };\n```\n挺一目了然的，让我们来总结一下，当在以下情况同时都成立时，创建的新的 Buffer 类实例才会经过内部 8KB 池：\n- 通过 Buffer.allocUnsafe，Buffer.concat，Buffer.from（参数不为一个 ArrayBuffer 实例）和 new Buffer（参数不为一个 ArrayBuffer 实例）创建。\n- 传入的数据大小不为 0 。\n- 且传入数据的大小必须小于 4KB 。\n### 那些固定位数字读写 API###\n当你在阅读 Buffer 的文档时，看到诸如 Buffer#writeUInt32BE，Buffer#readUInt32BE 这样的 API 时，可能会想到 ES6 规范中的 DateView 类提供的那些方法。其实它们做的事情十分相似，Node.js 项目中甚至还有将这些 API 的底层都替换成原生的 DateView 实例来操作的 PR ，但该 PR 目前已被标记为 stalled ，具体原因大致是：\n- 没有显著的性能提升。\n- 会在实例被初始化后又增加新的属性。\n- noAssert 参数将会失效。\n先不管这个 PR ，其实，这些读写操作，若数字的精度在 32 位以下，则对应方法都是由 JavaScript 实现的，十分优雅，利用了 TypeArray 下那些类（Buffer 中使用的是 Uint8Array）的实例中的元素，在位溢出时，会抛弃溢出位的机制。以 writeUInt32LE 和 writeUInt32BE （LE 和 BE 即小端字节序和大端字节序，可以参阅这篇文章）为例，一个 32 位无符号整数需要 4 字节存储，大端字节序时，则第一个元素为直接将传入的 32 位整数无符号右移 24 位，获取到原最左的 8 位，抛弃当下左边的所有位。以此类推，第二个元素为无符号右移 16 位，第三个元素为 8 位，第四个元素无需移动（小端字节序则相反）：\n```javascript\nBuffer.prototype.writeUInt32BE = function(value, offset, noAssert) {\n  value = +value;\n  offset = offset >>> 0;\n  if (!noAssert)\n    checkInt(this, value, offset, 4, 0xffffffff, 0);\n  this[offset] = (value >>> 24);\n  this[offset + 1] = (value >>> 16);\n  this[offset + 2] = (value >>> 8);\n  this[offset + 3] = value;\n  return offset + 4;\n};\n```\n读操作与之对应，使用了无符号左移后腾出空位再进行 | 操作合并：\n```javascript\nBuffer.prototype.readUInt32BE = function(offset, noAssert) {\n  offset = offset >>> 0;\n  if (!noAssert)\n    checkOffset(offset, 4, this.length);\n  return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3]);\n};\n```\n其中的 (this[offset] * 0x1000000) + 相当于 this[offset] << 24 | 。\n\n\n","slug":"node-buffer-memory-allocation","published":1,"updated":"2019-07-05T10:52:02.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4i00094d85phvzmyvu","content":"<h3 id=\"8KB-池分配规则\"><a href=\"#8KB-池分配规则\" class=\"headerlink\" title=\"8KB 池分配规则\"></a>8KB 池分配规则</h3><p>统计一下，当前版本的 Node.js （v6.0）中可以创建一个新 Buffer 类实例的 API 有：</p>\n<ul>\n<li>new Buffer() （已不推荐使用，可能会泄露内存中潜在的敏感信息，具体例子可以看这里）</li>\n<li>Buffer.alloc()</li>\n<li>Buffer.allocUnsafe()（虽然也有泄露内存中敏感信息的可能，但语义上非常明确）</li>\n<li>Buffer.from()</li>\n<li>Buffer.concat()<br>跟着代码追溯，这些 API 最后都会走进两个内部函数中的一个，来创建 Buffer 实例，这两个内部函数分别是 createBuffer() 和 allocate()：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/buffer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Buffer.poolSize = <span class=\"number\">8</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> poolSize, poolOffset, allocPool;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPool</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  poolSize = Buffer.poolSize;</span><br><span class=\"line\">  allocPool = createBuffer(poolSize, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  poolOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createPool();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBuffer</span>(<span class=\"params\">size, noZeroFill</span>) </span>&#123;</span><br><span class=\"line\">  flags[kNoZeroFill] = noZeroFill ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ui8 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(size);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.setPrototypeOf(ui8, Buffer.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ui8;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    flags[kNoZeroFill] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allocate</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createBuffer(size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; (Buffer.poolSize &gt;&gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; (poolSize - poolOffset))</span><br><span class=\"line\">      createPool();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = allocPool.slice(poolOffset, poolOffset + size);</span><br><span class=\"line\">    poolOffset += size;</span><br><span class=\"line\">    alignPool();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createBuffer(size, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过代码可以清楚的看到，若最后创建时，走的是 createBuffer() 函数，则不经过 8KB 池，若走 allocate() 函数，当传入的数据大小小于 Buffer.poolSize 有符号右移 1 位后的结果（相当于将该值除以 2 再向下取整，在本例中，为 4 KB），才会使用到 8KB 池（若当前池剩余空间不足，则创建一个新的，并将当前池指向新池）。</p>\n<p>那么现在让我们来看看，这些 API 都走的是哪些方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/buffer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Buffer.alloc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size, fill, encoding</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> createBuffer(size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Buffer.allocUnsafe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">  assertSize(size);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allocate(size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Buffer.from = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, encodingOrOffset, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromArrayBuffer(value, encodingOrOffset, length);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromString(value, encodingOrOffset);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fromObject(value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fromArrayBuffer</span>(<span class=\"params\">obj, byteOffset, length</span>) </span>&#123;</span><br><span class=\"line\">  byteOffset &gt;&gt;&gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> length === <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.createFromArrayBuffer(obj, byteOffset);</span><br><span class=\"line\">  length &gt;&gt;&gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> binding.createFromArrayBuffer(obj, byteOffset, length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fromString</span>(<span class=\"params\">string, encoding</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt;= (Buffer.poolSize &gt;&gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.createFromString(string, encoding);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt; (poolSize - poolOffset))</span><br><span class=\"line\">    createPool();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> actual = allocPool.write(string, poolOffset, encoding);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = allocPool.slice(poolOffset, poolOffset + actual);</span><br><span class=\"line\">  poolOffset += actual;</span><br><span class=\"line\">  alignPool();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Buffer.concat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> buffer = Buffer.allocUnsafe(length);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> buffer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>挺一目了然的，让我们来总结一下，当在以下情况同时都成立时，创建的新的 Buffer 类实例才会经过内部 8KB 池：</p>\n<ul>\n<li>通过 Buffer.allocUnsafe，Buffer.concat，Buffer.from（参数不为一个 ArrayBuffer 实例）和 new Buffer（参数不为一个 ArrayBuffer 实例）创建。</li>\n<li>传入的数据大小不为 0 。</li>\n<li>且传入数据的大小必须小于 4KB 。<h3 id=\"那些固定位数字读写-API\"><a href=\"#那些固定位数字读写-API\" class=\"headerlink\" title=\"那些固定位数字读写 API\"></a>那些固定位数字读写 API</h3>当你在阅读 Buffer 的文档时，看到诸如 Buffer#writeUInt32BE，Buffer#readUInt32BE 这样的 API 时，可能会想到 ES6 规范中的 DateView 类提供的那些方法。其实它们做的事情十分相似，Node.js 项目中甚至还有将这些 API 的底层都替换成原生的 DateView 实例来操作的 PR ，但该 PR 目前已被标记为 stalled ，具体原因大致是：</li>\n<li>没有显著的性能提升。</li>\n<li>会在实例被初始化后又增加新的属性。</li>\n<li>noAssert 参数将会失效。<br>先不管这个 PR ，其实，这些读写操作，若数字的精度在 32 位以下，则对应方法都是由 JavaScript 实现的，十分优雅，利用了 TypeArray 下那些类（Buffer 中使用的是 Uint8Array）的实例中的元素，在位溢出时，会抛弃溢出位的机制。以 writeUInt32LE 和 writeUInt32BE （LE 和 BE 即小端字节序和大端字节序，可以参阅这篇文章）为例，一个 32 位无符号整数需要 4 字节存储，大端字节序时，则第一个元素为直接将传入的 32 位整数无符号右移 24 位，获取到原最左的 8 位，抛弃当下左边的所有位。以此类推，第二个元素为无符号右移 16 位，第三个元素为 8 位，第四个元素无需移动（小端字节序则相反）：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer.prototype.writeUInt32BE = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, offset, noAssert</span>) </span>&#123;</span><br><span class=\"line\">  value = +value;</span><br><span class=\"line\">  offset = offset &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!noAssert)</span><br><span class=\"line\">    checkInt(<span class=\"keyword\">this</span>, value, offset, <span class=\"number\">4</span>, <span class=\"number\">0xffffffff</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset] = (value &gt;&gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">1</span>] = (value &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">2</span>] = (value &gt;&gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">3</span>] = value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> offset + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>读操作与之对应，使用了无符号左移后腾出空位再进行 | 操作合并：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer.prototype.readUInt32BE = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">offset, noAssert</span>) </span>&#123;</span><br><span class=\"line\">  offset = offset &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!noAssert)</span><br><span class=\"line\">    checkOffset(offset, <span class=\"number\">4</span>, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>[offset] * <span class=\"number\">0x1000000</span>) +</span><br><span class=\"line\">      ((<span class=\"keyword\">this</span>[offset + <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">16</span>) |</span><br><span class=\"line\">      (<span class=\"keyword\">this</span>[offset + <span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>) |</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[offset + <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其中的 (this[offset] * 0x1000000) + 相当于 this[offset] &lt;&lt; 24 | 。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"8KB-池分配规则\"><a href=\"#8KB-池分配规则\" class=\"headerlink\" title=\"8KB 池分配规则\"></a>8KB 池分配规则</h3><p>统计一下，当前版本的 Node.js （v6.0）中可以创建一个新 Buffer 类实例的 API 有：</p>\n<ul>\n<li>new Buffer() （已不推荐使用，可能会泄露内存中潜在的敏感信息，具体例子可以看这里）</li>\n<li>Buffer.alloc()</li>\n<li>Buffer.allocUnsafe()（虽然也有泄露内存中敏感信息的可能，但语义上非常明确）</li>\n<li>Buffer.from()</li>\n<li>Buffer.concat()<br>跟着代码追溯，这些 API 最后都会走进两个内部函数中的一个，来创建 Buffer 实例，这两个内部函数分别是 createBuffer() 和 allocate()：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/buffer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Buffer.poolSize = <span class=\"number\">8</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> poolSize, poolOffset, allocPool;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPool</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  poolSize = Buffer.poolSize;</span><br><span class=\"line\">  allocPool = createBuffer(poolSize, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  poolOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">createPool();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createBuffer</span>(<span class=\"params\">size, noZeroFill</span>) </span>&#123;</span><br><span class=\"line\">  flags[kNoZeroFill] = noZeroFill ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ui8 = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(size);</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.setPrototypeOf(ui8, Buffer.prototype);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ui8;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    flags[kNoZeroFill] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">allocate</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createBuffer(size);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (size &lt; (Buffer.poolSize &gt;&gt;&gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt; (poolSize - poolOffset))</span><br><span class=\"line\">      createPool();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> b = allocPool.slice(poolOffset, poolOffset + size);</span><br><span class=\"line\">    poolOffset += size;</span><br><span class=\"line\">    alignPool();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> createBuffer(size, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过代码可以清楚的看到，若最后创建时，走的是 createBuffer() 函数，则不经过 8KB 池，若走 allocate() 函数，当传入的数据大小小于 Buffer.poolSize 有符号右移 1 位后的结果（相当于将该值除以 2 再向下取整，在本例中，为 4 KB），才会使用到 8KB 池（若当前池剩余空间不足，则创建一个新的，并将当前池指向新池）。</p>\n<p>那么现在让我们来看看，这些 API 都走的是哪些方法：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/buffer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Buffer.alloc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size, fill, encoding</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> createBuffer(size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Buffer.allocUnsafe = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">size</span>) </span>&#123;</span><br><span class=\"line\">  assertSize(size);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> allocate(size);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Buffer.from = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, encodingOrOffset, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"built_in\">ArrayBuffer</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromArrayBuffer(value, encodingOrOffset, length);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> value === <span class=\"string\">'string'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromString(value, encodingOrOffset);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fromObject(value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fromArrayBuffer</span>(<span class=\"params\">obj, byteOffset, length</span>) </span>&#123;</span><br><span class=\"line\">  byteOffset &gt;&gt;&gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> length === <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.createFromArrayBuffer(obj, byteOffset);</span><br><span class=\"line\">  length &gt;&gt;&gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> binding.createFromArrayBuffer(obj, byteOffset, length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fromString</span>(<span class=\"params\">string, encoding</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt;= (Buffer.poolSize &gt;&gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.createFromString(string, encoding);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (length &gt; (poolSize - poolOffset))</span><br><span class=\"line\">    createPool();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> actual = allocPool.write(string, poolOffset, encoding);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = allocPool.slice(poolOffset, poolOffset + actual);</span><br><span class=\"line\">  poolOffset += actual;</span><br><span class=\"line\">  alignPool();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Buffer.concat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list, length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> buffer = Buffer.allocUnsafe(length);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> buffer;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>挺一目了然的，让我们来总结一下，当在以下情况同时都成立时，创建的新的 Buffer 类实例才会经过内部 8KB 池：</p>\n<ul>\n<li>通过 Buffer.allocUnsafe，Buffer.concat，Buffer.from（参数不为一个 ArrayBuffer 实例）和 new Buffer（参数不为一个 ArrayBuffer 实例）创建。</li>\n<li>传入的数据大小不为 0 。</li>\n<li>且传入数据的大小必须小于 4KB 。<h3 id=\"那些固定位数字读写-API\"><a href=\"#那些固定位数字读写-API\" class=\"headerlink\" title=\"那些固定位数字读写 API\"></a>那些固定位数字读写 API</h3>当你在阅读 Buffer 的文档时，看到诸如 Buffer#writeUInt32BE，Buffer#readUInt32BE 这样的 API 时，可能会想到 ES6 规范中的 DateView 类提供的那些方法。其实它们做的事情十分相似，Node.js 项目中甚至还有将这些 API 的底层都替换成原生的 DateView 实例来操作的 PR ，但该 PR 目前已被标记为 stalled ，具体原因大致是：</li>\n<li>没有显著的性能提升。</li>\n<li>会在实例被初始化后又增加新的属性。</li>\n<li>noAssert 参数将会失效。<br>先不管这个 PR ，其实，这些读写操作，若数字的精度在 32 位以下，则对应方法都是由 JavaScript 实现的，十分优雅，利用了 TypeArray 下那些类（Buffer 中使用的是 Uint8Array）的实例中的元素，在位溢出时，会抛弃溢出位的机制。以 writeUInt32LE 和 writeUInt32BE （LE 和 BE 即小端字节序和大端字节序，可以参阅这篇文章）为例，一个 32 位无符号整数需要 4 字节存储，大端字节序时，则第一个元素为直接将传入的 32 位整数无符号右移 24 位，获取到原最左的 8 位，抛弃当下左边的所有位。以此类推，第二个元素为无符号右移 16 位，第三个元素为 8 位，第四个元素无需移动（小端字节序则相反）：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer.prototype.writeUInt32BE = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, offset, noAssert</span>) </span>&#123;</span><br><span class=\"line\">  value = +value;</span><br><span class=\"line\">  offset = offset &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!noAssert)</span><br><span class=\"line\">    checkInt(<span class=\"keyword\">this</span>, value, offset, <span class=\"number\">4</span>, <span class=\"number\">0xffffffff</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset] = (value &gt;&gt;&gt; <span class=\"number\">24</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">1</span>] = (value &gt;&gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">2</span>] = (value &gt;&gt;&gt; <span class=\"number\">8</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>[offset + <span class=\"number\">3</span>] = value;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> offset + <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>读操作与之对应，使用了无符号左移后腾出空位再进行 | 操作合并：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Buffer.prototype.readUInt32BE = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">offset, noAssert</span>) </span>&#123;</span><br><span class=\"line\">  offset = offset &gt;&gt;&gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!noAssert)</span><br><span class=\"line\">    checkOffset(offset, <span class=\"number\">4</span>, <span class=\"keyword\">this</span>.length);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>[offset] * <span class=\"number\">0x1000000</span>) +</span><br><span class=\"line\">      ((<span class=\"keyword\">this</span>[offset + <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">16</span>) |</span><br><span class=\"line\">      (<span class=\"keyword\">this</span>[offset + <span class=\"number\">2</span>] &lt;&lt; <span class=\"number\">8</span>) |</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[offset + <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>其中的 (this[offset] * 0x1000000) + 相当于 this[offset] &lt;&lt; 24 | 。</p>\n"},{"title":"Node.js 中高效的 timer","date":"2018-03-01T02:42:18.000Z","_content":"在 Node.js 中，许许多多的异步操作，都需要来一个兜底的超时，这时，就轮到 timer 登场了。由于需要使用它的地方是那么的多，而且都是基础的功能模块，所以，对于它性能的要求，自然是十分高的。总结来说，要求有：\n- 更快的添加操作。\n- 更快的移除操作。\n- 更快的超时触发。\n接下来就让我们跟着 Node.js 项目中的 lib/timer.js 和 lib/internal/linklist.js 来探究它具体的实现。\n\n更快的添加 / 移除操作\n说到添加和移除都十分高效的数据结构，第一个映入脑帘的，自然就是链表啦。是的，Node.js 就是使用了双向链表，来将 timer 的插入和移除操作的时间复杂度都降至 O(1) 。双向链表的具体实现便在 lib/internal/linklist.js 中：\n\n```javascript\n  // lib/internal/linklist.js\n  'use strict';\n  function init(list) {\n    list._idleNext = list;\n    list._idlePrev = list;\n  }\n  exports.init = init;\n  function peek(list) {\n    if (list._idlePrev == list) return null;\n    return list._idlePrev;\n  }\n  exports.peek = peek;\n  function shift(list) {\n    var first = list._idlePrev;\n    remove(first);\n    return first;\n  }\n  exports.shift = shift;\n  function remove(item) {\n    if (item._idleNext) {\n      item._idleNext._idlePrev = item._idlePrev;\n    }\n    if (item._idlePrev) {\n      item._idlePrev._idleNext = item._idleNext;\n    }\n    item._idleNext = null;\n    item._idlePrev = null;\n  }\n  exports.remove = remove;\n  function append(list, item) {\n    remove(item);\n    item._idleNext = list._idleNext;\n    list._idleNext._idlePrev = item;\n    item._idlePrev = list;\n    list._idleNext = item;\n  }\n  exports.append = append;\n  function isEmpty(list) {\n    return list._idleNext === list;\n  }\n  exports.isEmpty = isEmpty;\n```\n可以看到，都是些修改链表中指针的操作，都十分高效。\n\n###更快的超时触发###\n\n链表的缺点，自然是它的查找时间，对于一个无序的链表来说，查找时间需要 O(n) ，但是，只要基于一个大前提，那么我们的实现就并不需要使用到链表的查询，这也是更高效的超时触发的基础所在，那就是，对于同一延迟的 timers ，后添加的一定比先添加的晚触发。所以，源码的具体做法就是，对于同一延迟的所有 timers ，全部都维护在同一个双向链表中，后来的，就不断往链表末尾追加，并且这条链表实际上共享同一个定时器 。这个定时器会在当次超时触发时，动态计算下一次的触发时间点。所有的链表，都保存在一个对象 map 中。如此一来，既做到了定时器的复用优化，又对链表结构进行了扬长避短。\n\n让我们先以 setTimeout 为例看看具体代码，首先是插入：\n```javascript\n  // lib/timer.js\n  // ...\n  const refedLists = {};\n  const unrefedLists = {};\n  exports.setTimeout = function(callback, after) {\n    // ...\n    var timer = new Timeout(after);\n    var length = arguments.length;\n    var ontimeout = callback;\n    // ...\n    timer._onTimeout = ontimeout;\n    active(timer);\n    return timer;\n  };\n  const active = exports.active = function(item) {\n    insert(item, false);\n  };\n  function insert(item, unrefed) {\n    const msecs = item._idleTimeout;\n    if (msecs < 0 || msecs === undefined) return;\n    item._idleStart = TimerWrap.now();\n    var list = lists[msecs];\n    if (!list) {\n      // ...\n      list = new TimersList(msecs, unrefed);\n      L.init(list);\n      list._timer._list = list;\n      if (unrefed === true) list._timer.unref();\n      list._timer.start(msecs, 0);\n      lists[msecs] = list;\n      list._timer[kOnTimeout] = listOnTimeout;\n    }\n    L.append(list, item);\n    assert(!L.isEmpty(list));\n  }\n```\n即检查当前在对象 map 中，是否存在该超时时间（msecs）的双向链表，若无，则新建一条。你应该已经看出，超时触发时具体的处理逻辑，就在 listOnTimeout 函数中：\n```javascript\n  // lib/timer.js\n  // ...\n  function listOnTimeout() {\n    var list = this._list;\n    var msecs = list.msecs;\n    var now = TimerWrap.now();\n    var diff, timer;\n    while (timer = L.peek(list)) {\n      diff = now - timer._idleStart;\n      if (diff < msecs) {\n        this.start(msecs - diff, 0);\n        return;\n      }\n      L.remove(timer);\n      // ...\n      tryOnTimeout(timer, list);\n      // ...\n    }\n    this.close();\n    // ...\n  }\n```\n即不断从链表头取出封装好的包含了注册时间点和处理函数的对象，然后挨个执行，直到计算出的超时时间点已经超过当前时间点。\n\n举个图例，在时间点 10，100，400 时分别注册了三个超时时间为 1000 的 timer，在时间点 300 注册了一个超时时间为 3000 的 timer，即在时间点 500 时，对象 map 的结构即为：\n\n![](http://dn-cnode.qbox.me/Fk8xPsE6dngPmzWb3Pa8veKzZTHN)\n\n随后在时间点 1200 触发了超时事件，并在时间点 1300 执行完毕，彼时对象 map 的结构即为：\n\n![](http://dn-cnode.qbox.me/FstFzY_Ys4L8HjVJTVqF7bFPmO0_)\n\nsetInterval 和 setImmediate\nsetInterval 的实现总体和 setTimeout 很相似，区别在于对注册的回调函数进行了封装，在链表的尾部重新插入：\n```javascript\n  // lib/timer.js\n  // ...\n  function wrapper() {\n    timer._repeat(); // 执行传入的回调函数\n    if (!timer._repeat)\n      return;\n    // ...\n    timer._idleTimeout = repeat;\n    active(timer);\n  }\n```\n而 setImmediate 和 setTimeout 实现上的主要区别则在于，它会一次性将链表中注册的，都执行完：\n```javascript\n  // lib/timer.js\n  // ...\n  function processImmediate() {\n    var queue = immediateQueue;\n    var domain, immediate;\n    immediateQueue = {};\n    L.init(immediateQueue);\n    while (L.isEmpty(queue) === false) {\n      immediate = L.shift(queue);\n      // ...\n      tryOnImmediate(immediate, queue);\n      // ...\n    }\n    if (L.isEmpty(immediateQueue)) {\n      process._needImmediateCallback = false;\n    }\n  }\n```\n所以作为功能类似的 process.nextTick 和 setImmediate ，在功能层面上看，每次事件循环，它们都会将存储的回调都执行完，但 process.nextTick 中的存储的回调，会先于 setImmediate 中的执行：\n\n```javascript\n  'use strict'\n  const print = (i) => () => console.log(i)\n  process.nextTick(print(1))\n  process.nextTick(print(2))\n  setImmediate(() => {\n    print(3)()\n    setImmediate(print(6))\n    process.nextTick(print(5))\n  })\n  setImmediate(print(4))\n  console.log('hello')\n  // hello\n  // 1\n  // 2\n  // 3\n  // 4\n  // 5\n  // 6\n```\n最后\n参考：\nhttps://github.com/nodejs/node/blob/master/lib/timers.js\nhttps://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js","source":"_posts/node-highly-active-timer.md","raw":"---\ntitle: Node.js 中高效的 timer\ndate: 2018-03-01 10:42:18\ntags:\n---\n在 Node.js 中，许许多多的异步操作，都需要来一个兜底的超时，这时，就轮到 timer 登场了。由于需要使用它的地方是那么的多，而且都是基础的功能模块，所以，对于它性能的要求，自然是十分高的。总结来说，要求有：\n- 更快的添加操作。\n- 更快的移除操作。\n- 更快的超时触发。\n接下来就让我们跟着 Node.js 项目中的 lib/timer.js 和 lib/internal/linklist.js 来探究它具体的实现。\n\n更快的添加 / 移除操作\n说到添加和移除都十分高效的数据结构，第一个映入脑帘的，自然就是链表啦。是的，Node.js 就是使用了双向链表，来将 timer 的插入和移除操作的时间复杂度都降至 O(1) 。双向链表的具体实现便在 lib/internal/linklist.js 中：\n\n```javascript\n  // lib/internal/linklist.js\n  'use strict';\n  function init(list) {\n    list._idleNext = list;\n    list._idlePrev = list;\n  }\n  exports.init = init;\n  function peek(list) {\n    if (list._idlePrev == list) return null;\n    return list._idlePrev;\n  }\n  exports.peek = peek;\n  function shift(list) {\n    var first = list._idlePrev;\n    remove(first);\n    return first;\n  }\n  exports.shift = shift;\n  function remove(item) {\n    if (item._idleNext) {\n      item._idleNext._idlePrev = item._idlePrev;\n    }\n    if (item._idlePrev) {\n      item._idlePrev._idleNext = item._idleNext;\n    }\n    item._idleNext = null;\n    item._idlePrev = null;\n  }\n  exports.remove = remove;\n  function append(list, item) {\n    remove(item);\n    item._idleNext = list._idleNext;\n    list._idleNext._idlePrev = item;\n    item._idlePrev = list;\n    list._idleNext = item;\n  }\n  exports.append = append;\n  function isEmpty(list) {\n    return list._idleNext === list;\n  }\n  exports.isEmpty = isEmpty;\n```\n可以看到，都是些修改链表中指针的操作，都十分高效。\n\n###更快的超时触发###\n\n链表的缺点，自然是它的查找时间，对于一个无序的链表来说，查找时间需要 O(n) ，但是，只要基于一个大前提，那么我们的实现就并不需要使用到链表的查询，这也是更高效的超时触发的基础所在，那就是，对于同一延迟的 timers ，后添加的一定比先添加的晚触发。所以，源码的具体做法就是，对于同一延迟的所有 timers ，全部都维护在同一个双向链表中，后来的，就不断往链表末尾追加，并且这条链表实际上共享同一个定时器 。这个定时器会在当次超时触发时，动态计算下一次的触发时间点。所有的链表，都保存在一个对象 map 中。如此一来，既做到了定时器的复用优化，又对链表结构进行了扬长避短。\n\n让我们先以 setTimeout 为例看看具体代码，首先是插入：\n```javascript\n  // lib/timer.js\n  // ...\n  const refedLists = {};\n  const unrefedLists = {};\n  exports.setTimeout = function(callback, after) {\n    // ...\n    var timer = new Timeout(after);\n    var length = arguments.length;\n    var ontimeout = callback;\n    // ...\n    timer._onTimeout = ontimeout;\n    active(timer);\n    return timer;\n  };\n  const active = exports.active = function(item) {\n    insert(item, false);\n  };\n  function insert(item, unrefed) {\n    const msecs = item._idleTimeout;\n    if (msecs < 0 || msecs === undefined) return;\n    item._idleStart = TimerWrap.now();\n    var list = lists[msecs];\n    if (!list) {\n      // ...\n      list = new TimersList(msecs, unrefed);\n      L.init(list);\n      list._timer._list = list;\n      if (unrefed === true) list._timer.unref();\n      list._timer.start(msecs, 0);\n      lists[msecs] = list;\n      list._timer[kOnTimeout] = listOnTimeout;\n    }\n    L.append(list, item);\n    assert(!L.isEmpty(list));\n  }\n```\n即检查当前在对象 map 中，是否存在该超时时间（msecs）的双向链表，若无，则新建一条。你应该已经看出，超时触发时具体的处理逻辑，就在 listOnTimeout 函数中：\n```javascript\n  // lib/timer.js\n  // ...\n  function listOnTimeout() {\n    var list = this._list;\n    var msecs = list.msecs;\n    var now = TimerWrap.now();\n    var diff, timer;\n    while (timer = L.peek(list)) {\n      diff = now - timer._idleStart;\n      if (diff < msecs) {\n        this.start(msecs - diff, 0);\n        return;\n      }\n      L.remove(timer);\n      // ...\n      tryOnTimeout(timer, list);\n      // ...\n    }\n    this.close();\n    // ...\n  }\n```\n即不断从链表头取出封装好的包含了注册时间点和处理函数的对象，然后挨个执行，直到计算出的超时时间点已经超过当前时间点。\n\n举个图例，在时间点 10，100，400 时分别注册了三个超时时间为 1000 的 timer，在时间点 300 注册了一个超时时间为 3000 的 timer，即在时间点 500 时，对象 map 的结构即为：\n\n![](http://dn-cnode.qbox.me/Fk8xPsE6dngPmzWb3Pa8veKzZTHN)\n\n随后在时间点 1200 触发了超时事件，并在时间点 1300 执行完毕，彼时对象 map 的结构即为：\n\n![](http://dn-cnode.qbox.me/FstFzY_Ys4L8HjVJTVqF7bFPmO0_)\n\nsetInterval 和 setImmediate\nsetInterval 的实现总体和 setTimeout 很相似，区别在于对注册的回调函数进行了封装，在链表的尾部重新插入：\n```javascript\n  // lib/timer.js\n  // ...\n  function wrapper() {\n    timer._repeat(); // 执行传入的回调函数\n    if (!timer._repeat)\n      return;\n    // ...\n    timer._idleTimeout = repeat;\n    active(timer);\n  }\n```\n而 setImmediate 和 setTimeout 实现上的主要区别则在于，它会一次性将链表中注册的，都执行完：\n```javascript\n  // lib/timer.js\n  // ...\n  function processImmediate() {\n    var queue = immediateQueue;\n    var domain, immediate;\n    immediateQueue = {};\n    L.init(immediateQueue);\n    while (L.isEmpty(queue) === false) {\n      immediate = L.shift(queue);\n      // ...\n      tryOnImmediate(immediate, queue);\n      // ...\n    }\n    if (L.isEmpty(immediateQueue)) {\n      process._needImmediateCallback = false;\n    }\n  }\n```\n所以作为功能类似的 process.nextTick 和 setImmediate ，在功能层面上看，每次事件循环，它们都会将存储的回调都执行完，但 process.nextTick 中的存储的回调，会先于 setImmediate 中的执行：\n\n```javascript\n  'use strict'\n  const print = (i) => () => console.log(i)\n  process.nextTick(print(1))\n  process.nextTick(print(2))\n  setImmediate(() => {\n    print(3)()\n    setImmediate(print(6))\n    process.nextTick(print(5))\n  })\n  setImmediate(print(4))\n  console.log('hello')\n  // hello\n  // 1\n  // 2\n  // 3\n  // 4\n  // 5\n  // 6\n```\n最后\n参考：\nhttps://github.com/nodejs/node/blob/master/lib/timers.js\nhttps://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js","slug":"node-highly-active-timer","published":1,"updated":"2019-07-05T10:52:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4j000c4d851tglh8f3","content":"<p>在 Node.js 中，许许多多的异步操作，都需要来一个兜底的超时，这时，就轮到 timer 登场了。由于需要使用它的地方是那么的多，而且都是基础的功能模块，所以，对于它性能的要求，自然是十分高的。总结来说，要求有：</p>\n<ul>\n<li>更快的添加操作。</li>\n<li>更快的移除操作。</li>\n<li>更快的超时触发。<br>接下来就让我们跟着 Node.js 项目中的 lib/timer.js 和 lib/internal/linklist.js 来探究它具体的实现。</li>\n</ul>\n<p>更快的添加 / 移除操作<br>说到添加和移除都十分高效的数据结构，第一个映入脑帘的，自然就是链表啦。是的，Node.js 就是使用了双向链表，来将 timer 的插入和移除操作的时间复杂度都降至 O(1) 。双向链表的具体实现便在 lib/internal/linklist.js 中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/internal/linklist.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  list._idleNext = list;</span><br><span class=\"line\">  list._idlePrev = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.init = init;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list._idlePrev == list) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list._idlePrev;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.peek = peek;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shift</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> first = list._idlePrev;</span><br><span class=\"line\">  remove(first);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.shift = shift;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item._idleNext) &#123;</span><br><span class=\"line\">    item._idleNext._idlePrev = item._idlePrev;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item._idlePrev) &#123;</span><br><span class=\"line\">    item._idlePrev._idleNext = item._idleNext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  item._idleNext = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  item._idlePrev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.remove = remove;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">list, item</span>) </span>&#123;</span><br><span class=\"line\">  remove(item);</span><br><span class=\"line\">  item._idleNext = list._idleNext;</span><br><span class=\"line\">  list._idleNext._idlePrev = item;</span><br><span class=\"line\">  item._idlePrev = list;</span><br><span class=\"line\">  list._idleNext = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.append = append;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list._idleNext === list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.isEmpty = isEmpty;</span><br></pre></td></tr></table></figure>\n<p>可以看到，都是些修改链表中指针的操作，都十分高效。</p>\n<p>###更快的超时触发###</p>\n<p>链表的缺点，自然是它的查找时间，对于一个无序的链表来说，查找时间需要 O(n) ，但是，只要基于一个大前提，那么我们的实现就并不需要使用到链表的查询，这也是更高效的超时触发的基础所在，那就是，对于同一延迟的 timers ，后添加的一定比先添加的晚触发。所以，源码的具体做法就是，对于同一延迟的所有 timers ，全部都维护在同一个双向链表中，后来的，就不断往链表末尾追加，并且这条链表实际上共享同一个定时器 。这个定时器会在当次超时触发时，动态计算下一次的触发时间点。所有的链表，都保存在一个对象 map 中。如此一来，既做到了定时器的复用优化，又对链表结构进行了扬长避短。</p>\n<p>让我们先以 setTimeout 为例看看具体代码，首先是插入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> refedLists = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> unrefedLists = &#123;&#125;;</span><br><span class=\"line\">exports.setTimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, after</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timeout(after);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ontimeout = callback;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  timer._onTimeout = ontimeout;</span><br><span class=\"line\">  active(timer);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> active = exports.active = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  insert(item, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">item, unrefed</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msecs = item._idleTimeout;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msecs &lt; <span class=\"number\">0</span> || msecs === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  item._idleStart = TimerWrap.now();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = lists[msecs];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    list = <span class=\"keyword\">new</span> TimersList(msecs, unrefed);</span><br><span class=\"line\">    L.init(list);</span><br><span class=\"line\">    list._timer._list = list;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unrefed === <span class=\"literal\">true</span>) list._timer.unref();</span><br><span class=\"line\">    list._timer.start(msecs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    lists[msecs] = list;</span><br><span class=\"line\">    list._timer[kOnTimeout] = listOnTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L.append(list, item);</span><br><span class=\"line\">  assert(!L.isEmpty(list));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即检查当前在对象 map 中，是否存在该超时时间（msecs）的双向链表，若无，则新建一条。你应该已经看出，超时触发时具体的处理逻辑，就在 listOnTimeout 函数中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listOnTimeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> msecs = list.msecs;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> now = TimerWrap.now();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> diff, timer;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (timer = L.peek(list)) &#123;</span><br><span class=\"line\">    diff = now - timer._idleStart;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; msecs) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start(msecs - diff, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.remove(timer);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    tryOnTimeout(timer, list);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即不断从链表头取出封装好的包含了注册时间点和处理函数的对象，然后挨个执行，直到计算出的超时时间点已经超过当前时间点。</p>\n<p>举个图例，在时间点 10，100，400 时分别注册了三个超时时间为 1000 的 timer，在时间点 300 注册了一个超时时间为 3000 的 timer，即在时间点 500 时，对象 map 的结构即为：</p>\n<p><img src=\"http://dn-cnode.qbox.me/Fk8xPsE6dngPmzWb3Pa8veKzZTHN\" alt></p>\n<p>随后在时间点 1200 触发了超时事件，并在时间点 1300 执行完毕，彼时对象 map 的结构即为：</p>\n<p><img src=\"http://dn-cnode.qbox.me/FstFzY_Ys4L8HjVJTVqF7bFPmO0_\" alt></p>\n<p>setInterval 和 setImmediate<br>setInterval 的实现总体和 setTimeout 很相似，区别在于对注册的回调函数进行了封装，在链表的尾部重新插入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  timer._repeat(); <span class=\"comment\">// 执行传入的回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!timer._repeat)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  timer._idleTimeout = repeat;</span><br><span class=\"line\">  active(timer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而 setImmediate 和 setTimeout 实现上的主要区别则在于，它会一次性将链表中注册的，都执行完：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processImmediate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = immediateQueue;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> domain, immediate;</span><br><span class=\"line\">  immediateQueue = &#123;&#125;;</span><br><span class=\"line\">  L.init(immediateQueue);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (L.isEmpty(queue) === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    immediate = L.shift(queue);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    tryOnImmediate(immediate, queue);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (L.isEmpty(immediateQueue)) &#123;</span><br><span class=\"line\">    process._needImmediateCallback = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以作为功能类似的 process.nextTick 和 setImmediate ，在功能层面上看，每次事件循环，它们都会将存储的回调都执行完，但 process.nextTick 中的存储的回调，会先于 setImmediate 中的执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> print = <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">process.nextTick(print(<span class=\"number\">1</span>))</span><br><span class=\"line\">process.nextTick(print(<span class=\"number\">2</span>))</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  print(<span class=\"number\">3</span>)()</span><br><span class=\"line\">  setImmediate(print(<span class=\"number\">6</span>))</span><br><span class=\"line\">  process.nextTick(print(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setImmediate(print(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>最后<br>参考：<br><a href=\"https://github.com/nodejs/node/blob/master/lib/timers.js\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/blob/master/lib/timers.js</a><br><a href=\"https://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Node.js 中，许许多多的异步操作，都需要来一个兜底的超时，这时，就轮到 timer 登场了。由于需要使用它的地方是那么的多，而且都是基础的功能模块，所以，对于它性能的要求，自然是十分高的。总结来说，要求有：</p>\n<ul>\n<li>更快的添加操作。</li>\n<li>更快的移除操作。</li>\n<li>更快的超时触发。<br>接下来就让我们跟着 Node.js 项目中的 lib/timer.js 和 lib/internal/linklist.js 来探究它具体的实现。</li>\n</ul>\n<p>更快的添加 / 移除操作<br>说到添加和移除都十分高效的数据结构，第一个映入脑帘的，自然就是链表啦。是的，Node.js 就是使用了双向链表，来将 timer 的插入和移除操作的时间复杂度都降至 O(1) 。双向链表的具体实现便在 lib/internal/linklist.js 中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/internal/linklist.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  list._idleNext = list;</span><br><span class=\"line\">  list._idlePrev = list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.init = init;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">peek</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (list._idlePrev == list) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list._idlePrev;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.peek = peek;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shift</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> first = list._idlePrev;</span><br><span class=\"line\">  remove(first);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.shift = shift;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item._idleNext) &#123;</span><br><span class=\"line\">    item._idleNext._idlePrev = item._idlePrev;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item._idlePrev) &#123;</span><br><span class=\"line\">    item._idlePrev._idleNext = item._idleNext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  item._idleNext = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  item._idlePrev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.remove = remove;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">list, item</span>) </span>&#123;</span><br><span class=\"line\">  remove(item);</span><br><span class=\"line\">  item._idleNext = list._idleNext;</span><br><span class=\"line\">  list._idleNext._idlePrev = item;</span><br><span class=\"line\">  item._idlePrev = list;</span><br><span class=\"line\">  list._idleNext = item;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.append = append;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> list._idleNext === list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">exports.isEmpty = isEmpty;</span><br></pre></td></tr></table></figure>\n<p>可以看到，都是些修改链表中指针的操作，都十分高效。</p>\n<p>###更快的超时触发###</p>\n<p>链表的缺点，自然是它的查找时间，对于一个无序的链表来说，查找时间需要 O(n) ，但是，只要基于一个大前提，那么我们的实现就并不需要使用到链表的查询，这也是更高效的超时触发的基础所在，那就是，对于同一延迟的 timers ，后添加的一定比先添加的晚触发。所以，源码的具体做法就是，对于同一延迟的所有 timers ，全部都维护在同一个双向链表中，后来的，就不断往链表末尾追加，并且这条链表实际上共享同一个定时器 。这个定时器会在当次超时触发时，动态计算下一次的触发时间点。所有的链表，都保存在一个对象 map 中。如此一来，既做到了定时器的复用优化，又对链表结构进行了扬长避短。</p>\n<p>让我们先以 setTimeout 为例看看具体代码，首先是插入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> refedLists = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> unrefedLists = &#123;&#125;;</span><br><span class=\"line\">exports.setTimeout = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback, after</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"keyword\">new</span> Timeout(after);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ontimeout = callback;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  timer._onTimeout = ontimeout;</span><br><span class=\"line\">  active(timer);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> timer;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> active = exports.active = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  insert(item, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span>(<span class=\"params\">item, unrefed</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msecs = item._idleTimeout;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (msecs &lt; <span class=\"number\">0</span> || msecs === <span class=\"literal\">undefined</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  item._idleStart = TimerWrap.now();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = lists[msecs];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!list) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    list = <span class=\"keyword\">new</span> TimersList(msecs, unrefed);</span><br><span class=\"line\">    L.init(list);</span><br><span class=\"line\">    list._timer._list = list;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (unrefed === <span class=\"literal\">true</span>) list._timer.unref();</span><br><span class=\"line\">    list._timer.start(msecs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    lists[msecs] = list;</span><br><span class=\"line\">    list._timer[kOnTimeout] = listOnTimeout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  L.append(list, item);</span><br><span class=\"line\">  assert(!L.isEmpty(list));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即检查当前在对象 map 中，是否存在该超时时间（msecs）的双向链表，若无，则新建一条。你应该已经看出，超时触发时具体的处理逻辑，就在 listOnTimeout 函数中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listOnTimeout</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>._list;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> msecs = list.msecs;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> now = TimerWrap.now();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> diff, timer;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (timer = L.peek(list)) &#123;</span><br><span class=\"line\">    diff = now - timer._idleStart;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; msecs) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.start(msecs - diff, <span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L.remove(timer);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    tryOnTimeout(timer, list);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.close();</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即不断从链表头取出封装好的包含了注册时间点和处理函数的对象，然后挨个执行，直到计算出的超时时间点已经超过当前时间点。</p>\n<p>举个图例，在时间点 10，100，400 时分别注册了三个超时时间为 1000 的 timer，在时间点 300 注册了一个超时时间为 3000 的 timer，即在时间点 500 时，对象 map 的结构即为：</p>\n<p><img src=\"http://dn-cnode.qbox.me/Fk8xPsE6dngPmzWb3Pa8veKzZTHN\" alt></p>\n<p>随后在时间点 1200 触发了超时事件，并在时间点 1300 执行完毕，彼时对象 map 的结构即为：</p>\n<p><img src=\"http://dn-cnode.qbox.me/FstFzY_Ys4L8HjVJTVqF7bFPmO0_\" alt></p>\n<p>setInterval 和 setImmediate<br>setInterval 的实现总体和 setTimeout 很相似，区别在于对注册的回调函数进行了封装，在链表的尾部重新插入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">wrapper</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  timer._repeat(); <span class=\"comment\">// 执行传入的回调函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!timer._repeat)</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  timer._idleTimeout = repeat;</span><br><span class=\"line\">  active(timer);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>而 setImmediate 和 setTimeout 实现上的主要区别则在于，它会一次性将链表中注册的，都执行完：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/timer.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processImmediate</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> queue = immediateQueue;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> domain, immediate;</span><br><span class=\"line\">  immediateQueue = &#123;&#125;;</span><br><span class=\"line\">  L.init(immediateQueue);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (L.isEmpty(queue) === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    immediate = L.shift(queue);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    tryOnImmediate(immediate, queue);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (L.isEmpty(immediateQueue)) &#123;</span><br><span class=\"line\">    process._needImmediateCallback = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以作为功能类似的 process.nextTick 和 setImmediate ，在功能层面上看，每次事件循环，它们都会将存储的回调都执行完，但 process.nextTick 中的存储的回调，会先于 setImmediate 中的执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> print = <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">process.nextTick(print(<span class=\"number\">1</span>))</span><br><span class=\"line\">process.nextTick(print(<span class=\"number\">2</span>))</span><br><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  print(<span class=\"number\">3</span>)()</span><br><span class=\"line\">  setImmediate(print(<span class=\"number\">6</span>))</span><br><span class=\"line\">  process.nextTick(print(<span class=\"number\">5</span>))</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">setImmediate(print(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n<p>最后<br>参考：<br><a href=\"https://github.com/nodejs/node/blob/master/lib/timers.js\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/blob/master/lib/timers.js</a><br><a href=\"https://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js\" target=\"_blank\" rel=\"noopener\">https://github.com/nodejs/node/blob/master/lib/internal/linkedlist.js</a></p>\n"},{"title":"Node.js中Http的从请求到响应","date":"2017-07-11T08:30:49.000Z","_content":"*** Node.js 中，起一个 HTTP server 十分简单，短短数行即可：***\n``` javascript\n'use stirct'\nconst { createServer } = require('http')\ncreateServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' })\n  res.end('Hello World\\n')\n})\n.listen(3000, function () { \n  console.log('Listening on port 3000')\n})\n```\n```\n$ curl localhost:3000\nHello World\n```\n就这么简单，因为 Node.js 把许多细节都已在源码中封装好了，主要代码在 lib/_http_*.js 这些文件中，现在就让我们照着上述代码，看看从一个 HTTP 请求的到来直到响应，Node.js 都为我们在源码层做了些什么。\n##  HTTP 请求的来到\n在 Node.js 中，若要收到一个 HTTP 请求，首先需要创建一个 http.Server 类的实例，然后监听它的 request 事件。由于 HTTP 协议属于应用层，在下层的传输层通常使用的是 TCP 协议，所以 net.Server 类正是 http.Server 类的父类。具体的 HTTP 相关的部分，是通过监听 net.Server 类实例的 connection 事件封装的：\n\n```javascript\n// lib/_http_server.js\n// ...\nfunction Server(requestListener) {\n  if (!(this instanceof Server)) return new Server(requestListener);\n  net.Server.call(this, { allowHalfOpen: true });\n  if (requestListener) {\n    this.addListener('request', requestListener);\n  }\n  // ...\n  this.addListener('connection', connectionListener);\n  // ...\n}\nutil.inherits(Server, net.Server);\n```\n这时，则需要一个 HTTP parser 来解析通过 TCP 传输过来的数据：\n```javascript\n// lib/_http_server.js\nconst parsers = common.parsers;\n// ...\nfunction connectionListener(socket) {\n  // ...\n  var parser = parsers.alloc();\n  parser.reinitialize(HTTPParser.REQUEST);\n  parser.socket = socket;\n  socket.parser = parser;\n  parser.incoming = null;\n  // ...\n}\n```\n值得一提的是，parser 是从一个“池”中获取的，这个“池”使用了一种叫做 free list（wiki）的数据结构，实现很简单，个人觉得是为了尽可能的对 parser 进行重用，并避免了不断调用构造函数的消耗，且设有数量上限（http 模块中为 1000）：\n```javascript\n// lib/freelist.js\n'use strict';\nexports.FreeList = function(name, max, constructor) {\n  this.name = name;\n  this.constructor = constructor;\n  this.max = max;\n  this.list = [];\n};\nexports.FreeList.prototype.alloc = function() {\n  return this.list.length ? this.list.pop() :\n                            this.constructor.apply(this, arguments);\n};\nexports.FreeList.prototype.free = function(obj) {\n  if (this.list.length < this.max) {\n    this.list.push(obj);\n    return true;\n  }\n  return false;\n};\n```\n由于数据是从 TCP 不断推入的，所以这里的 parser 也是基于事件的，很符合 Node.js 的核心思想。使用的是 http-parser 这个库：\n```javascript\n// lib/_http_common.js\n// ...\nconst binding = process.binding('http_parser');\nconst HTTPParser = binding.HTTPParser;\nconst FreeList = require('internal/freelist').FreeList;\n// ...\nvar parsers = new FreeList('parsers', 1000, function() {\n  var parser = new HTTPParser(HTTPParser.REQUEST);\n  // ...\n  parser[kOnHeaders] = parserOnHeaders;\n  parser[kOnHeadersComplete] = parserOnHeadersComplete;\n  parser[kOnBody] = parserOnBody;\n  parser[kOnMessageComplete] = parserOnMessageComplete;\n  parser[kOnExecute] = null;\n  return parser;\n});\nexports.parsers = parsers;\n// lib/_http_server.js\n// ...\nfunction connectionListener(socket) {\n  parser.onIncoming = parserOnIncoming;\n}\n```\n所以一个完整的 HTTP 请求从接收到完全解析，会挨个经历 parser 上的如下事件监听器：\n```bash\n> parserOnHeaders：不断解析推入的请求头数据。\n> parserOnHeadersComplete：请求头解析完毕，构造 header 对象，为请求体创建 http.IncomingMessage 实例。\n> parserOnBody：不断解析推入的请求体数据。\n> parserOnExecute：请求体解析完毕，检查解析是否报错，若报错，直接触发 clientError 事件。若请求为 CONNECT 方法，或带有 Upgrade 头，则直接触发 connect 或 upgrade 事件。\n> parserOnIncoming：处理具体解析完毕的请求。\n```\n所以接下来，我们的关注点自然是 parserOnIncoming 这个监听器，正是这里完成了最终 request 事件的触发，关键步骤代码如下：\n```javascript\n// lib/_http_server.js\n// ...\nfunction connectionListener(socket) {\n  var outgoing = [];\n  var incoming = [];\n  // ...\n  function parserOnIncoming(req, shouldKeepAlive) {\n    incoming.push(req);\n    // ...\n    var res = new ServerResponse(req);\n    if (socket._httpMessage) { // 这里判断若为真，则说明 socket 正在被队列中之前的 ServerResponse 实例占用\n      outgoing.push(res);\n    } else {\n      res.assignSocket(socket);\n    }\n    res.on('finish', resOnFinish);\n    function resOnFinish() {\n      incoming.shift();\n      // ...\n      var m = outgoing.shift();\n      if (m) {\n        m.assignSocket(socket);\n      }\n    }\n    // ...\n    self.emit('request', req, res);\n  }\n}\n```\n可以看出，对于同一个 socket 发来的请求，源码中分别维护了两个队列，用于缓冲 IncomingMessage 实例和对应的 ServerResponse 实例。先来的 ServerResponse 实例先占用 socket ，监听其 finish 事件，从各自队列中释放该 ServerResponse 实例和对应的 IncomingMessage 实例。\n\n比较绕，以一个简化的图示来总结这部分逻辑：\n![](http://dn-cnode.qbox.me/FjJ05SxuHUVoW1hY6bBFA0i9kRUx)\n## 响应该 HTTP 请求 ##\n到了响应时，事情已经简单许多了，传入的 ServerResponse 已经获取到了 socket。http.ServerResponse 继承于一个内部类 http.OutgoingMessage，当我们调用 ServerResponse#writeHead 时，Node.js 为我们拼凑好了头字符串，并缓存在 ServerResponse 实例内部的 _header 属性中：\n```javascript\n// lib/_http_outgoing.js\n// ...\nOutgoingMessage.prototype._storeHeader = function(firstLine, headers) {\n  // ...\n  if (headers) {\n    var keys = Object.keys(headers);\n    var isArray = Array.isArray(headers);\n    var field, value;\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i];\n      if (isArray) {\n        field = headers[key][0];\n        value = headers[key][1];\n      } else {\n        field = key;\n        value = headers[key];\n      }\n      if (Array.isArray(value)) {\n        for (var j = 0; j < value.length; j++) {\n          storeHeader(this, state, field, value[j]);\n        }\n      } else {\n        storeHeader(this, state, field, value);\n      }\n    }\n  }\n  // ...\n  this._header = state.messageHeader + CRLF;\n}\n```\n紧接着在调用 ServerResponse#end 时，将数据拼凑在头字符串后，添加对应的尾部，推入 TCP ，具体的写入操作在内部方法 ServerResponse#_writeRaw 中：\n```javascript\n// lib/_http_outgoing.js\n// ...\nOutgoingMessage.prototype.end = function(data, encoding, callback) {\n  // ...\n  if (this.connection && data)\n    this.connection.cork();\n  var ret;\n  if (data) {\n    this.write(data, encoding);\n  }\n  if (this._hasBody && this.chunkedEncoding) {\n    ret = this._send('0\\r\\n' + this._trailer + '\\r\\n', 'binary', finish);\n  } else {\n    ret = this._send('', 'binary', finish);\n  }\n  if (this.connection && data)\n    this.connection.uncork();\n  // ...\n  return ret;\n}\nOutgoingMessage.prototype._writeRaw = function(data, encoding, callback) {\n  if (typeof encoding === 'function') {\n    callback = encoding;\n    encoding = null;\n  }\n  var connection = this.connection;\n  // ...\n  return connection.write(data, encoding, callback);\n};\n```\n** 到这，一个请求就已经通过 TCP ，发回给客户端了 **\n\n","source":"_posts/node_http_flow.md","raw":"---\ntitle: Node.js中Http的从请求到响应\ndate: 2017-07-11 16:30:49\ntags: \n- node \n- http\n---\n*** Node.js 中，起一个 HTTP server 十分简单，短短数行即可：***\n``` javascript\n'use stirct'\nconst { createServer } = require('http')\ncreateServer(function (req, res) {\n  res.writeHead(200, { 'Content-Type': 'text/plain' })\n  res.end('Hello World\\n')\n})\n.listen(3000, function () { \n  console.log('Listening on port 3000')\n})\n```\n```\n$ curl localhost:3000\nHello World\n```\n就这么简单，因为 Node.js 把许多细节都已在源码中封装好了，主要代码在 lib/_http_*.js 这些文件中，现在就让我们照着上述代码，看看从一个 HTTP 请求的到来直到响应，Node.js 都为我们在源码层做了些什么。\n##  HTTP 请求的来到\n在 Node.js 中，若要收到一个 HTTP 请求，首先需要创建一个 http.Server 类的实例，然后监听它的 request 事件。由于 HTTP 协议属于应用层，在下层的传输层通常使用的是 TCP 协议，所以 net.Server 类正是 http.Server 类的父类。具体的 HTTP 相关的部分，是通过监听 net.Server 类实例的 connection 事件封装的：\n\n```javascript\n// lib/_http_server.js\n// ...\nfunction Server(requestListener) {\n  if (!(this instanceof Server)) return new Server(requestListener);\n  net.Server.call(this, { allowHalfOpen: true });\n  if (requestListener) {\n    this.addListener('request', requestListener);\n  }\n  // ...\n  this.addListener('connection', connectionListener);\n  // ...\n}\nutil.inherits(Server, net.Server);\n```\n这时，则需要一个 HTTP parser 来解析通过 TCP 传输过来的数据：\n```javascript\n// lib/_http_server.js\nconst parsers = common.parsers;\n// ...\nfunction connectionListener(socket) {\n  // ...\n  var parser = parsers.alloc();\n  parser.reinitialize(HTTPParser.REQUEST);\n  parser.socket = socket;\n  socket.parser = parser;\n  parser.incoming = null;\n  // ...\n}\n```\n值得一提的是，parser 是从一个“池”中获取的，这个“池”使用了一种叫做 free list（wiki）的数据结构，实现很简单，个人觉得是为了尽可能的对 parser 进行重用，并避免了不断调用构造函数的消耗，且设有数量上限（http 模块中为 1000）：\n```javascript\n// lib/freelist.js\n'use strict';\nexports.FreeList = function(name, max, constructor) {\n  this.name = name;\n  this.constructor = constructor;\n  this.max = max;\n  this.list = [];\n};\nexports.FreeList.prototype.alloc = function() {\n  return this.list.length ? this.list.pop() :\n                            this.constructor.apply(this, arguments);\n};\nexports.FreeList.prototype.free = function(obj) {\n  if (this.list.length < this.max) {\n    this.list.push(obj);\n    return true;\n  }\n  return false;\n};\n```\n由于数据是从 TCP 不断推入的，所以这里的 parser 也是基于事件的，很符合 Node.js 的核心思想。使用的是 http-parser 这个库：\n```javascript\n// lib/_http_common.js\n// ...\nconst binding = process.binding('http_parser');\nconst HTTPParser = binding.HTTPParser;\nconst FreeList = require('internal/freelist').FreeList;\n// ...\nvar parsers = new FreeList('parsers', 1000, function() {\n  var parser = new HTTPParser(HTTPParser.REQUEST);\n  // ...\n  parser[kOnHeaders] = parserOnHeaders;\n  parser[kOnHeadersComplete] = parserOnHeadersComplete;\n  parser[kOnBody] = parserOnBody;\n  parser[kOnMessageComplete] = parserOnMessageComplete;\n  parser[kOnExecute] = null;\n  return parser;\n});\nexports.parsers = parsers;\n// lib/_http_server.js\n// ...\nfunction connectionListener(socket) {\n  parser.onIncoming = parserOnIncoming;\n}\n```\n所以一个完整的 HTTP 请求从接收到完全解析，会挨个经历 parser 上的如下事件监听器：\n```bash\n> parserOnHeaders：不断解析推入的请求头数据。\n> parserOnHeadersComplete：请求头解析完毕，构造 header 对象，为请求体创建 http.IncomingMessage 实例。\n> parserOnBody：不断解析推入的请求体数据。\n> parserOnExecute：请求体解析完毕，检查解析是否报错，若报错，直接触发 clientError 事件。若请求为 CONNECT 方法，或带有 Upgrade 头，则直接触发 connect 或 upgrade 事件。\n> parserOnIncoming：处理具体解析完毕的请求。\n```\n所以接下来，我们的关注点自然是 parserOnIncoming 这个监听器，正是这里完成了最终 request 事件的触发，关键步骤代码如下：\n```javascript\n// lib/_http_server.js\n// ...\nfunction connectionListener(socket) {\n  var outgoing = [];\n  var incoming = [];\n  // ...\n  function parserOnIncoming(req, shouldKeepAlive) {\n    incoming.push(req);\n    // ...\n    var res = new ServerResponse(req);\n    if (socket._httpMessage) { // 这里判断若为真，则说明 socket 正在被队列中之前的 ServerResponse 实例占用\n      outgoing.push(res);\n    } else {\n      res.assignSocket(socket);\n    }\n    res.on('finish', resOnFinish);\n    function resOnFinish() {\n      incoming.shift();\n      // ...\n      var m = outgoing.shift();\n      if (m) {\n        m.assignSocket(socket);\n      }\n    }\n    // ...\n    self.emit('request', req, res);\n  }\n}\n```\n可以看出，对于同一个 socket 发来的请求，源码中分别维护了两个队列，用于缓冲 IncomingMessage 实例和对应的 ServerResponse 实例。先来的 ServerResponse 实例先占用 socket ，监听其 finish 事件，从各自队列中释放该 ServerResponse 实例和对应的 IncomingMessage 实例。\n\n比较绕，以一个简化的图示来总结这部分逻辑：\n![](http://dn-cnode.qbox.me/FjJ05SxuHUVoW1hY6bBFA0i9kRUx)\n## 响应该 HTTP 请求 ##\n到了响应时，事情已经简单许多了，传入的 ServerResponse 已经获取到了 socket。http.ServerResponse 继承于一个内部类 http.OutgoingMessage，当我们调用 ServerResponse#writeHead 时，Node.js 为我们拼凑好了头字符串，并缓存在 ServerResponse 实例内部的 _header 属性中：\n```javascript\n// lib/_http_outgoing.js\n// ...\nOutgoingMessage.prototype._storeHeader = function(firstLine, headers) {\n  // ...\n  if (headers) {\n    var keys = Object.keys(headers);\n    var isArray = Array.isArray(headers);\n    var field, value;\n    for (var i = 0, l = keys.length; i < l; i++) {\n      var key = keys[i];\n      if (isArray) {\n        field = headers[key][0];\n        value = headers[key][1];\n      } else {\n        field = key;\n        value = headers[key];\n      }\n      if (Array.isArray(value)) {\n        for (var j = 0; j < value.length; j++) {\n          storeHeader(this, state, field, value[j]);\n        }\n      } else {\n        storeHeader(this, state, field, value);\n      }\n    }\n  }\n  // ...\n  this._header = state.messageHeader + CRLF;\n}\n```\n紧接着在调用 ServerResponse#end 时，将数据拼凑在头字符串后，添加对应的尾部，推入 TCP ，具体的写入操作在内部方法 ServerResponse#_writeRaw 中：\n```javascript\n// lib/_http_outgoing.js\n// ...\nOutgoingMessage.prototype.end = function(data, encoding, callback) {\n  // ...\n  if (this.connection && data)\n    this.connection.cork();\n  var ret;\n  if (data) {\n    this.write(data, encoding);\n  }\n  if (this._hasBody && this.chunkedEncoding) {\n    ret = this._send('0\\r\\n' + this._trailer + '\\r\\n', 'binary', finish);\n  } else {\n    ret = this._send('', 'binary', finish);\n  }\n  if (this.connection && data)\n    this.connection.uncork();\n  // ...\n  return ret;\n}\nOutgoingMessage.prototype._writeRaw = function(data, encoding, callback) {\n  if (typeof encoding === 'function') {\n    callback = encoding;\n    encoding = null;\n  }\n  var connection = this.connection;\n  // ...\n  return connection.write(data, encoding, callback);\n};\n```\n** 到这，一个请求就已经通过 TCP ，发回给客户端了 **\n\n","slug":"node_http_flow","published":1,"updated":"2019-07-05T10:52:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4l000e4d853zl1fdsm","content":"<p><strong><em> Node.js 中，起一个 HTTP server 十分简单，短短数行即可：</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'use stirct'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createServer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span> &#125;)</span><br><span class=\"line\">  res.end(<span class=\"string\">'Hello World\\n'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening on port 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:3000</span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n<p>就这么简单，因为 Node.js 把许多细节都已在源码中封装好了，主要代码在 lib/<em>http</em>*.js 这些文件中，现在就让我们照着上述代码，看看从一个 HTTP 请求的到来直到响应，Node.js 都为我们在源码层做了些什么。</p>\n<h2 id=\"HTTP-请求的来到\"><a href=\"#HTTP-请求的来到\" class=\"headerlink\" title=\"HTTP 请求的来到\"></a>HTTP 请求的来到</h2><p>在 Node.js 中，若要收到一个 HTTP 请求，首先需要创建一个 http.Server 类的实例，然后监听它的 request 事件。由于 HTTP 协议属于应用层，在下层的传输层通常使用的是 TCP 协议，所以 net.Server 类正是 http.Server 类的父类。具体的 HTTP 相关的部分，是通过监听 net.Server 类实例的 connection 事件封装的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Server</span>(<span class=\"params\">requestListener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Server)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Server(requestListener);</span><br><span class=\"line\">  net.Server.call(<span class=\"keyword\">this</span>, &#123; <span class=\"attr\">allowHalfOpen</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (requestListener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListener(<span class=\"string\">'request'</span>, requestListener);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addListener(<span class=\"string\">'connection'</span>, connectionListener);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(Server, net.Server);</span><br></pre></td></tr></table></figure>\n<p>这时，则需要一个 HTTP parser 来解析通过 TCP 传输过来的数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parsers = common.parsers;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parser = parsers.alloc();</span><br><span class=\"line\">  parser.reinitialize(HTTPParser.REQUEST);</span><br><span class=\"line\">  parser.socket = socket;</span><br><span class=\"line\">  socket.parser = parser;</span><br><span class=\"line\">  parser.incoming = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值得一提的是，parser 是从一个“池”中获取的，这个“池”使用了一种叫做 free list（wiki）的数据结构，实现很简单，个人觉得是为了尽可能的对 parser 进行重用，并避免了不断调用构造函数的消耗，且设有数量上限（http 模块中为 1000）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/freelist.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\">exports.FreeList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, max, constructor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.constructor = <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">  this.max = max;</span><br><span class=\"line\">  this.list = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.FreeList.prototype.alloc = function() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list.length ? <span class=\"keyword\">this</span>.list.pop() :</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.FreeList.prototype.free = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt; <span class=\"keyword\">this</span>.max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.push(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>由于数据是从 TCP 不断推入的，所以这里的 parser 也是基于事件的，很符合 Node.js 的核心思想。使用的是 http-parser 这个库：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_common.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> binding = process.binding(<span class=\"string\">'http_parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HTTPParser = binding.HTTPParser;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FreeList = <span class=\"built_in\">require</span>(<span class=\"string\">'internal/freelist'</span>).FreeList;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parsers = <span class=\"keyword\">new</span> FreeList(<span class=\"string\">'parsers'</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parser = <span class=\"keyword\">new</span> HTTPParser(HTTPParser.REQUEST);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  parser[kOnHeaders] = parserOnHeaders;</span><br><span class=\"line\">  parser[kOnHeadersComplete] = parserOnHeadersComplete;</span><br><span class=\"line\">  parser[kOnBody] = parserOnBody;</span><br><span class=\"line\">  parser[kOnMessageComplete] = parserOnMessageComplete;</span><br><span class=\"line\">  parser[kOnExecute] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parser;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">exports.parsers = parsers;</span><br><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  parser.onIncoming = parserOnIncoming;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以一个完整的 HTTP 请求从接收到完全解析，会挨个经历 parser 上的如下事件监听器：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; parserOnHeaders：不断解析推入的请求头数据。</span><br><span class=\"line\">&gt; parserOnHeadersComplete：请求头解析完毕，构造 header 对象，为请求体创建 http.IncomingMessage 实例。</span><br><span class=\"line\">&gt; parserOnBody：不断解析推入的请求体数据。</span><br><span class=\"line\">&gt; parserOnExecute：请求体解析完毕，检查解析是否报错，若报错，直接触发 clientError 事件。若请求为 CONNECT 方法，或带有 Upgrade 头，则直接触发 connect 或 upgrade 事件。</span><br><span class=\"line\">&gt; parserOnIncoming：处理具体解析完毕的请求。</span><br></pre></td></tr></table></figure></p>\n<p>所以接下来，我们的关注点自然是 parserOnIncoming 这个监听器，正是这里完成了最终 request 事件的触发，关键步骤代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> outgoing = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> incoming = [];</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parserOnIncoming</span>(<span class=\"params\">req, shouldKeepAlive</span>) </span>&#123;</span><br><span class=\"line\">    incoming.push(req);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">new</span> ServerResponse(req);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket._httpMessage) &#123; <span class=\"comment\">// 这里判断若为真，则说明 socket 正在被队列中之前的 ServerResponse 实例占用</span></span><br><span class=\"line\">      outgoing.push(res);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.assignSocket(socket);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.on(<span class=\"string\">'finish'</span>, resOnFinish);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resOnFinish</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      incoming.shift();</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> m = outgoing.shift();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m) &#123;</span><br><span class=\"line\">        m.assignSocket(socket);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    self.emit(<span class=\"string\">'request'</span>, req, res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，对于同一个 socket 发来的请求，源码中分别维护了两个队列，用于缓冲 IncomingMessage 实例和对应的 ServerResponse 实例。先来的 ServerResponse 实例先占用 socket ，监听其 finish 事件，从各自队列中释放该 ServerResponse 实例和对应的 IncomingMessage 实例。</p>\n<p>比较绕，以一个简化的图示来总结这部分逻辑：<br><img src=\"http://dn-cnode.qbox.me/FjJ05SxuHUVoW1hY6bBFA0i9kRUx\" alt></p>\n<h2 id=\"响应该-HTTP-请求\"><a href=\"#响应该-HTTP-请求\" class=\"headerlink\" title=\"响应该 HTTP 请求\"></a>响应该 HTTP 请求</h2><p>到了响应时，事情已经简单许多了，传入的 ServerResponse 已经获取到了 socket。http.ServerResponse 继承于一个内部类 http.OutgoingMessage，当我们调用 ServerResponse#writeHead 时，Node.js 为我们拼凑好了头字符串，并缓存在 ServerResponse 实例内部的 _header 属性中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_outgoing.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">OutgoingMessage.prototype._storeHeader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">firstLine, headers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headers) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(headers);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isArray = <span class=\"built_in\">Array</span>.isArray(headers);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> field, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isArray) &#123;</span><br><span class=\"line\">        field = headers[key][<span class=\"number\">0</span>];</span><br><span class=\"line\">        value = headers[key][<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        field = key;</span><br><span class=\"line\">        value = headers[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; value.length; j++) &#123;</span><br><span class=\"line\">          storeHeader(<span class=\"keyword\">this</span>, state, field, value[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        storeHeader(<span class=\"keyword\">this</span>, state, field, value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._header = state.messageHeader + CRLF;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>紧接着在调用 ServerResponse#end 时，将数据拼凑在头字符串后，添加对应的尾部，推入 TCP ，具体的写入操作在内部方法 ServerResponse#_writeRaw 中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_outgoing.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">OutgoingMessage.prototype.end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, encoding, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connection &amp;&amp; data)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.connection.cork();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.write(data, encoding);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._hasBody &amp;&amp; <span class=\"keyword\">this</span>.chunkedEncoding) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">this</span>._send(<span class=\"string\">'0\\r\\n'</span> + <span class=\"keyword\">this</span>._trailer + <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'binary'</span>, finish);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">this</span>._send(<span class=\"string\">''</span>, <span class=\"string\">'binary'</span>, finish);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connection &amp;&amp; data)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.connection.uncork();</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OutgoingMessage.prototype._writeRaw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, encoding, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> encoding === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    callback = encoding;</span><br><span class=\"line\">    encoding = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> connection = <span class=\"keyword\">this</span>.connection;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> connection.write(data, encoding, callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 到这，一个请求就已经通过 TCP ，发回给客户端了 </strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong><em> Node.js 中，起一个 HTTP server 十分简单，短短数行即可：</em></strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'use stirct'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createServer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>)</span><br><span class=\"line\">createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span> &#125;)</span><br><span class=\"line\">  res.end(<span class=\"string\">'Hello World\\n'</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Listening on port 3000'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl localhost:3000</span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n<p>就这么简单，因为 Node.js 把许多细节都已在源码中封装好了，主要代码在 lib/<em>http</em>*.js 这些文件中，现在就让我们照着上述代码，看看从一个 HTTP 请求的到来直到响应，Node.js 都为我们在源码层做了些什么。</p>\n<h2 id=\"HTTP-请求的来到\"><a href=\"#HTTP-请求的来到\" class=\"headerlink\" title=\"HTTP 请求的来到\"></a>HTTP 请求的来到</h2><p>在 Node.js 中，若要收到一个 HTTP 请求，首先需要创建一个 http.Server 类的实例，然后监听它的 request 事件。由于 HTTP 协议属于应用层，在下层的传输层通常使用的是 TCP 协议，所以 net.Server 类正是 http.Server 类的父类。具体的 HTTP 相关的部分，是通过监听 net.Server 类实例的 connection 事件封装的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Server</span>(<span class=\"params\">requestListener</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> Server)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Server(requestListener);</span><br><span class=\"line\">  net.Server.call(<span class=\"keyword\">this</span>, &#123; <span class=\"attr\">allowHalfOpen</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (requestListener) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addListener(<span class=\"string\">'request'</span>, requestListener);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.addListener(<span class=\"string\">'connection'</span>, connectionListener);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">util.inherits(Server, net.Server);</span><br></pre></td></tr></table></figure>\n<p>这时，则需要一个 HTTP parser 来解析通过 TCP 传输过来的数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parsers = common.parsers;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parser = parsers.alloc();</span><br><span class=\"line\">  parser.reinitialize(HTTPParser.REQUEST);</span><br><span class=\"line\">  parser.socket = socket;</span><br><span class=\"line\">  socket.parser = parser;</span><br><span class=\"line\">  parser.incoming = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值得一提的是，parser 是从一个“池”中获取的，这个“池”使用了一种叫做 free list（wiki）的数据结构，实现很简单，个人觉得是为了尽可能的对 parser 进行重用，并避免了不断调用构造函数的消耗，且设有数量上限（http 模块中为 1000）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/freelist.js</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\">exports.FreeList = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, max, constructor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.constructor = <span class=\"keyword\">constructor</span>;</span><br><span class=\"line\">  this.max = max;</span><br><span class=\"line\">  this.list = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.FreeList.prototype.alloc = function() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.list.length ? <span class=\"keyword\">this</span>.list.pop() :</span><br><span class=\"line\">                            <span class=\"keyword\">this</span>.constructor.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">exports.FreeList.prototype.free = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.list.length &lt; <span class=\"keyword\">this</span>.max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.list.push(obj);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>由于数据是从 TCP 不断推入的，所以这里的 parser 也是基于事件的，很符合 Node.js 的核心思想。使用的是 http-parser 这个库：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_common.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> binding = process.binding(<span class=\"string\">'http_parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HTTPParser = binding.HTTPParser;</span><br><span class=\"line\"><span class=\"keyword\">const</span> FreeList = <span class=\"built_in\">require</span>(<span class=\"string\">'internal/freelist'</span>).FreeList;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parsers = <span class=\"keyword\">new</span> FreeList(<span class=\"string\">'parsers'</span>, <span class=\"number\">1000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parser = <span class=\"keyword\">new</span> HTTPParser(HTTPParser.REQUEST);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  parser[kOnHeaders] = parserOnHeaders;</span><br><span class=\"line\">  parser[kOnHeadersComplete] = parserOnHeadersComplete;</span><br><span class=\"line\">  parser[kOnBody] = parserOnBody;</span><br><span class=\"line\">  parser[kOnMessageComplete] = parserOnMessageComplete;</span><br><span class=\"line\">  parser[kOnExecute] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parser;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">exports.parsers = parsers;</span><br><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  parser.onIncoming = parserOnIncoming;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>所以一个完整的 HTTP 请求从接收到完全解析，会挨个经历 parser 上的如下事件监听器：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; parserOnHeaders：不断解析推入的请求头数据。</span><br><span class=\"line\">&gt; parserOnHeadersComplete：请求头解析完毕，构造 header 对象，为请求体创建 http.IncomingMessage 实例。</span><br><span class=\"line\">&gt; parserOnBody：不断解析推入的请求体数据。</span><br><span class=\"line\">&gt; parserOnExecute：请求体解析完毕，检查解析是否报错，若报错，直接触发 clientError 事件。若请求为 CONNECT 方法，或带有 Upgrade 头，则直接触发 connect 或 upgrade 事件。</span><br><span class=\"line\">&gt; parserOnIncoming：处理具体解析完毕的请求。</span><br></pre></td></tr></table></figure></p>\n<p>所以接下来，我们的关注点自然是 parserOnIncoming 这个监听器，正是这里完成了最终 request 事件的触发，关键步骤代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_server.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connectionListener</span>(<span class=\"params\">socket</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> outgoing = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> incoming = [];</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parserOnIncoming</span>(<span class=\"params\">req, shouldKeepAlive</span>) </span>&#123;</span><br><span class=\"line\">    incoming.push(req);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> res = <span class=\"keyword\">new</span> ServerResponse(req);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (socket._httpMessage) &#123; <span class=\"comment\">// 这里判断若为真，则说明 socket 正在被队列中之前的 ServerResponse 实例占用</span></span><br><span class=\"line\">      outgoing.push(res);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.assignSocket(socket);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.on(<span class=\"string\">'finish'</span>, resOnFinish);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resOnFinish</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      incoming.shift();</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> m = outgoing.shift();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m) &#123;</span><br><span class=\"line\">        m.assignSocket(socket);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    self.emit(<span class=\"string\">'request'</span>, req, res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看出，对于同一个 socket 发来的请求，源码中分别维护了两个队列，用于缓冲 IncomingMessage 实例和对应的 ServerResponse 实例。先来的 ServerResponse 实例先占用 socket ，监听其 finish 事件，从各自队列中释放该 ServerResponse 实例和对应的 IncomingMessage 实例。</p>\n<p>比较绕，以一个简化的图示来总结这部分逻辑：<br><img src=\"http://dn-cnode.qbox.me/FjJ05SxuHUVoW1hY6bBFA0i9kRUx\" alt></p>\n<h2 id=\"响应该-HTTP-请求\"><a href=\"#响应该-HTTP-请求\" class=\"headerlink\" title=\"响应该 HTTP 请求\"></a>响应该 HTTP 请求</h2><p>到了响应时，事情已经简单许多了，传入的 ServerResponse 已经获取到了 socket。http.ServerResponse 继承于一个内部类 http.OutgoingMessage，当我们调用 ServerResponse#writeHead 时，Node.js 为我们拼凑好了头字符串，并缓存在 ServerResponse 实例内部的 _header 属性中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_outgoing.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">OutgoingMessage.prototype._storeHeader = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">firstLine, headers</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headers) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(headers);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isArray = <span class=\"built_in\">Array</span>.isArray(headers);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> field, value;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isArray) &#123;</span><br><span class=\"line\">        field = headers[key][<span class=\"number\">0</span>];</span><br><span class=\"line\">        value = headers[key][<span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        field = key;</span><br><span class=\"line\">        value = headers[key];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; value.length; j++) &#123;</span><br><span class=\"line\">          storeHeader(<span class=\"keyword\">this</span>, state, field, value[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        storeHeader(<span class=\"keyword\">this</span>, state, field, value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._header = state.messageHeader + CRLF;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>紧接着在调用 ServerResponse#end 时，将数据拼凑在头字符串后，添加对应的尾部，推入 TCP ，具体的写入操作在内部方法 ServerResponse#_writeRaw 中：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lib/_http_outgoing.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">OutgoingMessage.prototype.end = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, encoding, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connection &amp;&amp; data)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.connection.cork();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.write(data, encoding);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._hasBody &amp;&amp; <span class=\"keyword\">this</span>.chunkedEncoding) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">this</span>._send(<span class=\"string\">'0\\r\\n'</span> + <span class=\"keyword\">this</span>._trailer + <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">'binary'</span>, finish);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">this</span>._send(<span class=\"string\">''</span>, <span class=\"string\">'binary'</span>, finish);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.connection &amp;&amp; data)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.connection.uncork();</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OutgoingMessage.prototype._writeRaw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, encoding, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> encoding === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    callback = encoding;</span><br><span class=\"line\">    encoding = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> connection = <span class=\"keyword\">this</span>.connection;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> connection.write(data, encoding, callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 到这，一个请求就已经通过 TCP ，发回给客户端了 </strong></p>\n"},{"title":"postgres-array-operator","date":"2019-11-27T11:59:29.000Z","_content":"\n||\n\n元素与数组连接\n\n select 3 || ARRAY[4,5,6];\n\n {3,4,5,6}\n\n||\n\n数组与元素连接\n\n select ARRAY[4,5,6] || 7;\n\n {4,5,6,7}\n\n","source":"_posts/postgres-array-operator.md","raw":"---\ntitle: postgres-array-operator\ndate: 2019-11-27 19:59:29\ntags:\n---\n\n||\n\n元素与数组连接\n\n select 3 || ARRAY[4,5,6];\n\n {3,4,5,6}\n\n||\n\n数组与元素连接\n\n select ARRAY[4,5,6] || 7;\n\n {4,5,6,7}\n\n","slug":"postgres-array-operator","published":1,"updated":"2019-11-27T12:00:21.064Z","_id":"ck3h8lk4n000g4d85tctibajj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>||</p>\n<p>元素与数组连接</p>\n<p> select 3 || ARRAY[4,5,6];</p>\n<p> {3,4,5,6}</p>\n<p>||</p>\n<p>数组与元素连接</p>\n<p> select ARRAY[4,5,6] || 7;</p>\n<p> {4,5,6,7}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>||</p>\n<p>元素与数组连接</p>\n<p> select 3 || ARRAY[4,5,6];</p>\n<p> {3,4,5,6}</p>\n<p>||</p>\n<p>数组与元素连接</p>\n<p> select ARRAY[4,5,6] || 7;</p>\n<p> {4,5,6,7}</p>\n"},{"title":"通过管道链接远程服务器上面的数据库","date":"2019-01-28T02:45:55.000Z","_content":"\n服务器的数据库在linux上面不方便管理，又无开启数据库远程访问权限。只有ssh权限的情况下。本地通过ssh管道链接该数据库。。\n\n首先保证服务器数据库开启，\n本地链接服务器\n\nssh -L 20202:localhost:5432 root@12.54.654.25 -p 22\n\n通过ssh -L 管道链接 ：将地址为12.54.654.25服务器上面的 ，本地（localhost）服务端口5432（postgresql服务）映射到，客户端的本地端口20202.\n\n至此，客户端的本地端口20202即为服务端的 5432端口服务。\n\n20202：可配置的将服务端数据库端口映射过来的本地端口。\nlocalhost：在服务器上面的本地服务。\n5432：服务器上面的数据库服务端口。\nroot：服务器的ssh账号。\n12.54.654.25：服务器地址。\n22：服务器的ssh端口。\n\n","source":"_posts/ssh-pip-sql.md","raw":"---\ntitle: 通过管道链接远程服务器上面的数据库\ndate: 2019-01-28 10:45:55\ntags:\n- linux\n- 服务器\n- 管道\n---\n\n服务器的数据库在linux上面不方便管理，又无开启数据库远程访问权限。只有ssh权限的情况下。本地通过ssh管道链接该数据库。。\n\n首先保证服务器数据库开启，\n本地链接服务器\n\nssh -L 20202:localhost:5432 root@12.54.654.25 -p 22\n\n通过ssh -L 管道链接 ：将地址为12.54.654.25服务器上面的 ，本地（localhost）服务端口5432（postgresql服务）映射到，客户端的本地端口20202.\n\n至此，客户端的本地端口20202即为服务端的 5432端口服务。\n\n20202：可配置的将服务端数据库端口映射过来的本地端口。\nlocalhost：在服务器上面的本地服务。\n5432：服务器上面的数据库服务端口。\nroot：服务器的ssh账号。\n12.54.654.25：服务器地址。\n22：服务器的ssh端口。\n\n","slug":"ssh-pip-sql","published":1,"updated":"2019-11-27T02:49:33.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4o000h4d85yqt1599t","content":"<p>服务器的数据库在linux上面不方便管理，又无开启数据库远程访问权限。只有ssh权限的情况下。本地通过ssh管道链接该数据库。。</p>\n<p>首先保证服务器数据库开启，<br>本地链接服务器</p>\n<p>ssh -L 20202:localhost:5432 <a href=\"mailto:root@12.54.654.25\" target=\"_blank\" rel=\"noopener\">root@12.54.654.25</a> -p 22</p>\n<p>通过ssh -L 管道链接 ：将地址为12.54.654.25服务器上面的 ，本地（localhost）服务端口5432（postgresql服务）映射到，客户端的本地端口20202.</p>\n<p>至此，客户端的本地端口20202即为服务端的 5432端口服务。</p>\n<p>20202：可配置的将服务端数据库端口映射过来的本地端口。<br>localhost：在服务器上面的本地服务。<br>5432：服务器上面的数据库服务端口。<br>root：服务器的ssh账号。<br>12.54.654.25：服务器地址。<br>22：服务器的ssh端口。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>服务器的数据库在linux上面不方便管理，又无开启数据库远程访问权限。只有ssh权限的情况下。本地通过ssh管道链接该数据库。。</p>\n<p>首先保证服务器数据库开启，<br>本地链接服务器</p>\n<p>ssh -L 20202:localhost:5432 <a href=\"mailto:root@12.54.654.25\" target=\"_blank\" rel=\"noopener\">root@12.54.654.25</a> -p 22</p>\n<p>通过ssh -L 管道链接 ：将地址为12.54.654.25服务器上面的 ，本地（localhost）服务端口5432（postgresql服务）映射到，客户端的本地端口20202.</p>\n<p>至此，客户端的本地端口20202即为服务端的 5432端口服务。</p>\n<p>20202：可配置的将服务端数据库端口映射过来的本地端口。<br>localhost：在服务器上面的本地服务。<br>5432：服务器上面的数据库服务端口。<br>root：服务器的ssh账号。<br>12.54.654.25：服务器地址。<br>22：服务器的ssh端口。</p>\n"},{"title":"SSH连接主机Github","date":"2019-11-27T03:09:21.000Z","_content":"\n使用 ssh-keygen -t rsa -C \"xxxx@xxx.com\" 创建github秘钥文件\n在github上创建了keys后使用 \nssh -T git@github.com\n测试连接报错 Permission denied(publickey)。\n此时无法知道 报错具体原因，需要使用\nssh -T -v git@github.com\n命令查看具体错误原因\n\n发现\ndebug1: Will attempt key: /Users/wqiong/.ssh/id_rsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_dsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_ecdsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_ed25519 \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_xmss \n\ngit一直在查找id_rsa,id_dsa等文件，\n而我在创建ssh秘钥文件时候创建了文件名，并未被识别，所以将之前创建的秘钥文件名更改为id_rsa,以及id_rsa.pub即可。\n再次使用\nssh -T git@github.com\n发现通过","source":"_posts/ssh-t-github-error.md","raw":"---\ntitle: SSH连接主机Github\ndate: 2019-11-27 11:09:21\ntags:\n- ssh\n- git\n---\n\n使用 ssh-keygen -t rsa -C \"xxxx@xxx.com\" 创建github秘钥文件\n在github上创建了keys后使用 \nssh -T git@github.com\n测试连接报错 Permission denied(publickey)。\n此时无法知道 报错具体原因，需要使用\nssh -T -v git@github.com\n命令查看具体错误原因\n\n发现\ndebug1: Will attempt key: /Users/wqiong/.ssh/id_rsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_dsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_ecdsa \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_ed25519 \ndebug1: Will attempt key: /Users/wqiong/.ssh/id_xmss \n\ngit一直在查找id_rsa,id_dsa等文件，\n而我在创建ssh秘钥文件时候创建了文件名，并未被识别，所以将之前创建的秘钥文件名更改为id_rsa,以及id_rsa.pub即可。\n再次使用\nssh -T git@github.com\n发现通过","slug":"ssh-t-github-error","published":1,"updated":"2019-11-27T03:19:28.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4p000j4d85tvyxwlzg","content":"<p>使用 ssh-keygen -t rsa -C “<a href=\"mailto:xxxx@xxx.com\" target=\"_blank\" rel=\"noopener\">xxxx@xxx.com</a>“ 创建github秘钥文件<br>在github上创建了keys后使用<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>测试连接报错 Permission denied(publickey)。<br>此时无法知道 报错具体原因，需要使用<br>ssh -T -v <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>命令查看具体错误原因</p>\n<p>发现<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_rsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_dsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_ecdsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_ed25519<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_xmss </p>\n<p>git一直在查找id_rsa,id_dsa等文件，<br>而我在创建ssh秘钥文件时候创建了文件名，并未被识别，所以将之前创建的秘钥文件名更改为id_rsa,以及id_rsa.pub即可。<br>再次使用<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>发现通过</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用 ssh-keygen -t rsa -C “<a href=\"mailto:xxxx@xxx.com\" target=\"_blank\" rel=\"noopener\">xxxx@xxx.com</a>“ 创建github秘钥文件<br>在github上创建了keys后使用<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>测试连接报错 Permission denied(publickey)。<br>此时无法知道 报错具体原因，需要使用<br>ssh -T -v <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>命令查看具体错误原因</p>\n<p>发现<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_rsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_dsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_ecdsa<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_ed25519<br>debug1: Will attempt key: /Users/wqiong/.ssh/id_xmss </p>\n<p>git一直在查找id_rsa,id_dsa等文件，<br>而我在创建ssh秘钥文件时候创建了文件名，并未被识别，所以将之前创建的秘钥文件名更改为id_rsa,以及id_rsa.pub即可。<br>再次使用<br>ssh -T <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a><br>发现通过</p>\n"},{"title":"sequelize操纵Pgsql","date":"2019-01-25T06:17:51.000Z","_content":"# Sequelize介绍\n---\n[Sequelize](https://itbilu.com/nodejs/npm/V1PExztfb.html)  是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能.\n\n---\n[PostgreSQL](https://www.postgresql.org/docs/) 是一种非常先进的对象-关系型数据库管理系统（ORDBMS），目前功能最强大，特性最丰富和最先进的自由软件数据库系统。有些特性甚至连商业数据库都不具备。这个起源于伯克利（BSD）的数据库研究计划目前已经衍生成一项国际开发项目，并且有非常广泛的用户。\n\n\n## 建立链接\n---\n  Sequelize会在初始化时设置一个连接池，这样你应该为每个数据库创建一个实例：\n\n```javascript\nvar sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: 'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql',\n\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n});\n```\n// 或者可以简单的使用一个连接 uri\n```javascript\nvar sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');\n```\n\n```javascript\n  var User = sequelize.define('user', {\n    firstName: {\n      type: Sequelize.STRING,\n      field: 'first_name' // Will result in an attribute that is firstName when user facing but first_name in the database\n    },\n    lastName: {\n      type: Sequelize.STRING\n    }\n  }, {\n    freezeTableName: true // Model 对应的表名将与model名相同\n  });\n\n  //将表同步到数据库\n  User.sync({force: true}).then(function () {\n    // 已创建数据表\n    return User.create({\n      firstName: 'John',\n      lastName: 'Hancock'\n    });\n  });\n```\n---\n  Sequelize是基于Promise实现的流程控制\n\n```javascript  \n  let user = await User.findOne();\n  User.findOne().then(user =>{\n    console.log(user);\n  });\n```\n\n##  数组数据的检索\n\n\n```javascript\n  //检索语句是被检索数据的子集\n  $contains: [1, 2]\n  //被检索数据是检索语句的子集\n  $contained: [1, 2]\n  //被检索数据与检索语句有交集\n  $overlap: [1, 2]\n```\n---\n","source":"_posts/sequelize-control-pgsql.md","raw":"---\ntitle: sequelize操纵Pgsql\ndate: 2019-01-25 14:17:51\ntags: \n- sequelize\n- pgsql\ncategories:\n- [ORM]\n---\n# Sequelize介绍\n---\n[Sequelize](https://itbilu.com/nodejs/npm/V1PExztfb.html)  是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能.\n\n---\n[PostgreSQL](https://www.postgresql.org/docs/) 是一种非常先进的对象-关系型数据库管理系统（ORDBMS），目前功能最强大，特性最丰富和最先进的自由软件数据库系统。有些特性甚至连商业数据库都不具备。这个起源于伯克利（BSD）的数据库研究计划目前已经衍生成一项国际开发项目，并且有非常广泛的用户。\n\n\n## 建立链接\n---\n  Sequelize会在初始化时设置一个连接池，这样你应该为每个数据库创建一个实例：\n\n```javascript\nvar sequelize = new Sequelize('database', 'username', 'password', {\n  host: 'localhost',\n  dialect: 'mysql'|'mariadb'|'sqlite'|'postgres'|'mssql',\n\n  pool: {\n    max: 5,\n    min: 0,\n    idle: 10000\n  },\n});\n```\n// 或者可以简单的使用一个连接 uri\n```javascript\nvar sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname');\n```\n\n```javascript\n  var User = sequelize.define('user', {\n    firstName: {\n      type: Sequelize.STRING,\n      field: 'first_name' // Will result in an attribute that is firstName when user facing but first_name in the database\n    },\n    lastName: {\n      type: Sequelize.STRING\n    }\n  }, {\n    freezeTableName: true // Model 对应的表名将与model名相同\n  });\n\n  //将表同步到数据库\n  User.sync({force: true}).then(function () {\n    // 已创建数据表\n    return User.create({\n      firstName: 'John',\n      lastName: 'Hancock'\n    });\n  });\n```\n---\n  Sequelize是基于Promise实现的流程控制\n\n```javascript  \n  let user = await User.findOne();\n  User.findOne().then(user =>{\n    console.log(user);\n  });\n```\n\n##  数组数据的检索\n\n\n```javascript\n  //检索语句是被检索数据的子集\n  $contains: [1, 2]\n  //被检索数据是检索语句的子集\n  $contained: [1, 2]\n  //被检索数据与检索语句有交集\n  $overlap: [1, 2]\n```\n---\n","slug":"sequelize-control-pgsql","published":1,"updated":"2019-07-05T10:52:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4q000l4d85hfbmz5mo","content":"<h1 id=\"Sequelize介绍\"><a href=\"#Sequelize介绍\" class=\"headerlink\" title=\"Sequelize介绍\"></a>Sequelize介绍</h1><hr>\n<p><a href=\"https://itbilu.com/nodejs/npm/V1PExztfb.html\" target=\"_blank\" rel=\"noopener\">Sequelize</a>  是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能.</p>\n<hr>\n<p><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\">PostgreSQL</a> 是一种非常先进的对象-关系型数据库管理系统（ORDBMS），目前功能最强大，特性最丰富和最先进的自由软件数据库系统。有些特性甚至连商业数据库都不具备。这个起源于伯克利（BSD）的数据库研究计划目前已经衍生成一项国际开发项目，并且有非常广泛的用户。</p>\n<h2 id=\"建立链接\"><a href=\"#建立链接\" class=\"headerlink\" title=\"建立链接\"></a>建立链接</h2><hr>\n<p>  Sequelize会在初始化时设置一个连接池，这样你应该为每个数据库创建一个实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">'database'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>, &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">  dialect: <span class=\"string\">'mysql'</span>|<span class=\"string\">'mariadb'</span>|<span class=\"string\">'sqlite'</span>|<span class=\"string\">'postgres'</span>|<span class=\"string\">'mssql'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  pool: &#123;</span><br><span class=\"line\">    max: <span class=\"number\">5</span>,</span><br><span class=\"line\">    min: <span class=\"number\">0</span>,</span><br><span class=\"line\">    idle: <span class=\"number\">10000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>// 或者可以简单的使用一个连接 uri<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">'postgres://user:pass@example.com:5432/dbname'</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    field: <span class=\"string\">'first_name'</span> <span class=\"comment\">// Will result in an attribute that is firstName when user facing but first_name in the database</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span> <span class=\"comment\">// Model 对应的表名将与model名相同</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将表同步到数据库</span></span><br><span class=\"line\">User.sync(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已创建数据表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.create(&#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'John'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Hancock'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>  Sequelize是基于Promise实现的流程控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.findOne();</span><br><span class=\"line\">User.findOne().then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(user);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组数据的检索\"><a href=\"#数组数据的检索\" class=\"headerlink\" title=\"数组数据的检索\"></a>数组数据的检索</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检索语句是被检索数据的子集</span></span><br><span class=\"line\">$contains: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">//被检索数据是检索语句的子集</span></span><br><span class=\"line\">$contained: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">//被检索数据与检索语句有交集</span></span><br><span class=\"line\">$overlap: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Sequelize介绍\"><a href=\"#Sequelize介绍\" class=\"headerlink\" title=\"Sequelize介绍\"></a>Sequelize介绍</h1><hr>\n<p><a href=\"https://itbilu.com/nodejs/npm/V1PExztfb.html\" target=\"_blank\" rel=\"noopener\">Sequelize</a>  是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, SQLite 和 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 读取和复制等功能.</p>\n<hr>\n<p><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\">PostgreSQL</a> 是一种非常先进的对象-关系型数据库管理系统（ORDBMS），目前功能最强大，特性最丰富和最先进的自由软件数据库系统。有些特性甚至连商业数据库都不具备。这个起源于伯克利（BSD）的数据库研究计划目前已经衍生成一项国际开发项目，并且有非常广泛的用户。</p>\n<h2 id=\"建立链接\"><a href=\"#建立链接\" class=\"headerlink\" title=\"建立链接\"></a>建立链接</h2><hr>\n<p>  Sequelize会在初始化时设置一个连接池，这样你应该为每个数据库创建一个实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">'database'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'password'</span>, &#123;</span><br><span class=\"line\">  host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">  dialect: <span class=\"string\">'mysql'</span>|<span class=\"string\">'mariadb'</span>|<span class=\"string\">'sqlite'</span>|<span class=\"string\">'postgres'</span>|<span class=\"string\">'mssql'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  pool: &#123;</span><br><span class=\"line\">    max: <span class=\"number\">5</span>,</span><br><span class=\"line\">    min: <span class=\"number\">0</span>,</span><br><span class=\"line\">    idle: <span class=\"number\">10000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>// 或者可以简单的使用一个连接 uri<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">'postgres://user:pass@example.com:5432/dbname'</span>);</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = sequelize.define(<span class=\"string\">'user'</span>, &#123;</span><br><span class=\"line\">  firstName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING,</span><br><span class=\"line\">    field: <span class=\"string\">'first_name'</span> <span class=\"comment\">// Will result in an attribute that is firstName when user facing but first_name in the database</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lastName: &#123;</span><br><span class=\"line\">    type: Sequelize.STRING</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  freezeTableName: <span class=\"literal\">true</span> <span class=\"comment\">// Model 对应的表名将与model名相同</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将表同步到数据库</span></span><br><span class=\"line\">User.sync(&#123;<span class=\"attr\">force</span>: <span class=\"literal\">true</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 已创建数据表</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> User.create(&#123;</span><br><span class=\"line\">    firstName: <span class=\"string\">'John'</span>,</span><br><span class=\"line\">    lastName: <span class=\"string\">'Hancock'</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<p>  Sequelize是基于Promise实现的流程控制</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> User.findOne();</span><br><span class=\"line\">User.findOne().then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(user);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组数据的检索\"><a href=\"#数组数据的检索\" class=\"headerlink\" title=\"数组数据的检索\"></a>数组数据的检索</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//检索语句是被检索数据的子集</span></span><br><span class=\"line\">$contains: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">//被检索数据是检索语句的子集</span></span><br><span class=\"line\">$contained: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">//被检索数据与检索语句有交集</span></span><br><span class=\"line\">$overlap: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"title":"SSH无法链接linux","date":"2017-09-20T07:34:57.000Z","_content":"## SSH无法链接Linux\n\n---\n  某次误操作导致linux虚拟机服务器链接不上，报错/var/empty/sshd must be owned by root and not group or world-writable.\n  发现是权限问题\n---\n###  问题查找\n```\n  $ rpm -V    检查到ssh软件包正常，但是某个目录属性错误\n  经查看发现这个目录的属主不是root，所以启动ssh报错\n  修改为root属主，启动成功\n```\n### 问题解决\n```\n  chown -R root:root /var/empty/sshd\n  chmod 744 /var/empty/sshd\n  service sshd restart\n```\n### 问题总结\n*** 自己在处理文件权限的时候失误操作，命令中使用了 /xxx 导致将所有文件所有权更改导致 ***","source":"_posts/ssh_error.md","raw":"---\ntitle: SSH无法链接linux\ndate: 2017-09-20 15:34:57\ntags: \n- linux\ncategories:\n- [linux]\n- ssh\n---\n## SSH无法链接Linux\n\n---\n  某次误操作导致linux虚拟机服务器链接不上，报错/var/empty/sshd must be owned by root and not group or world-writable.\n  发现是权限问题\n---\n###  问题查找\n```\n  $ rpm -V    检查到ssh软件包正常，但是某个目录属性错误\n  经查看发现这个目录的属主不是root，所以启动ssh报错\n  修改为root属主，启动成功\n```\n### 问题解决\n```\n  chown -R root:root /var/empty/sshd\n  chmod 744 /var/empty/sshd\n  service sshd restart\n```\n### 问题总结\n*** 自己在处理文件权限的时候失误操作，命令中使用了 /xxx 导致将所有文件所有权更改导致 ***","slug":"ssh_error","published":1,"updated":"2019-07-05T10:52:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk4r000n4d85js2rd24v","content":"<h2 id=\"SSH无法链接Linux\"><a href=\"#SSH无法链接Linux\" class=\"headerlink\" title=\"SSH无法链接Linux\"></a>SSH无法链接Linux</h2><hr>\n<p>  某次误操作导致linux虚拟机服务器链接不上，报错/var/empty/sshd must be owned by root and not group or world-writable.</p>\n<h2 id=\"发现是权限问题\"><a href=\"#发现是权限问题\" class=\"headerlink\" title=\"  发现是权限问题\"></a>  发现是权限问题</h2><h3 id=\"问题查找\"><a href=\"#问题查找\" class=\"headerlink\" title=\"问题查找\"></a>问题查找</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -V    检查到ssh软件包正常，但是某个目录属性错误</span><br><span class=\"line\">经查看发现这个目录的属主不是root，所以启动ssh报错</span><br><span class=\"line\">修改为root属主，启动成功</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:root /var/empty/sshd</span><br><span class=\"line\">chmod 744 /var/empty/sshd</span><br><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h3><p><strong><em> 自己在处理文件权限的时候失误操作，命令中使用了 /xxx 导致将所有文件所有权更改导致 </em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSH无法链接Linux\"><a href=\"#SSH无法链接Linux\" class=\"headerlink\" title=\"SSH无法链接Linux\"></a>SSH无法链接Linux</h2><hr>\n<p>  某次误操作导致linux虚拟机服务器链接不上，报错/var/empty/sshd must be owned by root and not group or world-writable.</p>\n<h2 id=\"发现是权限问题\"><a href=\"#发现是权限问题\" class=\"headerlink\" title=\"  发现是权限问题\"></a>  发现是权限问题</h2><h3 id=\"问题查找\"><a href=\"#问题查找\" class=\"headerlink\" title=\"问题查找\"></a>问题查找</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -V    检查到ssh软件包正常，但是某个目录属性错误</span><br><span class=\"line\">经查看发现这个目录的属主不是root，所以启动ssh报错</span><br><span class=\"line\">修改为root属主，启动成功</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chown -R root:root /var/empty/sshd</span><br><span class=\"line\">chmod 744 /var/empty/sshd</span><br><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h3><p><strong><em> 自己在处理文件权限的时候失误操作，命令中使用了 /xxx 导致将所有文件所有权更改导致 </em></strong></p>\n"},{"title":"node安全性介绍","date":"2018-09-25T12:53:30.000Z","_content":"安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。\n\n以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。\n\n### 配置管理 ###\n安全性相关的HTTP头\n以下是一些安全性相关的HTTP头，你的站点应该设置它们：\n\n- Strict-Transport-Security：强制使用安全连接（SSL/TLS之上的HTTPS）来连接到服务器。\n- X-Frame-Options：提供对于“点击劫持”的保护。\n- X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。\n- X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。\n- Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。\n\n在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：\n\n```javascript\nvar express = require('express');\nvar helmet = require('helmet');\nvar app = express();\napp.use(helmet());\n```\nHelmet在Koa中也能使用：koa-helmet。\n\n当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：\n\n```\n# nginx.conf\nadd_header X-Frame-Options SAMEORIGIN;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection \"1; mode=block\";\nadd_header Content-Security-Policy \"default-src 'self'\";\n```\n完整的例子可以参考[这个nginx配置](https://gist.github.com/plentz/6737338)。\n\n如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：[http://cyh.herokuapp.com/cyh](http://cyh.herokuapp.com/cyh) 。\n\n### 客户端的敏感数据 ###\n当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。\n\n现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：\n\n- 使用pull request更新代码\n- 建立起code review机制\n\n### 身份认证 ###\n对于暴力破解的保护\n暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，用户登陆就特别适合它发挥。\n\n你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用[ratelimiter](https://www.npmjs.com/package/ratelimiter)包。\n```javascript\nvar email = req.body.email;\nvar limit = new Limiter({ id: email, db: db });\nlimit.get(function(err, limit) {\n});\n```\n当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成的不错的中间件：\n```javascript\nvar ratelimit = require('koa-ratelimit');\nvar redis = require('redis');\nvar koa = require('koa');\nvar app = koa();\nvar emailBasedRatelimit = ratelimit({\n  db: redis.createClient(),\n  duration: 60000,\n  max: 10,\n  id: function (context) {\n    return context.body.email;\n  }\n});\nvar ipBasedRatelimit = ratelimit({\n  db: redis.createClient(),\n  duration: 60000,\n  max: 10,\n  id: function (context) {\n    return context.ip;\n  }\n});\napp.post('/login', ipBasedRatelimit, emailBasedRatelimit, handleLogin);\n\n```\n这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数 – 这减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据你的实际情景所改变的，所以不要简单的复制粘贴它们。。\n\n如果你想要测试你的服务在这些场景下的表现，你可以使用[hydra](https://github.com/vanhauser-thc/thc-hydra)。\n### Session管理 ###\n对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。\n\nCookie标示\n以下是一个每个cookie可以设置的属性的列表，以及它们的含义：\n- secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。\n- HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。\n\n### Cookie域 ###\n- domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。\n- path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。\n- expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。\n\n在Node.js中，你可以使用cookies包来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更像使用它的一些封装，如[cookie-session](https://www.npmjs.com/package/cookie-session) 。\n\n```javascript\nvar cookieSession = require('cookie-session');\nvar express = require('express');\nvar app = express();\napp.use(cookieSession({\n  name: 'session',\n  keys: [\n    process.env.COOKIE_KEY1,\n    process.env.COOKIE_KEY2\n  ]\n}));\napp.use(function (req, res, next) {\n  var n = req.session.views || 0;\n  req.session.views = n++;\n  res.end(n + ' views');\n});\napp.listen(3000);\n\n```\n### CSRF ###\n\n跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。\n\n在Node.js中，你可以使用[csrf](https://www.npmjs.com/package/csrf)模块来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如csurf这样的Express中间件。\n\n在路由层，可以会有如下代码：\n```javascript\nvar cookieParser = require('cookie-parser');\nvar csrf = require('csurf');\nvar bodyParser = require('body-parser');\nvar express = require('express');\n// setup route middlewares\nvar csrfProtection = csrf({ cookie: true });\nvar parseForm = bodyParser.urlencoded({ extended: false });\n// create express app\nvar app = express();\n// we need this because \"cookie\" is true in csrfProtection\napp.use(cookieParser());\napp.get('/form', csrfProtection, function(req, res) {\n  // pass the csrfToken to the view\n  res.render('send', { csrfToken: req.csrfToken() });\n});\napp.post('/process', parseForm, csrfProtection, function(req, res) {\n  res.send('data is being processed');\n});\n\n```\n在展示层，你需要使用CSRF token：\n```bash\n<form action=\"/process\" method=\"POST\">\n  <input type=\"hidden\" name=\"_csrf\" value=\"{{csrfToken}}\">\n  Favorite color: <input type=\"text\" name=\"favoriteColor\">\n  <button type=\"submit\">Submit</button>\n</form>\n\n```\n### 数据合法性 ###\n以下是两种类似的，但是略有不同的攻击方式，一种关于跨站脚本，而另一种则关于存储。\n- 非持久化的XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。\n- 持久化的XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。\n为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。\n\n### SQL注入 ###\n在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。\n\n例如：\n\n- select title, author from books where id=$id\n\n以上这个例子中，$id来自于用户输入。用户输入2 or 1=1也可以。这个查询可能会变成：\n\n- select title, author from books where id=2 or 1=1\n\n最简单的预防方法则是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。\n如果你正在通过Node.js使用PostgreSQL。那么你可以使用[node-postgres](https://www.npmjs.com/package/pg)模块，来创建参数化查询：\n\n```bash\nvar q = 'SELECT name FROM books WHERE id = $1';\nclient.query(q, ['3'], function(err, result) {});\n```\n### 命令注入 ###\n攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。\n\n实践中，如果你有一个URL：\n\n- https://example.com/downloads?file=user1.txt\n\n它可以变成：\n\n- https://example.com/downloads?file=%3Bcat%20/etc/passwd\n\n在这个例子中，%3B会变成一个分号。所以将会运行多条系统命令。\n为了预防这类攻击，请确保总是检查过滤了用户的输入内容。\n我们也可以以Node.js的角度来说：\n\n```javascript\nchild_process.exec('ls', function (err, data) {\n    console.log(data);\n});\n```\n在child_process.exec的底层，它调用了/bin/sh，所以它是一个bash解释器，而不仅仅是只能执行用户程序。\n当用户的输入是一个反引号或$()时，将它们传入这个方法就很危险了。\n可以通过使用child_process.execFile来解决上面这个问题。\n\n### 安全传输 ###\nSSL版本，算法，键长度\n由于HTTP是明文传输的，所以我们需要通过一个SSL/TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。\n\n你需要测试：\n密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。\n证书的合法性。\n使用如nmap和sslyze这样的工具可以使这项工作非常简单。\n\n检查证书信息\n\n- nmap --script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 www.example.com\n\n使用sslyze来检查SSL/TSL：\n\n- ./sslyze.py --regular example.com:443\n\nHSTS\n在上文的配置管理章节我们已经对其有了接触 - Strict-Transport-Security头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：\n\n- strict-transport-security:max-age=631138519\n\n这里的max-age定义了浏览器需要自动将所有HTTP请求转换成HTTPS的秒数。\n\n对于它的测试是非常简单的：\n\n- curl -s -D- https://twitter.com/ | grep -i Strict\n\n### 拒绝服务 ###\n\n账号锁定\n账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实践中，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段内，禁止他的登陆操作。\n\n可以使用之前提到的rate-limiter来阻止这类攻击。\n\n正则表达式\n这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：\n\n- 对于重复文本进行分组\n- 在重复的分组内又有重复内容([a-zA-Z]+)*， (a+)+ 或 (a|a?)+在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考ReDos。\n\n可以使用Node.js工具safe-regex这检测你的正则：\n\n```\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n```\n\n### 错误处理 ###\n\n错误码，堆栈信息\n一些错误场景可能会导致应用泄露底层的应用架构信息，如：like: X-Powered-By:Express。\n\n堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的实践。你需要将它们记录在日志中，而不是展示给用户。\n\nNPM\n更强的能力意味着更大的责任 - NPM有这许多可以现成使用的包，但是代价是：你需要检查这些包本身是否存在安全问题。\n\n幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。\n```\nnpm i nsp -g\n# either audit the shrinkwrap\nnsp audit-shrinkwrap\n# or the package.json\nnsp audit-package\n\n```\n最后\n这个清单主要根据OWASP维护的[Web Application Security Testing Cheat Sheet](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)所列。\n\n","source":"_posts/node-safety-detail.md","raw":"---\ntitle: node安全性介绍\ndate: 2018-09-25 20:53:30\ntags:\n---\n安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。\n\n以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。\n\n### 配置管理 ###\n安全性相关的HTTP头\n以下是一些安全性相关的HTTP头，你的站点应该设置它们：\n\n- Strict-Transport-Security：强制使用安全连接（SSL/TLS之上的HTTPS）来连接到服务器。\n- X-Frame-Options：提供对于“点击劫持”的保护。\n- X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。\n- X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。\n- Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。\n\n在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：\n\n```javascript\nvar express = require('express');\nvar helmet = require('helmet');\nvar app = express();\napp.use(helmet());\n```\nHelmet在Koa中也能使用：koa-helmet。\n\n当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：\n\n```\n# nginx.conf\nadd_header X-Frame-Options SAMEORIGIN;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection \"1; mode=block\";\nadd_header Content-Security-Policy \"default-src 'self'\";\n```\n完整的例子可以参考[这个nginx配置](https://gist.github.com/plentz/6737338)。\n\n如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：[http://cyh.herokuapp.com/cyh](http://cyh.herokuapp.com/cyh) 。\n\n### 客户端的敏感数据 ###\n当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。\n\n现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：\n\n- 使用pull request更新代码\n- 建立起code review机制\n\n### 身份认证 ###\n对于暴力破解的保护\n暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，用户登陆就特别适合它发挥。\n\n你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用[ratelimiter](https://www.npmjs.com/package/ratelimiter)包。\n```javascript\nvar email = req.body.email;\nvar limit = new Limiter({ id: email, db: db });\nlimit.get(function(err, limit) {\n});\n```\n当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成的不错的中间件：\n```javascript\nvar ratelimit = require('koa-ratelimit');\nvar redis = require('redis');\nvar koa = require('koa');\nvar app = koa();\nvar emailBasedRatelimit = ratelimit({\n  db: redis.createClient(),\n  duration: 60000,\n  max: 10,\n  id: function (context) {\n    return context.body.email;\n  }\n});\nvar ipBasedRatelimit = ratelimit({\n  db: redis.createClient(),\n  duration: 60000,\n  max: 10,\n  id: function (context) {\n    return context.ip;\n  }\n});\napp.post('/login', ipBasedRatelimit, emailBasedRatelimit, handleLogin);\n\n```\n这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数 – 这减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据你的实际情景所改变的，所以不要简单的复制粘贴它们。。\n\n如果你想要测试你的服务在这些场景下的表现，你可以使用[hydra](https://github.com/vanhauser-thc/thc-hydra)。\n### Session管理 ###\n对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。\n\nCookie标示\n以下是一个每个cookie可以设置的属性的列表，以及它们的含义：\n- secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。\n- HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。\n\n### Cookie域 ###\n- domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。\n- path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。\n- expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。\n\n在Node.js中，你可以使用cookies包来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更像使用它的一些封装，如[cookie-session](https://www.npmjs.com/package/cookie-session) 。\n\n```javascript\nvar cookieSession = require('cookie-session');\nvar express = require('express');\nvar app = express();\napp.use(cookieSession({\n  name: 'session',\n  keys: [\n    process.env.COOKIE_KEY1,\n    process.env.COOKIE_KEY2\n  ]\n}));\napp.use(function (req, res, next) {\n  var n = req.session.views || 0;\n  req.session.views = n++;\n  res.end(n + ' views');\n});\napp.listen(3000);\n\n```\n### CSRF ###\n\n跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。\n\n在Node.js中，你可以使用[csrf](https://www.npmjs.com/package/csrf)模块来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如csurf这样的Express中间件。\n\n在路由层，可以会有如下代码：\n```javascript\nvar cookieParser = require('cookie-parser');\nvar csrf = require('csurf');\nvar bodyParser = require('body-parser');\nvar express = require('express');\n// setup route middlewares\nvar csrfProtection = csrf({ cookie: true });\nvar parseForm = bodyParser.urlencoded({ extended: false });\n// create express app\nvar app = express();\n// we need this because \"cookie\" is true in csrfProtection\napp.use(cookieParser());\napp.get('/form', csrfProtection, function(req, res) {\n  // pass the csrfToken to the view\n  res.render('send', { csrfToken: req.csrfToken() });\n});\napp.post('/process', parseForm, csrfProtection, function(req, res) {\n  res.send('data is being processed');\n});\n\n```\n在展示层，你需要使用CSRF token：\n```bash\n<form action=\"/process\" method=\"POST\">\n  <input type=\"hidden\" name=\"_csrf\" value=\"{{csrfToken}}\">\n  Favorite color: <input type=\"text\" name=\"favoriteColor\">\n  <button type=\"submit\">Submit</button>\n</form>\n\n```\n### 数据合法性 ###\n以下是两种类似的，但是略有不同的攻击方式，一种关于跨站脚本，而另一种则关于存储。\n- 非持久化的XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。\n- 持久化的XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。\n为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。\n\n### SQL注入 ###\n在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。\n\n例如：\n\n- select title, author from books where id=$id\n\n以上这个例子中，$id来自于用户输入。用户输入2 or 1=1也可以。这个查询可能会变成：\n\n- select title, author from books where id=2 or 1=1\n\n最简单的预防方法则是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。\n如果你正在通过Node.js使用PostgreSQL。那么你可以使用[node-postgres](https://www.npmjs.com/package/pg)模块，来创建参数化查询：\n\n```bash\nvar q = 'SELECT name FROM books WHERE id = $1';\nclient.query(q, ['3'], function(err, result) {});\n```\n### 命令注入 ###\n攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。\n\n实践中，如果你有一个URL：\n\n- https://example.com/downloads?file=user1.txt\n\n它可以变成：\n\n- https://example.com/downloads?file=%3Bcat%20/etc/passwd\n\n在这个例子中，%3B会变成一个分号。所以将会运行多条系统命令。\n为了预防这类攻击，请确保总是检查过滤了用户的输入内容。\n我们也可以以Node.js的角度来说：\n\n```javascript\nchild_process.exec('ls', function (err, data) {\n    console.log(data);\n});\n```\n在child_process.exec的底层，它调用了/bin/sh，所以它是一个bash解释器，而不仅仅是只能执行用户程序。\n当用户的输入是一个反引号或$()时，将它们传入这个方法就很危险了。\n可以通过使用child_process.execFile来解决上面这个问题。\n\n### 安全传输 ###\nSSL版本，算法，键长度\n由于HTTP是明文传输的，所以我们需要通过一个SSL/TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。\n\n你需要测试：\n密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。\n证书的合法性。\n使用如nmap和sslyze这样的工具可以使这项工作非常简单。\n\n检查证书信息\n\n- nmap --script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 www.example.com\n\n使用sslyze来检查SSL/TSL：\n\n- ./sslyze.py --regular example.com:443\n\nHSTS\n在上文的配置管理章节我们已经对其有了接触 - Strict-Transport-Security头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：\n\n- strict-transport-security:max-age=631138519\n\n这里的max-age定义了浏览器需要自动将所有HTTP请求转换成HTTPS的秒数。\n\n对于它的测试是非常简单的：\n\n- curl -s -D- https://twitter.com/ | grep -i Strict\n\n### 拒绝服务 ###\n\n账号锁定\n账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实践中，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段内，禁止他的登陆操作。\n\n可以使用之前提到的rate-limiter来阻止这类攻击。\n\n正则表达式\n这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：\n\n- 对于重复文本进行分组\n- 在重复的分组内又有重复内容([a-zA-Z]+)*， (a+)+ 或 (a|a?)+在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考ReDos。\n\n可以使用Node.js工具safe-regex这检测你的正则：\n\n```\n$ node safe.js '(beep|boop)*'\ntrue\n$ node safe.js '(a+){10}'\nfalse\n```\n\n### 错误处理 ###\n\n错误码，堆栈信息\n一些错误场景可能会导致应用泄露底层的应用架构信息，如：like: X-Powered-By:Express。\n\n堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的实践。你需要将它们记录在日志中，而不是展示给用户。\n\nNPM\n更强的能力意味着更大的责任 - NPM有这许多可以现成使用的包，但是代价是：你需要检查这些包本身是否存在安全问题。\n\n幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。\n```\nnpm i nsp -g\n# either audit the shrinkwrap\nnsp audit-shrinkwrap\n# or the package.json\nnsp audit-package\n\n```\n最后\n这个清单主要根据OWASP维护的[Web Application Security Testing Cheat Sheet](https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet)所列。\n\n","slug":"node-safety-detail","published":1,"updated":"2019-07-05T10:52:02.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3h8lk54001s4d85ng2zwwsu","content":"<p>安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。</p>\n<p>以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。</p>\n<h3 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h3><p>安全性相关的HTTP头<br>以下是一些安全性相关的HTTP头，你的站点应该设置它们：</p>\n<ul>\n<li>Strict-Transport-Security：强制使用安全连接（SSL/TLS之上的HTTPS）来连接到服务器。</li>\n<li>X-Frame-Options：提供对于“点击劫持”的保护。</li>\n<li>X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。</li>\n<li>X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。</li>\n<li>Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。</li>\n</ul>\n<p>在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> helmet = <span class=\"built_in\">require</span>(<span class=\"string\">'helmet'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(helmet());</span><br></pre></td></tr></table></figure>\n<p>Helmet在Koa中也能使用：koa-helmet。</p>\n<p>当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx.conf</span><br><span class=\"line\">add_header X-Frame-Options SAMEORIGIN;</span><br><span class=\"line\">add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class=\"line\">add_header Content-Security-Policy &quot;default-src &apos;self&apos;&quot;;</span><br></pre></td></tr></table></figure>\n<p>完整的例子可以参考<a href=\"https://gist.github.com/plentz/6737338\" target=\"_blank\" rel=\"noopener\">这个nginx配置</a>。</p>\n<p>如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：<a href=\"http://cyh.herokuapp.com/cyh\" target=\"_blank\" rel=\"noopener\">http://cyh.herokuapp.com/cyh</a> 。</p>\n<h3 id=\"客户端的敏感数据\"><a href=\"#客户端的敏感数据\" class=\"headerlink\" title=\"客户端的敏感数据\"></a>客户端的敏感数据</h3><p>当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。</p>\n<p>现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：</p>\n<ul>\n<li>使用pull request更新代码</li>\n<li>建立起code review机制</li>\n</ul>\n<h3 id=\"身份认证\"><a href=\"#身份认证\" class=\"headerlink\" title=\"身份认证\"></a>身份认证</h3><p>对于暴力破解的保护<br>暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，用户登陆就特别适合它发挥。</p>\n<p>你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用<a href=\"https://www.npmjs.com/package/ratelimiter\" target=\"_blank\" rel=\"noopener\">ratelimiter</a>包。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> email = req.body.email;</span><br><span class=\"line\"><span class=\"keyword\">var</span> limit = <span class=\"keyword\">new</span> Limiter(&#123; <span class=\"attr\">id</span>: email, <span class=\"attr\">db</span>: db &#125;);</span><br><span class=\"line\">limit.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, limit</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成的不错的中间件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ratelimit = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-ratelimit'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = koa();</span><br><span class=\"line\"><span class=\"keyword\">var</span> emailBasedRatelimit = ratelimit(&#123;</span><br><span class=\"line\">  db: redis.createClient(),</span><br><span class=\"line\">  duration: <span class=\"number\">60000</span>,</span><br><span class=\"line\">  max: <span class=\"number\">10</span>,</span><br><span class=\"line\">  id: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.body.email;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ipBasedRatelimit = ratelimit(&#123;</span><br><span class=\"line\">  db: redis.createClient(),</span><br><span class=\"line\">  duration: <span class=\"number\">60000</span>,</span><br><span class=\"line\">  max: <span class=\"number\">10</span>,</span><br><span class=\"line\">  id: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.ip;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>, ipBasedRatelimit, emailBasedRatelimit, handleLogin);</span><br></pre></td></tr></table></figure></p>\n<p>这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数 – 这减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据你的实际情景所改变的，所以不要简单的复制粘贴它们。。</p>\n<p>如果你想要测试你的服务在这些场景下的表现，你可以使用<a href=\"https://github.com/vanhauser-thc/thc-hydra\" target=\"_blank\" rel=\"noopener\">hydra</a>。</p>\n<h3 id=\"Session管理\"><a href=\"#Session管理\" class=\"headerlink\" title=\"Session管理\"></a>Session管理</h3><p>对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。</p>\n<p>Cookie标示<br>以下是一个每个cookie可以设置的属性的列表，以及它们的含义：</p>\n<ul>\n<li>secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。</li>\n<li>HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。</li>\n</ul>\n<h3 id=\"Cookie域\"><a href=\"#Cookie域\" class=\"headerlink\" title=\"Cookie域\"></a>Cookie域</h3><ul>\n<li>domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。</li>\n<li>path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。</li>\n<li>expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。</li>\n</ul>\n<p>在Node.js中，你可以使用cookies包来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更像使用它的一些封装，如<a href=\"https://www.npmjs.com/package/cookie-session\" target=\"_blank\" rel=\"noopener\">cookie-session</a> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookieSession = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(cookieSession(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'session'</span>,</span><br><span class=\"line\">  keys: [</span><br><span class=\"line\">    process.env.COOKIE_KEY1,</span><br><span class=\"line\">    process.env.COOKIE_KEY2</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = req.session.views || <span class=\"number\">0</span>;</span><br><span class=\"line\">  req.session.views = n++;</span><br><span class=\"line\">  res.end(n + <span class=\"string\">' views'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3><p>跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。</p>\n<p>在Node.js中，你可以使用<a href=\"https://www.npmjs.com/package/csrf\" target=\"_blank\" rel=\"noopener\">csrf</a>模块来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如csurf这样的Express中间件。</p>\n<p>在路由层，可以会有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> csrf = <span class=\"built_in\">require</span>(<span class=\"string\">'csurf'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"comment\">// setup route middlewares</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> csrfProtection = csrf(&#123; <span class=\"attr\">cookie</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> parseForm = bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// create express app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">// we need this because \"cookie\" is true in csrfProtection</span></span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.get(<span class=\"string\">'/form'</span>, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// pass the csrfToken to the view</span></span><br><span class=\"line\">  res.render(<span class=\"string\">'send'</span>, &#123; <span class=\"attr\">csrfToken</span>: req.csrfToken() &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/process'</span>, parseForm, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'data is being processed'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在展示层，你需要使用CSRF token：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"/process\"</span> method=<span class=\"string\">\"POST\"</span>&gt;</span><br><span class=\"line\">  &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"hidden\"</span> name=<span class=\"string\">\"_csrf\"</span> value=<span class=\"string\">\"&#123;&#123;csrfToken&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  Favorite color: &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"favoriteColor\"</span>&gt;</span><br><span class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span>&gt;Submit&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据合法性\"><a href=\"#数据合法性\" class=\"headerlink\" title=\"数据合法性\"></a>数据合法性</h3><p>以下是两种类似的，但是略有不同的攻击方式，一种关于跨站脚本，而另一种则关于存储。</p>\n<ul>\n<li>非持久化的XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。</li>\n<li>持久化的XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。<br>为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。</li>\n</ul>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。</p>\n<p>例如：</p>\n<ul>\n<li>select title, author from books where id=$id</li>\n</ul>\n<p>以上这个例子中，$id来自于用户输入。用户输入2 or 1=1也可以。这个查询可能会变成：</p>\n<ul>\n<li>select title, author from books where id=2 or 1=1</li>\n</ul>\n<p>最简单的预防方法则是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。<br>如果你正在通过Node.js使用PostgreSQL。那么你可以使用<a href=\"https://www.npmjs.com/package/pg\" target=\"_blank\" rel=\"noopener\">node-postgres</a>模块，来创建参数化查询：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var q = <span class=\"string\">'SELECT name FROM books WHERE id = $1'</span>;</span><br><span class=\"line\">client.query(q, [<span class=\"string\">'3'</span>], <span class=\"keyword\">function</span>(err, result) &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h3><p>攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。</p>\n<p>实践中，如果你有一个URL：</p>\n<ul>\n<li><a href=\"https://example.com/downloads?file=user1.txt\" target=\"_blank\" rel=\"noopener\">https://example.com/downloads?file=user1.txt</a></li>\n</ul>\n<p>它可以变成：</p>\n<ul>\n<li><a href=\"https://example.com/downloads?file=%3Bcat%20/etc/passwd\" target=\"_blank\" rel=\"noopener\">https://example.com/downloads?file=%3Bcat%20/etc/passwd</a></li>\n</ul>\n<p>在这个例子中，%3B会变成一个分号。所以将会运行多条系统命令。<br>为了预防这类攻击，请确保总是检查过滤了用户的输入内容。<br>我们也可以以Node.js的角度来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child_process.exec(<span class=\"string\">'ls'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在child_process.exec的底层，它调用了/bin/sh，所以它是一个bash解释器，而不仅仅是只能执行用户程序。<br>当用户的输入是一个反引号或$()时，将它们传入这个方法就很危险了。<br>可以通过使用child_process.execFile来解决上面这个问题。</p>\n<h3 id=\"安全传输\"><a href=\"#安全传输\" class=\"headerlink\" title=\"安全传输\"></a>安全传输</h3><p>SSL版本，算法，键长度<br>由于HTTP是明文传输的，所以我们需要通过一个SSL/TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。</p>\n<p>你需要测试：<br>密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。<br>证书的合法性。<br>使用如nmap和sslyze这样的工具可以使这项工作非常简单。</p>\n<p>检查证书信息</p>\n<ul>\n<li>nmap –script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a></li>\n</ul>\n<p>使用sslyze来检查SSL/TSL：</p>\n<ul>\n<li>./sslyze.py –regular example.com:443</li>\n</ul>\n<p>HSTS<br>在上文的配置管理章节我们已经对其有了接触 - Strict-Transport-Security头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：</p>\n<ul>\n<li>strict-transport-security:max-age=631138519</li>\n</ul>\n<p>这里的max-age定义了浏览器需要自动将所有HTTP请求转换成HTTPS的秒数。</p>\n<p>对于它的测试是非常简单的：</p>\n<ul>\n<li>curl -s -D- <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener\">https://twitter.com/</a> | grep -i Strict</li>\n</ul>\n<h3 id=\"拒绝服务\"><a href=\"#拒绝服务\" class=\"headerlink\" title=\"拒绝服务\"></a>拒绝服务</h3><p>账号锁定<br>账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实践中，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段内，禁止他的登陆操作。</p>\n<p>可以使用之前提到的rate-limiter来阻止这类攻击。</p>\n<p>正则表达式<br>这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：</p>\n<ul>\n<li>对于重复文本进行分组</li>\n<li>在重复的分组内又有重复内容([a-zA-Z]+)*， (a+)+ 或 (a|a?)+在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考ReDos。</li>\n</ul>\n<p>可以使用Node.js工具safe-regex这检测你的正则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node safe.js &apos;(beep|boop)*&apos;</span><br><span class=\"line\">true</span><br><span class=\"line\">$ node safe.js &apos;(a+)&#123;10&#125;&apos;</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>错误码，堆栈信息<br>一些错误场景可能会导致应用泄露底层的应用架构信息，如：like: X-Powered-By:Express。</p>\n<p>堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的实践。你需要将它们记录在日志中，而不是展示给用户。</p>\n<p>NPM<br>更强的能力意味着更大的责任 - NPM有这许多可以现成使用的包，但是代价是：你需要检查这些包本身是否存在安全问题。</p>\n<p>幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i nsp -g</span><br><span class=\"line\"># either audit the shrinkwrap</span><br><span class=\"line\">nsp audit-shrinkwrap</span><br><span class=\"line\"># or the package.json</span><br><span class=\"line\">nsp audit-package</span><br></pre></td></tr></table></figure></p>\n<p>最后<br>这个清单主要根据OWASP维护的<a href=\"https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet\" target=\"_blank\" rel=\"noopener\">Web Application Security Testing Cheat Sheet</a>所列。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安全性，总是一个不可忽视的问题。许多人都承认这点，但是却很少有人真的认真地对待它。所以我们列出了这个清单，让你在将你的应用部署到生产环境来给千万用户使用之前，做一个安全检查。</p>\n<p>以下列出的安全项，大多都具有普适性，适用于除了Node.js外的各种语言和框架。但是，其中也包含一些用Node.js写的小工具。</p>\n<h3 id=\"配置管理\"><a href=\"#配置管理\" class=\"headerlink\" title=\"配置管理\"></a>配置管理</h3><p>安全性相关的HTTP头<br>以下是一些安全性相关的HTTP头，你的站点应该设置它们：</p>\n<ul>\n<li>Strict-Transport-Security：强制使用安全连接（SSL/TLS之上的HTTPS）来连接到服务器。</li>\n<li>X-Frame-Options：提供对于“点击劫持”的保护。</li>\n<li>X-XSS-Protection：开启大多现代浏览器内建的对于跨站脚本攻击（XSS）的过滤功能。</li>\n<li>X-Content-Type-Options： 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定。</li>\n<li>Content-Security-Policy：防止受到跨站脚本攻击以及其他跨站注入攻击。</li>\n</ul>\n<p>在Node.js中，这些都可以通过使用Helmet模块轻松设置完毕：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> helmet = <span class=\"built_in\">require</span>(<span class=\"string\">'helmet'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(helmet());</span><br></pre></td></tr></table></figure>\n<p>Helmet在Koa中也能使用：koa-helmet。</p>\n<p>当然，在许多的架构中，这些头会在Web服务器(Apache，nginx)的配置中设置，而不是在应用的代码中。如果是通过nginx配置，配置文件会类似于如下例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nginx.conf</span><br><span class=\"line\">add_header X-Frame-Options SAMEORIGIN;</span><br><span class=\"line\">add_header X-Content-Type-Options nosniff;</span><br><span class=\"line\">add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class=\"line\">add_header Content-Security-Policy &quot;default-src &apos;self&apos;&quot;;</span><br></pre></td></tr></table></figure>\n<p>完整的例子可以参考<a href=\"https://gist.github.com/plentz/6737338\" target=\"_blank\" rel=\"noopener\">这个nginx配置</a>。</p>\n<p>如果你想快速确认你的网站是否都设置这些HTTP头，你可以通过这个网站在线检查：<a href=\"http://cyh.herokuapp.com/cyh\" target=\"_blank\" rel=\"noopener\">http://cyh.herokuapp.com/cyh</a> 。</p>\n<h3 id=\"客户端的敏感数据\"><a href=\"#客户端的敏感数据\" class=\"headerlink\" title=\"客户端的敏感数据\"></a>客户端的敏感数据</h3><p>当部署前端应用时，确保不要在代码中暴露如密钥这样的敏感数据，这将可以被所有人看到。</p>\n<p>现今并没有什么自动化检测它们的办法，但是还是有一些手段可以用来减少不小心将敏感数据暴露在客户端的概率：</p>\n<ul>\n<li>使用pull request更新代码</li>\n<li>建立起code review机制</li>\n</ul>\n<h3 id=\"身份认证\"><a href=\"#身份认证\" class=\"headerlink\" title=\"身份认证\"></a>身份认证</h3><p>对于暴力破解的保护<br>暴力破解即系统地列举所有可能的结果，并逐一尝试，来找到正确答案。在web应用中，用户登陆就特别适合它发挥。</p>\n<p>你可以通过限制用户的连接频率来防止这类的攻击。在Node.js中，你可以使用<a href=\"https://www.npmjs.com/package/ratelimiter\" target=\"_blank\" rel=\"noopener\">ratelimiter</a>包。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> email = req.body.email;</span><br><span class=\"line\"><span class=\"keyword\">var</span> limit = <span class=\"keyword\">new</span> Limiter(&#123; <span class=\"attr\">id</span>: email, <span class=\"attr\">db</span>: db &#125;);</span><br><span class=\"line\">limit.get(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, limit</span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>当然，你可以将它封装成一个中间件以供你的应用使用。Express和Koa都已经有现成的不错的中间件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ratelimit = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-ratelimit'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> redis = <span class=\"built_in\">require</span>(<span class=\"string\">'redis'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = koa();</span><br><span class=\"line\"><span class=\"keyword\">var</span> emailBasedRatelimit = ratelimit(&#123;</span><br><span class=\"line\">  db: redis.createClient(),</span><br><span class=\"line\">  duration: <span class=\"number\">60000</span>,</span><br><span class=\"line\">  max: <span class=\"number\">10</span>,</span><br><span class=\"line\">  id: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.body.email;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ipBasedRatelimit = ratelimit(&#123;</span><br><span class=\"line\">  db: redis.createClient(),</span><br><span class=\"line\">  duration: <span class=\"number\">60000</span>,</span><br><span class=\"line\">  max: <span class=\"number\">10</span>,</span><br><span class=\"line\">  id: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context.ip;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/login'</span>, ipBasedRatelimit, emailBasedRatelimit, handleLogin);</span><br></pre></td></tr></table></figure></p>\n<p>这里我们所做的，就是限制了在一段给定时间内，用户可以尝试登陆的次数 – 这减少用户密码被暴力破解的风险。以上例子中的选项都是可以根据你的实际情景所改变的，所以不要简单的复制粘贴它们。。</p>\n<p>如果你想要测试你的服务在这些场景下的表现，你可以使用<a href=\"https://github.com/vanhauser-thc/thc-hydra\" target=\"_blank\" rel=\"noopener\">hydra</a>。</p>\n<h3 id=\"Session管理\"><a href=\"#Session管理\" class=\"headerlink\" title=\"Session管理\"></a>Session管理</h3><p>对于cookie的安全使用，其重要性是不言而喻的。特别是对于动态的web应用，在如HTTP这样的无状态协议的之上，它们需要使用cookie来维持状态。</p>\n<p>Cookie标示<br>以下是一个每个cookie可以设置的属性的列表，以及它们的含义：</p>\n<ul>\n<li>secure - 这个属性告诉浏览器，仅在请求是通过HTTPS传输时，才传递cookie。</li>\n<li>HttpOnly - 设置这个属性将禁止javascript脚本获取到这个cookie，这可以用来帮助防止跨站脚本攻击。</li>\n</ul>\n<h3 id=\"Cookie域\"><a href=\"#Cookie域\" class=\"headerlink\" title=\"Cookie域\"></a>Cookie域</h3><ul>\n<li>domain - 这个属性用来比较请求URL中服务端的域名。如果域名匹配成功，或这是其子域名，则继续检查path属性。</li>\n<li>path - 除了域名，cookie可用的URL路径也可以被指定。当域名和路径都匹配时，cookie才会随请求发送。</li>\n<li>expires - 这个属性用来设置持久化的cookie，当设置了它之后，cookie在指定的时间到达之前都不会过期。</li>\n</ul>\n<p>在Node.js中，你可以使用cookies包来轻松创建cookie。但是，它是较底层的。在创建应用时，你可能更像使用它的一些封装，如<a href=\"https://www.npmjs.com/package/cookie-session\" target=\"_blank\" rel=\"noopener\">cookie-session</a> 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookieSession = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-session'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(cookieSession(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'session'</span>,</span><br><span class=\"line\">  keys: [</span><br><span class=\"line\">    process.env.COOKIE_KEY1,</span><br><span class=\"line\">    process.env.COOKIE_KEY2</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> n = req.session.views || <span class=\"number\">0</span>;</span><br><span class=\"line\">  req.session.views = n++;</span><br><span class=\"line\">  res.end(n + <span class=\"string\">' views'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"CSRF\"><a href=\"#CSRF\" class=\"headerlink\" title=\"CSRF\"></a>CSRF</h3><p>跨站请求伪造（CSRF）是一种迫使用户在他们已登录的web应用中，执行一个并非他们原意的操作的攻击手段。这种攻击常常用于那些会改变用户的状态的请求，通常它们并不窃取数据，因为攻击者并不能看到响应的内容。</p>\n<p>在Node.js中，你可以使用<a href=\"https://www.npmjs.com/package/csrf\" target=\"_blank\" rel=\"noopener\">csrf</a>模块来缓和这种攻击。它同样是非常底层的，你可能更喜欢使用如csurf这样的Express中间件。</p>\n<p>在路由层，可以会有如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> csrf = <span class=\"built_in\">require</span>(<span class=\"string\">'csurf'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"comment\">// setup route middlewares</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> csrfProtection = csrf(&#123; <span class=\"attr\">cookie</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> parseForm = bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// create express app</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\"><span class=\"comment\">// we need this because \"cookie\" is true in csrfProtection</span></span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.get(<span class=\"string\">'/form'</span>, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// pass the csrfToken to the view</span></span><br><span class=\"line\">  res.render(<span class=\"string\">'send'</span>, &#123; <span class=\"attr\">csrfToken</span>: req.csrfToken() &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">'/process'</span>, parseForm, csrfProtection, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">'data is being processed'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>在展示层，你需要使用CSRF token：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"/process\"</span> method=<span class=\"string\">\"POST\"</span>&gt;</span><br><span class=\"line\">  &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"hidden\"</span> name=<span class=\"string\">\"_csrf\"</span> value=<span class=\"string\">\"&#123;&#123;csrfToken&#125;&#125;\"</span>&gt;</span><br><span class=\"line\">  Favorite color: &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"favoriteColor\"</span>&gt;</span><br><span class=\"line\">  &lt;button <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span>&gt;Submit&lt;/button&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据合法性\"><a href=\"#数据合法性\" class=\"headerlink\" title=\"数据合法性\"></a>数据合法性</h3><p>以下是两种类似的，但是略有不同的攻击方式，一种关于跨站脚本，而另一种则关于存储。</p>\n<ul>\n<li>非持久化的XSS攻击 在攻击者向指定的URL的响应HTML中注入可执行的JavaScript代码时发生。</li>\n<li>持久化的XSS攻击 在应用存储未经过滤的用户输入时发生。用户输入的代码会在你的应用环境下执行。<br>为了防御这类攻击，请确保你总是检查并过滤了用户的输入内容。</li>\n</ul>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>在用户的输入中包含部分或完整的SQL查询语句时，SQL注入就有可能发生。它可能会读取敏感数据，或是直接删除数据。</p>\n<p>例如：</p>\n<ul>\n<li>select title, author from books where id=$id</li>\n</ul>\n<p>以上这个例子中，$id来自于用户输入。用户输入2 or 1=1也可以。这个查询可能会变成：</p>\n<ul>\n<li>select title, author from books where id=2 or 1=1</li>\n</ul>\n<p>最简单的预防方法则是使用参数化查询（parameterized queries）或预处理语句（prepared statements）。<br>如果你正在通过Node.js使用PostgreSQL。那么你可以使用<a href=\"https://www.npmjs.com/package/pg\" target=\"_blank\" rel=\"noopener\">node-postgres</a>模块，来创建参数化查询：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var q = <span class=\"string\">'SELECT name FROM books WHERE id = $1'</span>;</span><br><span class=\"line\">client.query(q, [<span class=\"string\">'3'</span>], <span class=\"keyword\">function</span>(err, result) &#123;&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h3><p>攻击者使用命令注入来在远程web服务器中运行系统命令。通过命令注入，攻击者甚至可以取得系统的密码。</p>\n<p>实践中，如果你有一个URL：</p>\n<ul>\n<li><a href=\"https://example.com/downloads?file=user1.txt\" target=\"_blank\" rel=\"noopener\">https://example.com/downloads?file=user1.txt</a></li>\n</ul>\n<p>它可以变成：</p>\n<ul>\n<li><a href=\"https://example.com/downloads?file=%3Bcat%20/etc/passwd\" target=\"_blank\" rel=\"noopener\">https://example.com/downloads?file=%3Bcat%20/etc/passwd</a></li>\n</ul>\n<p>在这个例子中，%3B会变成一个分号。所以将会运行多条系统命令。<br>为了预防这类攻击，请确保总是检查过滤了用户的输入内容。<br>我们也可以以Node.js的角度来说：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child_process.exec(<span class=\"string\">'ls'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在child_process.exec的底层，它调用了/bin/sh，所以它是一个bash解释器，而不仅仅是只能执行用户程序。<br>当用户的输入是一个反引号或$()时，将它们传入这个方法就很危险了。<br>可以通过使用child_process.execFile来解决上面这个问题。</p>\n<h3 id=\"安全传输\"><a href=\"#安全传输\" class=\"headerlink\" title=\"安全传输\"></a>安全传输</h3><p>SSL版本，算法，键长度<br>由于HTTP是明文传输的，所以我们需要通过一个SSL/TLS通道来加密，即HTTPS。如今高级别的加密方式已被普遍使用，但是，如果在服务端缺乏配置，也可能会导致服务端使用低级别的加密，或不加密。</p>\n<p>你需要测试：<br>密码，密钥和重协商（renegotiation）都已经合法妥善得配置完毕。<br>证书的合法性。<br>使用如nmap和sslyze这样的工具可以使这项工作非常简单。</p>\n<p>检查证书信息</p>\n<ul>\n<li>nmap –script ssl-cert,ssl-enum-ciphers -p 443,465,993,995 <a href=\"http://www.example.com\" target=\"_blank\" rel=\"noopener\">www.example.com</a></li>\n</ul>\n<p>使用sslyze来检查SSL/TSL：</p>\n<ul>\n<li>./sslyze.py –regular example.com:443</li>\n</ul>\n<p>HSTS<br>在上文的配置管理章节我们已经对其有了接触 - Strict-Transport-Security头会强制使用HTTPS来连接服务器。以下是一个Twitter的例子：</p>\n<ul>\n<li>strict-transport-security:max-age=631138519</li>\n</ul>\n<p>这里的max-age定义了浏览器需要自动将所有HTTP请求转换成HTTPS的秒数。</p>\n<p>对于它的测试是非常简单的：</p>\n<ul>\n<li>curl -s -D- <a href=\"https://twitter.com/\" target=\"_blank\" rel=\"noopener\">https://twitter.com/</a> | grep -i Strict</li>\n</ul>\n<h3 id=\"拒绝服务\"><a href=\"#拒绝服务\" class=\"headerlink\" title=\"拒绝服务\"></a>拒绝服务</h3><p>账号锁定<br>账号锁定用于缓和暴力破解带来的拒绝服务方面的影响。实践中，它意味着，当用户尝试了几次登陆并失败后，将在其后的一段内，禁止他的登陆操作。</p>\n<p>可以使用之前提到的rate-limiter来阻止这类攻击。</p>\n<p>正则表达式<br>这类攻击主要是由于一些正则表达式，在极端情况下，会变得性能及其糟糕。这些正则被称为恶魔正则（Evil Regexes）：</p>\n<ul>\n<li>对于重复文本进行分组</li>\n<li>在重复的分组内又有重复内容([a-zA-Z]+)*， (a+)+ 或 (a|a?)+在如aaaaaaaaaaaaaaaaaaaaaaaa! 这样的输入面前，都是脆弱的。这会引起大量的计算。更多详情可以参考ReDos。</li>\n</ul>\n<p>可以使用Node.js工具safe-regex这检测你的正则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node safe.js &apos;(beep|boop)*&apos;</span><br><span class=\"line\">true</span><br><span class=\"line\">$ node safe.js &apos;(a+)&#123;10&#125;&apos;</span><br><span class=\"line\">false</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>错误码，堆栈信息<br>一些错误场景可能会导致应用泄露底层的应用架构信息，如：like: X-Powered-By:Express。</p>\n<p>堆栈信息可能自己本身并没有什么用，但它经常能泄露一些攻击者非常感兴趣的信息。将堆栈信息返回出来是非常不好的实践。你需要将它们记录在日志中，而不是展示给用户。</p>\n<p>NPM<br>更强的能力意味着更大的责任 - NPM有这许多可以现成使用的包，但是代价是：你需要检查这些包本身是否存在安全问题。</p>\n<p>幸运的是Node Security project(nsp)是一个非常棒的工具，来检查你使用的模块是否是易被一些已知的手段攻击的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i nsp -g</span><br><span class=\"line\"># either audit the shrinkwrap</span><br><span class=\"line\">nsp audit-shrinkwrap</span><br><span class=\"line\"># or the package.json</span><br><span class=\"line\">nsp audit-package</span><br></pre></td></tr></table></figure></p>\n<p>最后<br>这个清单主要根据OWASP维护的<a href=\"https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet\" target=\"_blank\" rel=\"noopener\">Web Application Security Testing Cheat Sheet</a>所列。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3h8lk4q000l4d85hfbmz5mo","category_id":"ck3h8lk4s000q4d85g420h3wp","_id":"ck3h8lk4u000w4d85ghg40409"},{"post_id":"ck3h8lk4r000n4d85js2rd24v","category_id":"ck3h8lk4t000u4d85g65noz3n","_id":"ck3h8lk4v00164d85y4wqazw9"},{"post_id":"ck3h8lk4r000n4d85js2rd24v","category_id":"ck3h8lk4u000y4d85lob4pg47","_id":"ck3h8lk4w00184d85l7im5bsh"}],"PostTag":[{"post_id":"ck3h8lk4h00084d85xcubei99","tag_id":"ck3h8lk4c00034d85z5sno2ys","_id":"ck3h8lk4j000b4d85tk8mkhv5"},{"post_id":"ck3h8lk4h00084d85xcubei99","tag_id":"ck3h8lk4g00074d85xuc2qi2h","_id":"ck3h8lk4l000d4d85truucmsp"},{"post_id":"ck3h8lk4400004d851ozy1nf3","tag_id":"ck3h8lk4c00034d85z5sno2ys","_id":"ck3h8lk4q000k4d854cxmziuo"},{"post_id":"ck3h8lk4400004d851ozy1nf3","tag_id":"ck3h8lk4g00074d85xuc2qi2h","_id":"ck3h8lk4r000m4d85259wi1he"},{"post_id":"ck3h8lk4400004d851ozy1nf3","tag_id":"ck3h8lk4j000a4d85cd2uue0d","_id":"ck3h8lk4s000p4d856368bmcw"},{"post_id":"ck3h8lk4400004d851ozy1nf3","tag_id":"ck3h8lk4m000f4d85q6vxcr7p","_id":"ck3h8lk4t000r4d85c6vxvz66"},{"post_id":"ck3h8lk4r000n4d85js2rd24v","tag_id":"ck3h8lk4c00034d85z5sno2ys","_id":"ck3h8lk4t000t4d85idbo9e9u"},{"post_id":"ck3h8lk4d00044d854k3k3fv7","tag_id":"ck3h8lk4p000i4d85vdhag36j","_id":"ck3h8lk4u000z4d85fqjgemut"},{"post_id":"ck3h8lk4d00044d854k3k3fv7","tag_id":"ck3h8lk4s000o4d85wfl84nr4","_id":"ck3h8lk4v00104d8530z2qe0a"},{"post_id":"ck3h8lk4d00044d854k3k3fv7","tag_id":"ck3h8lk4t000s4d85vmuq6lgf","_id":"ck3h8lk4v00124d85t8konpht"},{"post_id":"ck3h8lk4d00044d854k3k3fv7","tag_id":"ck3h8lk4t000v4d85x2l6495q","_id":"ck3h8lk4v00134d85eh1d4pcb"},{"post_id":"ck3h8lk4f00054d85a7vxr9sf","tag_id":"ck3h8lk4u000x4d85vwb52sb2","_id":"ck3h8lk4v00154d85kiw103o7"},{"post_id":"ck3h8lk4f00054d85a7vxr9sf","tag_id":"ck3h8lk4v00114d859wu26yhy","_id":"ck3h8lk4v00174d85fbvxuneo"},{"post_id":"ck3h8lk4g00064d85y7r1wba5","tag_id":"ck3h8lk4v00144d852db1nma0","_id":"ck3h8lk4w001b4d85obfls45c"},{"post_id":"ck3h8lk4g00064d85y7r1wba5","tag_id":"ck3h8lk4w00194d85wab6md8o","_id":"ck3h8lk4w001c4d85cvoz57b3"},{"post_id":"ck3h8lk4l000e4d853zl1fdsm","tag_id":"ck3h8lk4w001a4d85vrzo81ok","_id":"ck3h8lk4x001f4d85teo108t0"},{"post_id":"ck3h8lk4l000e4d853zl1fdsm","tag_id":"ck3h8lk4w001d4d85vzz03r8l","_id":"ck3h8lk4x001g4d8534j0limo"},{"post_id":"ck3h8lk4o000h4d85yqt1599t","tag_id":"ck3h8lk4c00034d85z5sno2ys","_id":"ck3h8lk4x001i4d857umoe7ir"},{"post_id":"ck3h8lk4o000h4d85yqt1599t","tag_id":"ck3h8lk4m000f4d85q6vxcr7p","_id":"ck3h8lk4x001j4d85l7wiky05"},{"post_id":"ck3h8lk4o000h4d85yqt1599t","tag_id":"ck3h8lk4x001e4d856avwzwls","_id":"ck3h8lk4y001l4d853icr15yq"},{"post_id":"ck3h8lk4p000j4d85tvyxwlzg","tag_id":"ck3h8lk4x001h4d8588a6fy3b","_id":"ck3h8lk4y001n4d85wqdbfip0"},{"post_id":"ck3h8lk4p000j4d85tvyxwlzg","tag_id":"ck3h8lk4y001k4d853sxoyfr3","_id":"ck3h8lk4y001o4d85pcjccjfg"},{"post_id":"ck3h8lk4q000l4d85hfbmz5mo","tag_id":"ck3h8lk4y001m4d85x9nba6nf","_id":"ck3h8lk4z001q4d857xek9wbs"},{"post_id":"ck3h8lk4q000l4d85hfbmz5mo","tag_id":"ck3h8lk4y001p4d854plf1brd","_id":"ck3h8lk4z001r4d85es6sll0z"}],"Tag":[{"name":"linux","_id":"ck3h8lk4c00034d85z5sno2ys"},{"name":"防火墙","_id":"ck3h8lk4g00074d85xuc2qi2h"},{"name":"CentOS","_id":"ck3h8lk4j000a4d85cd2uue0d"},{"name":"服务器","_id":"ck3h8lk4m000f4d85q6vxcr7p"},{"name":"docker","_id":"ck3h8lk4p000i4d85vdhag36j"},{"name":"postgres","_id":"ck3h8lk4s000o4d85wfl84nr4"},{"name":"sql","_id":"ck3h8lk4t000s4d85vmuq6lgf"},{"name":"增量备份","_id":"ck3h8lk4t000v4d85x2l6495q"},{"name":"Hexo","_id":"ck3h8lk4u000x4d85vwb52sb2"},{"name":"Github","_id":"ck3h8lk4v00114d859wu26yhy"},{"name":"Http","_id":"ck3h8lk4v00144d852db1nma0"},{"name":"web","_id":"ck3h8lk4w00194d85wab6md8o"},{"name":"node","_id":"ck3h8lk4w001a4d85vrzo81ok"},{"name":"http","_id":"ck3h8lk4w001d4d85vzz03r8l"},{"name":"管道","_id":"ck3h8lk4x001e4d856avwzwls"},{"name":"ssh","_id":"ck3h8lk4x001h4d8588a6fy3b"},{"name":"git","_id":"ck3h8lk4y001k4d853sxoyfr3"},{"name":"sequelize","_id":"ck3h8lk4y001m4d85x9nba6nf"},{"name":"pgsql","_id":"ck3h8lk4y001p4d854plf1brd"}]}}